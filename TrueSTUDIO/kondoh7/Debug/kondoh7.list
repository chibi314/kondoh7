
kondoh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e0  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000104  20000000  0800854c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00004544  20000104  08008650  00020104  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004648  08008650  00024648  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 11 .debug_line   0000df51  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000354d4  00000000  00000000  0002e083  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005784  00000000  00000000  00063557  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001838  00000000  00000000  00068ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017f0  00000000  00000000  0006a518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00012267  00000000  00000000  0006bd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008e4f  00000000  00000000  0007df6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00086dbe  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000413c  00000000  00000000  00086e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  0008af78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000104 	.word	0x20000104
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008260 	.word	0x08008260

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000108 	.word	0x20000108
 80002dc:	08008260 	.word	0x08008260

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f001 b8f6 	b.w	80014e4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <selfrel_offset31>:
 80005ec:	6803      	ldr	r3, [r0, #0]
 80005ee:	005a      	lsls	r2, r3, #1
 80005f0:	bf4c      	ite	mi
 80005f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80005f6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80005fa:	4418      	add	r0, r3
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <search_EIT_table>:
 8000600:	b361      	cbz	r1, 800065c <search_EIT_table+0x5c>
 8000602:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000606:	f101 3aff 	add.w	sl, r1, #4294967295
 800060a:	4690      	mov	r8, r2
 800060c:	4606      	mov	r6, r0
 800060e:	46d1      	mov	r9, sl
 8000610:	2700      	movs	r7, #0
 8000612:	eb07 0409 	add.w	r4, r7, r9
 8000616:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800061a:	1064      	asrs	r4, r4, #1
 800061c:	00e5      	lsls	r5, r4, #3
 800061e:	1971      	adds	r1, r6, r5
 8000620:	4608      	mov	r0, r1
 8000622:	f7ff ffe3 	bl	80005ec <selfrel_offset31>
 8000626:	45a2      	cmp	sl, r4
 8000628:	4683      	mov	fp, r0
 800062a:	f105 0008 	add.w	r0, r5, #8
 800062e:	4430      	add	r0, r6
 8000630:	d009      	beq.n	8000646 <search_EIT_table+0x46>
 8000632:	f7ff ffdb 	bl	80005ec <selfrel_offset31>
 8000636:	45c3      	cmp	fp, r8
 8000638:	f100 30ff 	add.w	r0, r0, #4294967295
 800063c:	d805      	bhi.n	800064a <search_EIT_table+0x4a>
 800063e:	4540      	cmp	r0, r8
 8000640:	d209      	bcs.n	8000656 <search_EIT_table+0x56>
 8000642:	1c67      	adds	r7, r4, #1
 8000644:	e7e5      	b.n	8000612 <search_EIT_table+0x12>
 8000646:	45c3      	cmp	fp, r8
 8000648:	d905      	bls.n	8000656 <search_EIT_table+0x56>
 800064a:	42a7      	cmp	r7, r4
 800064c:	d002      	beq.n	8000654 <search_EIT_table+0x54>
 800064e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000652:	e7de      	b.n	8000612 <search_EIT_table+0x12>
 8000654:	2100      	movs	r1, #0
 8000656:	4608      	mov	r0, r1
 8000658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800065c:	4608      	mov	r0, r1
 800065e:	4770      	bx	lr

08000660 <__gnu_unwind_get_pr_addr>:
 8000660:	2801      	cmp	r0, #1
 8000662:	d007      	beq.n	8000674 <__gnu_unwind_get_pr_addr+0x14>
 8000664:	2802      	cmp	r0, #2
 8000666:	d007      	beq.n	8000678 <__gnu_unwind_get_pr_addr+0x18>
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__gnu_unwind_get_pr_addr+0x1c>)
 800066a:	2800      	cmp	r0, #0
 800066c:	bf0c      	ite	eq
 800066e:	4618      	moveq	r0, r3
 8000670:	2000      	movne	r0, #0
 8000672:	4770      	bx	lr
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <__gnu_unwind_get_pr_addr+0x20>)
 8000676:	4770      	bx	lr
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <__gnu_unwind_get_pr_addr+0x24>)
 800067a:	4770      	bx	lr
 800067c:	08000d65 	.word	0x08000d65
 8000680:	08000d69 	.word	0x08000d69
 8000684:	08000d6d 	.word	0x08000d6d

08000688 <get_eit_entry>:
 8000688:	b530      	push	{r4, r5, lr}
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <get_eit_entry+0x94>)
 800068c:	b083      	sub	sp, #12
 800068e:	4604      	mov	r4, r0
 8000690:	1e8d      	subs	r5, r1, #2
 8000692:	b37b      	cbz	r3, 80006f4 <get_eit_entry+0x6c>
 8000694:	a901      	add	r1, sp, #4
 8000696:	4628      	mov	r0, r5
 8000698:	f3af 8000 	nop.w
 800069c:	b320      	cbz	r0, 80006e8 <get_eit_entry+0x60>
 800069e:	9901      	ldr	r1, [sp, #4]
 80006a0:	462a      	mov	r2, r5
 80006a2:	f7ff ffad 	bl	8000600 <search_EIT_table>
 80006a6:	4601      	mov	r1, r0
 80006a8:	b1f0      	cbz	r0, 80006e8 <get_eit_entry+0x60>
 80006aa:	f7ff ff9f 	bl	80005ec <selfrel_offset31>
 80006ae:	684b      	ldr	r3, [r1, #4]
 80006b0:	64a0      	str	r0, [r4, #72]	; 0x48
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d012      	beq.n	80006dc <get_eit_entry+0x54>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f101 0004 	add.w	r0, r1, #4
 80006bc:	db20      	blt.n	8000700 <get_eit_entry+0x78>
 80006be:	f7ff ff95 	bl	80005ec <selfrel_offset31>
 80006c2:	2300      	movs	r3, #0
 80006c4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80006c6:	6523      	str	r3, [r4, #80]	; 0x50
 80006c8:	6803      	ldr	r3, [r0, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db1c      	blt.n	8000708 <get_eit_entry+0x80>
 80006ce:	f7ff ff8d 	bl	80005ec <selfrel_offset31>
 80006d2:	2300      	movs	r3, #0
 80006d4:	6120      	str	r0, [r4, #16]
 80006d6:	4618      	mov	r0, r3
 80006d8:	b003      	add	sp, #12
 80006da:	bd30      	pop	{r4, r5, pc}
 80006dc:	2300      	movs	r3, #0
 80006de:	6123      	str	r3, [r4, #16]
 80006e0:	2305      	movs	r3, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	b003      	add	sp, #12
 80006e6:	bd30      	pop	{r4, r5, pc}
 80006e8:	2300      	movs	r3, #0
 80006ea:	6123      	str	r3, [r4, #16]
 80006ec:	2309      	movs	r3, #9
 80006ee:	4618      	mov	r0, r3
 80006f0:	b003      	add	sp, #12
 80006f2:	bd30      	pop	{r4, r5, pc}
 80006f4:	490a      	ldr	r1, [pc, #40]	; (8000720 <get_eit_entry+0x98>)
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <get_eit_entry+0x9c>)
 80006f8:	1a09      	subs	r1, r1, r0
 80006fa:	10c9      	asrs	r1, r1, #3
 80006fc:	9101      	str	r1, [sp, #4]
 80006fe:	e7cf      	b.n	80006a0 <get_eit_entry+0x18>
 8000700:	2301      	movs	r3, #1
 8000702:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000704:	6523      	str	r3, [r4, #80]	; 0x50
 8000706:	e7df      	b.n	80006c8 <get_eit_entry+0x40>
 8000708:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800070c:	f7ff ffa8 	bl	8000660 <__gnu_unwind_get_pr_addr>
 8000710:	2800      	cmp	r0, #0
 8000712:	6120      	str	r0, [r4, #16]
 8000714:	bf14      	ite	ne
 8000716:	2300      	movne	r3, #0
 8000718:	2309      	moveq	r3, #9
 800071a:	e7dc      	b.n	80006d6 <get_eit_entry+0x4e>
 800071c:	00000000 	.word	0x00000000
 8000720:	08008544 	.word	0x08008544
 8000724:	08008464 	.word	0x08008464

08000728 <restore_non_core_regs>:
 8000728:	6803      	ldr	r3, [r0, #0]
 800072a:	07da      	lsls	r2, r3, #31
 800072c:	b510      	push	{r4, lr}
 800072e:	4604      	mov	r4, r0
 8000730:	d406      	bmi.n	8000740 <restore_non_core_regs+0x18>
 8000732:	079b      	lsls	r3, r3, #30
 8000734:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000738:	d509      	bpl.n	800074e <restore_non_core_regs+0x26>
 800073a:	f000 fc51 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D>
 800073e:	6823      	ldr	r3, [r4, #0]
 8000740:	0759      	lsls	r1, r3, #29
 8000742:	d509      	bpl.n	8000758 <restore_non_core_regs+0x30>
 8000744:	071a      	lsls	r2, r3, #28
 8000746:	d50e      	bpl.n	8000766 <restore_non_core_regs+0x3e>
 8000748:	06db      	lsls	r3, r3, #27
 800074a:	d513      	bpl.n	8000774 <restore_non_core_regs+0x4c>
 800074c:	bd10      	pop	{r4, pc}
 800074e:	f000 fc3f 	bl	8000fd0 <__gnu_Unwind_Restore_VFP>
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	0759      	lsls	r1, r3, #29
 8000756:	d4f5      	bmi.n	8000744 <restore_non_core_regs+0x1c>
 8000758:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800075c:	f000 fc48 	bl	8000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	071a      	lsls	r2, r3, #28
 8000764:	d4f0      	bmi.n	8000748 <restore_non_core_regs+0x20>
 8000766:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800076a:	f000 fc49 	bl	8001000 <__gnu_Unwind_Restore_WMMXD>
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	06db      	lsls	r3, r3, #27
 8000772:	d4eb      	bmi.n	800074c <restore_non_core_regs+0x24>
 8000774:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800077c:	f000 bc84 	b.w	8001088 <__gnu_Unwind_Restore_WMMXC>

08000780 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000780:	6803      	ldr	r3, [r0, #0]
 8000782:	b103      	cbz	r3, 8000786 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000784:	4403      	add	r3, r0
 8000786:	4618      	mov	r0, r3
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop

0800078c <__gnu_unwind_24bit.isra.1>:
 800078c:	2009      	movs	r0, #9
 800078e:	4770      	bx	lr

08000790 <_Unwind_DebugHook>:
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <unwind_phase2>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
 8000798:	460d      	mov	r5, r1
 800079a:	e008      	b.n	80007ae <unwind_phase2+0x1a>
 800079c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800079e:	6163      	str	r3, [r4, #20]
 80007a0:	462a      	mov	r2, r5
 80007a2:	6923      	ldr	r3, [r4, #16]
 80007a4:	4621      	mov	r1, r4
 80007a6:	2001      	movs	r0, #1
 80007a8:	4798      	blx	r3
 80007aa:	2808      	cmp	r0, #8
 80007ac:	d108      	bne.n	80007c0 <unwind_phase2+0x2c>
 80007ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007b0:	4620      	mov	r0, r4
 80007b2:	f7ff ff69 	bl	8000688 <get_eit_entry>
 80007b6:	4606      	mov	r6, r0
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d0ef      	beq.n	800079c <unwind_phase2+0x8>
 80007bc:	f007 fcf3 	bl	80081a6 <abort>
 80007c0:	2807      	cmp	r0, #7
 80007c2:	d1fb      	bne.n	80007bc <unwind_phase2+0x28>
 80007c4:	4630      	mov	r0, r6
 80007c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007c8:	f7ff ffe2 	bl	8000790 <_Unwind_DebugHook>
 80007cc:	1d28      	adds	r0, r5, #4
 80007ce:	f000 fbf3 	bl	8000fb8 <__restore_core_regs>
 80007d2:	bf00      	nop

080007d4 <unwind_phase2_forced>:
 80007d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d8:	1d0c      	adds	r4, r1, #4
 80007da:	4605      	mov	r5, r0
 80007dc:	4692      	mov	sl, r2
 80007de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007e0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80007e4:	ae03      	add	r6, sp, #12
 80007e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007f4:	ac02      	add	r4, sp, #8
 80007f6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80007fa:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80007fe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000802:	2300      	movs	r3, #0
 8000804:	4628      	mov	r0, r5
 8000806:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000808:	6023      	str	r3, [r4, #0]
 800080a:	f7ff ff3d 	bl	8000688 <get_eit_entry>
 800080e:	f1ba 0f00 	cmp.w	sl, #0
 8000812:	4607      	mov	r7, r0
 8000814:	bf14      	ite	ne
 8000816:	260a      	movne	r6, #10
 8000818:	2609      	moveq	r6, #9
 800081a:	b17f      	cbz	r7, 800083c <unwind_phase2_forced+0x68>
 800081c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800081e:	f046 0110 	orr.w	r1, r6, #16
 8000822:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000826:	462a      	mov	r2, r5
 8000828:	6463      	str	r3, [r4, #68]	; 0x44
 800082a:	2001      	movs	r0, #1
 800082c:	462b      	mov	r3, r5
 800082e:	47c0      	blx	r8
 8000830:	bb78      	cbnz	r0, 8000892 <unwind_phase2_forced+0xbe>
 8000832:	4638      	mov	r0, r7
 8000834:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800083e:	616b      	str	r3, [r5, #20]
 8000840:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000844:	4621      	mov	r1, r4
 8000846:	a87a      	add	r0, sp, #488	; 0x1e8
 8000848:	f007 fca2 	bl	8008190 <memcpy>
 800084c:	692b      	ldr	r3, [r5, #16]
 800084e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000850:	4629      	mov	r1, r5
 8000852:	4630      	mov	r0, r6
 8000854:	4798      	blx	r3
 8000856:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000858:	4682      	mov	sl, r0
 800085a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800085e:	4631      	mov	r1, r6
 8000860:	6463      	str	r3, [r4, #68]	; 0x44
 8000862:	462a      	mov	r2, r5
 8000864:	462b      	mov	r3, r5
 8000866:	2001      	movs	r0, #1
 8000868:	47c0      	blx	r8
 800086a:	b990      	cbnz	r0, 8000892 <unwind_phase2_forced+0xbe>
 800086c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000870:	a97a      	add	r1, sp, #488	; 0x1e8
 8000872:	4620      	mov	r0, r4
 8000874:	f007 fc8c 	bl	8008190 <memcpy>
 8000878:	f1ba 0f08 	cmp.w	sl, #8
 800087c:	d106      	bne.n	800088c <unwind_phase2_forced+0xb8>
 800087e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000880:	4628      	mov	r0, r5
 8000882:	f7ff ff01 	bl	8000688 <get_eit_entry>
 8000886:	2609      	movs	r6, #9
 8000888:	4607      	mov	r7, r0
 800088a:	e7c6      	b.n	800081a <unwind_phase2_forced+0x46>
 800088c:	f1ba 0f07 	cmp.w	sl, #7
 8000890:	d005      	beq.n	800089e <unwind_phase2_forced+0xca>
 8000892:	2709      	movs	r7, #9
 8000894:	4638      	mov	r0, r7
 8000896:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	4638      	mov	r0, r7
 80008a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80008a2:	f7ff ff75 	bl	8000790 <_Unwind_DebugHook>
 80008a6:	a803      	add	r0, sp, #12
 80008a8:	f000 fb86 	bl	8000fb8 <__restore_core_regs>

080008ac <_Unwind_GetCFA>:
 80008ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80008ae:	4770      	bx	lr

080008b0 <__gnu_Unwind_RaiseException>:
 80008b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80008b4:	640b      	str	r3, [r1, #64]	; 0x40
 80008b6:	1d0e      	adds	r6, r1, #4
 80008b8:	460f      	mov	r7, r1
 80008ba:	4604      	mov	r4, r0
 80008bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008be:	b0f9      	sub	sp, #484	; 0x1e4
 80008c0:	ad01      	add	r5, sp, #4
 80008c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008d0:	f04f 36ff 	mov.w	r6, #4294967295
 80008d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008d8:	9600      	str	r6, [sp, #0]
 80008da:	e006      	b.n	80008ea <__gnu_Unwind_RaiseException+0x3a>
 80008dc:	6923      	ldr	r3, [r4, #16]
 80008de:	466a      	mov	r2, sp
 80008e0:	4621      	mov	r1, r4
 80008e2:	4798      	blx	r3
 80008e4:	2808      	cmp	r0, #8
 80008e6:	4605      	mov	r5, r0
 80008e8:	d108      	bne.n	80008fc <__gnu_Unwind_RaiseException+0x4c>
 80008ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80008ec:	4620      	mov	r0, r4
 80008ee:	f7ff fecb 	bl	8000688 <get_eit_entry>
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d0f2      	beq.n	80008dc <__gnu_Unwind_RaiseException+0x2c>
 80008f6:	2009      	movs	r0, #9
 80008f8:	b079      	add	sp, #484	; 0x1e4
 80008fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fc:	4668      	mov	r0, sp
 80008fe:	f7ff ff13 	bl	8000728 <restore_non_core_regs>
 8000902:	2d06      	cmp	r5, #6
 8000904:	d1f7      	bne.n	80008f6 <__gnu_Unwind_RaiseException+0x46>
 8000906:	4639      	mov	r1, r7
 8000908:	4620      	mov	r0, r4
 800090a:	f7ff ff43 	bl	8000794 <unwind_phase2>
 800090e:	bf00      	nop

08000910 <__gnu_Unwind_ForcedUnwind>:
 8000910:	b430      	push	{r4, r5}
 8000912:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000914:	60c1      	str	r1, [r0, #12]
 8000916:	6182      	str	r2, [r0, #24]
 8000918:	4619      	mov	r1, r3
 800091a:	641d      	str	r5, [r3, #64]	; 0x40
 800091c:	2200      	movs	r2, #0
 800091e:	bc30      	pop	{r4, r5}
 8000920:	e758      	b.n	80007d4 <unwind_phase2_forced>
 8000922:	bf00      	nop

08000924 <__gnu_Unwind_Resume>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	68c6      	ldr	r6, [r0, #12]
 8000928:	6943      	ldr	r3, [r0, #20]
 800092a:	640b      	str	r3, [r1, #64]	; 0x40
 800092c:	b126      	cbz	r6, 8000938 <__gnu_Unwind_Resume+0x14>
 800092e:	2201      	movs	r2, #1
 8000930:	f7ff ff50 	bl	80007d4 <unwind_phase2_forced>
 8000934:	f007 fc37 	bl	80081a6 <abort>
 8000938:	6903      	ldr	r3, [r0, #16]
 800093a:	460a      	mov	r2, r1
 800093c:	4604      	mov	r4, r0
 800093e:	460d      	mov	r5, r1
 8000940:	4601      	mov	r1, r0
 8000942:	2002      	movs	r0, #2
 8000944:	4798      	blx	r3
 8000946:	2807      	cmp	r0, #7
 8000948:	d007      	beq.n	800095a <__gnu_Unwind_Resume+0x36>
 800094a:	2808      	cmp	r0, #8
 800094c:	d103      	bne.n	8000956 <__gnu_Unwind_Resume+0x32>
 800094e:	4629      	mov	r1, r5
 8000950:	4620      	mov	r0, r4
 8000952:	f7ff ff1f 	bl	8000794 <unwind_phase2>
 8000956:	f007 fc26 	bl	80081a6 <abort>
 800095a:	4630      	mov	r0, r6
 800095c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800095e:	f7ff ff17 	bl	8000790 <_Unwind_DebugHook>
 8000962:	1d28      	adds	r0, r5, #4
 8000964:	f000 fb28 	bl	8000fb8 <__restore_core_regs>

08000968 <__gnu_Unwind_Resume_or_Rethrow>:
 8000968:	68c2      	ldr	r2, [r0, #12]
 800096a:	b11a      	cbz	r2, 8000974 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800096c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800096e:	640a      	str	r2, [r1, #64]	; 0x40
 8000970:	2200      	movs	r2, #0
 8000972:	e72f      	b.n	80007d4 <unwind_phase2_forced>
 8000974:	e79c      	b.n	80008b0 <__gnu_Unwind_RaiseException>
 8000976:	bf00      	nop

08000978 <_Unwind_Complete>:
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <_Unwind_DeleteException>:
 800097c:	6883      	ldr	r3, [r0, #8]
 800097e:	b113      	cbz	r3, 8000986 <_Unwind_DeleteException+0xa>
 8000980:	4601      	mov	r1, r0
 8000982:	2001      	movs	r0, #1
 8000984:	4718      	bx	r3
 8000986:	4770      	bx	lr

08000988 <_Unwind_VRS_Get>:
 8000988:	b500      	push	{lr}
 800098a:	2904      	cmp	r1, #4
 800098c:	d807      	bhi.n	800099e <_Unwind_VRS_Get+0x16>
 800098e:	e8df f001 	tbb	[pc, r1]
 8000992:	0903      	.short	0x0903
 8000994:	0906      	.short	0x0906
 8000996:	09          	.byte	0x09
 8000997:	00          	.byte	0x00
 8000998:	b90b      	cbnz	r3, 800099e <_Unwind_VRS_Get+0x16>
 800099a:	2a0f      	cmp	r2, #15
 800099c:	d905      	bls.n	80009aa <_Unwind_VRS_Get+0x22>
 800099e:	2002      	movs	r0, #2
 80009a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a4:	2001      	movs	r0, #1
 80009a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	6853      	ldr	r3, [r2, #4]
 80009b2:	9a01      	ldr	r2, [sp, #4]
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ba:	bf00      	nop

080009bc <_Unwind_GetGR>:
 80009bc:	b510      	push	{r4, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	2300      	movs	r3, #0
 80009c2:	ac03      	add	r4, sp, #12
 80009c4:	460a      	mov	r2, r1
 80009c6:	9400      	str	r4, [sp, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f7ff ffdd 	bl	8000988 <_Unwind_VRS_Get>
 80009ce:	9803      	ldr	r0, [sp, #12]
 80009d0:	b004      	add	sp, #16
 80009d2:	bd10      	pop	{r4, pc}

080009d4 <_Unwind_VRS_Set>:
 80009d4:	b500      	push	{lr}
 80009d6:	2904      	cmp	r1, #4
 80009d8:	d807      	bhi.n	80009ea <_Unwind_VRS_Set+0x16>
 80009da:	e8df f001 	tbb	[pc, r1]
 80009de:	0903      	.short	0x0903
 80009e0:	0906      	.short	0x0906
 80009e2:	09          	.byte	0x09
 80009e3:	00          	.byte	0x00
 80009e4:	b90b      	cbnz	r3, 80009ea <_Unwind_VRS_Set+0x16>
 80009e6:	2a0f      	cmp	r2, #15
 80009e8:	d905      	bls.n	80009f6 <_Unwind_VRS_Set+0x22>
 80009ea:	2002      	movs	r0, #2
 80009ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f0:	2001      	movs	r0, #1
 80009f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f6:	9901      	ldr	r1, [sp, #4]
 80009f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	6051      	str	r1, [r2, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a06:	bf00      	nop

08000a08 <_Unwind_SetGR>:
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	ac04      	add	r4, sp, #16
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000a14:	460a      	mov	r2, r1
 8000a16:	9400      	str	r4, [sp, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f7ff ffdb 	bl	80009d4 <_Unwind_VRS_Set>
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	bf00      	nop

08000a24 <__gnu_Unwind_Backtrace>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	1d15      	adds	r5, r2, #4
 8000a2c:	4607      	mov	r7, r0
 8000a2e:	460e      	mov	r6, r1
 8000a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a32:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000a36:	ac17      	add	r4, sp, #92	; 0x5c
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a46:	f04f 35ff 	mov.w	r5, #4294967295
 8000a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a4e:	9516      	str	r5, [sp, #88]	; 0x58
 8000a50:	e010      	b.n	8000a74 <__gnu_Unwind_Backtrace+0x50>
 8000a52:	a816      	add	r0, sp, #88	; 0x58
 8000a54:	f7ff ffd8 	bl	8000a08 <_Unwind_SetGR>
 8000a58:	4631      	mov	r1, r6
 8000a5a:	a816      	add	r0, sp, #88	; 0x58
 8000a5c:	47b8      	blx	r7
 8000a5e:	aa16      	add	r2, sp, #88	; 0x58
 8000a60:	4669      	mov	r1, sp
 8000a62:	b978      	cbnz	r0, 8000a84 <__gnu_Unwind_Backtrace+0x60>
 8000a64:	9b04      	ldr	r3, [sp, #16]
 8000a66:	2008      	movs	r0, #8
 8000a68:	4798      	blx	r3
 8000a6a:	2805      	cmp	r0, #5
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	d00a      	beq.n	8000a86 <__gnu_Unwind_Backtrace+0x62>
 8000a70:	2809      	cmp	r0, #9
 8000a72:	d007      	beq.n	8000a84 <__gnu_Unwind_Backtrace+0x60>
 8000a74:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a76:	4668      	mov	r0, sp
 8000a78:	f7ff fe06 	bl	8000688 <get_eit_entry>
 8000a7c:	466a      	mov	r2, sp
 8000a7e:	210c      	movs	r1, #12
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d0e6      	beq.n	8000a52 <__gnu_Unwind_Backtrace+0x2e>
 8000a84:	2409      	movs	r4, #9
 8000a86:	a816      	add	r0, sp, #88	; 0x58
 8000a88:	f7ff fe4e 	bl	8000728 <restore_non_core_regs>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a94 <__gnu_unwind_pr_common>:
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	460d      	mov	r5, r1
 8000a9a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a9c:	b08b      	sub	sp, #44	; 0x2c
 8000a9e:	1d0c      	adds	r4, r1, #4
 8000aa0:	6809      	ldr	r1, [r1, #0]
 8000aa2:	9107      	str	r1, [sp, #28]
 8000aa4:	4691      	mov	r9, r2
 8000aa6:	9408      	str	r4, [sp, #32]
 8000aa8:	f000 0b03 	and.w	fp, r0, #3
 8000aac:	461e      	mov	r6, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d160      	bne.n	8000b74 <__gnu_unwind_pr_common+0xe0>
 8000ab2:	0209      	lsls	r1, r1, #8
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	9107      	str	r1, [sp, #28]
 8000ab8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000abc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ac0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ac2:	f1bb 0f02 	cmp.w	fp, #2
 8000ac6:	bf08      	it	eq
 8000ac8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000aca:	f013 0301 	ands.w	r3, r3, #1
 8000ace:	d140      	bne.n	8000b52 <__gnu_unwind_pr_common+0xbe>
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	f000 0308 	and.w	r3, r0, #8
 8000ad6:	9303      	str	r3, [sp, #12]
 8000ad8:	f8d4 8000 	ldr.w	r8, [r4]
 8000adc:	f1b8 0f00 	cmp.w	r8, #0
 8000ae0:	d039      	beq.n	8000b56 <__gnu_unwind_pr_common+0xc2>
 8000ae2:	2e02      	cmp	r6, #2
 8000ae4:	d043      	beq.n	8000b6e <__gnu_unwind_pr_common+0xda>
 8000ae6:	f8b4 8000 	ldrh.w	r8, [r4]
 8000aea:	8867      	ldrh	r7, [r4, #2]
 8000aec:	3404      	adds	r4, #4
 8000aee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000af0:	f027 0a01 	bic.w	sl, r7, #1
 8000af4:	210f      	movs	r1, #15
 8000af6:	4648      	mov	r0, r9
 8000af8:	449a      	add	sl, r3
 8000afa:	f7ff ff5f 	bl	80009bc <_Unwind_GetGR>
 8000afe:	4582      	cmp	sl, r0
 8000b00:	d833      	bhi.n	8000b6a <__gnu_unwind_pr_common+0xd6>
 8000b02:	f028 0301 	bic.w	r3, r8, #1
 8000b06:	449a      	add	sl, r3
 8000b08:	4550      	cmp	r0, sl
 8000b0a:	bf2c      	ite	cs
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	007f      	lsls	r7, r7, #1
 8000b12:	f007 0702 	and.w	r7, r7, #2
 8000b16:	f008 0801 	and.w	r8, r8, #1
 8000b1a:	ea47 0708 	orr.w	r7, r7, r8
 8000b1e:	2f01      	cmp	r7, #1
 8000b20:	d03e      	beq.n	8000ba0 <__gnu_unwind_pr_common+0x10c>
 8000b22:	d335      	bcc.n	8000b90 <__gnu_unwind_pr_common+0xfc>
 8000b24:	2f02      	cmp	r7, #2
 8000b26:	d11c      	bne.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b2e:	9202      	str	r2, [sp, #8]
 8000b30:	f1bb 0f00 	cmp.w	fp, #0
 8000b34:	d176      	bne.n	8000c24 <__gnu_unwind_pr_common+0x190>
 8000b36:	b128      	cbz	r0, 8000b44 <__gnu_unwind_pr_common+0xb0>
 8000b38:	9903      	ldr	r1, [sp, #12]
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d07e      	beq.n	8000c3c <__gnu_unwind_pr_common+0x1a8>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	f000 80a6 	beq.w	8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db77      	blt.n	8000c38 <__gnu_unwind_pr_common+0x1a4>
 8000b48:	9b02      	ldr	r3, [sp, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000b50:	e7c2      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	2e02      	cmp	r6, #2
 8000b58:	dd3e      	ble.n	8000bd8 <__gnu_unwind_pr_common+0x144>
 8000b5a:	f7ff fe17 	bl	800078c <__gnu_unwind_24bit.isra.1>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d040      	beq.n	8000be4 <__gnu_unwind_pr_common+0x150>
 8000b62:	2009      	movs	r0, #9
 8000b64:	b00b      	add	sp, #44	; 0x2c
 8000b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e7d0      	b.n	8000b10 <__gnu_unwind_pr_common+0x7c>
 8000b6e:	6867      	ldr	r7, [r4, #4]
 8000b70:	3408      	adds	r4, #8
 8000b72:	e7bc      	b.n	8000aee <__gnu_unwind_pr_common+0x5a>
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	dca3      	bgt.n	8000ac0 <__gnu_unwind_pr_common+0x2c>
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	0409      	lsls	r1, r1, #16
 8000b7e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b82:	2302      	movs	r3, #2
 8000b84:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b88:	9107      	str	r1, [sp, #28]
 8000b8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b8e:	e797      	b.n	8000ac0 <__gnu_unwind_pr_common+0x2c>
 8000b90:	f1bb 0f00 	cmp.w	fp, #0
 8000b94:	d002      	beq.n	8000b9c <__gnu_unwind_pr_common+0x108>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	f040 80bd 	bne.w	8000d16 <__gnu_unwind_pr_common+0x282>
 8000b9c:	3404      	adds	r4, #4
 8000b9e:	e79b      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000ba0:	f1bb 0f00 	cmp.w	fp, #0
 8000ba4:	d125      	bne.n	8000bf2 <__gnu_unwind_pr_common+0x15e>
 8000ba6:	b1a8      	cbz	r0, 8000bd4 <__gnu_unwind_pr_common+0x140>
 8000ba8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000bac:	1c99      	adds	r1, r3, #2
 8000bae:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000bb2:	d0d6      	beq.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000bb4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000bb8:	3301      	adds	r3, #1
 8000bba:	9106      	str	r1, [sp, #24]
 8000bbc:	f000 80a3 	beq.w	8000d06 <__gnu_unwind_pr_common+0x272>
 8000bc0:	1d20      	adds	r0, r4, #4
 8000bc2:	f7ff fddd 	bl	8000780 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bc6:	ab06      	add	r3, sp, #24
 8000bc8:	4601      	mov	r1, r0
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d177      	bne.n	8000cc4 <__gnu_unwind_pr_common+0x230>
 8000bd4:	3408      	adds	r4, #8
 8000bd6:	e77f      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000bd8:	a907      	add	r1, sp, #28
 8000bda:	4648      	mov	r0, r9
 8000bdc:	f000 faee 	bl	80011bc <__gnu_unwind_execute>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d1be      	bne.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000be4:	9b01      	ldr	r3, [sp, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d15c      	bne.n	8000ca4 <__gnu_unwind_pr_common+0x210>
 8000bea:	2008      	movs	r0, #8
 8000bec:	b00b      	add	sp, #44	; 0x2c
 8000bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bf2:	210d      	movs	r1, #13
 8000bf4:	4648      	mov	r0, r9
 8000bf6:	6a2f      	ldr	r7, [r5, #32]
 8000bf8:	f7ff fee0 	bl	80009bc <_Unwind_GetGR>
 8000bfc:	4287      	cmp	r7, r0
 8000bfe:	d1e9      	bne.n	8000bd4 <__gnu_unwind_pr_common+0x140>
 8000c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c02:	429c      	cmp	r4, r3
 8000c04:	d1e6      	bne.n	8000bd4 <__gnu_unwind_pr_common+0x140>
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fcf0 	bl	80005ec <selfrel_offset31>
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4648      	mov	r0, r9
 8000c12:	f7ff fef9 	bl	8000a08 <_Unwind_SetGR>
 8000c16:	4648      	mov	r0, r9
 8000c18:	462a      	mov	r2, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f7ff fef4 	bl	8000a08 <_Unwind_SetGR>
 8000c20:	2007      	movs	r0, #7
 8000c22:	e79f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000c24:	210d      	movs	r1, #13
 8000c26:	4648      	mov	r0, r9
 8000c28:	6a2f      	ldr	r7, [r5, #32]
 8000c2a:	f7ff fec7 	bl	80009bc <_Unwind_GetGR>
 8000c2e:	4287      	cmp	r7, r0
 8000c30:	d058      	beq.n	8000ce4 <__gnu_unwind_pr_common+0x250>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da87      	bge.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000c38:	3404      	adds	r4, #4
 8000c3a:	e785      	b.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000c3c:	9b02      	ldr	r3, [sp, #8]
 8000c3e:	b33b      	cbz	r3, 8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000c40:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000c44:	1d27      	adds	r7, r4, #4
 8000c46:	f8cd b010 	str.w	fp, [sp, #16]
 8000c4a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000c4e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000c52:	9605      	str	r6, [sp, #20]
 8000c54:	46a3      	mov	fp, r4
 8000c56:	461c      	mov	r4, r3
 8000c58:	e002      	b.n	8000c60 <__gnu_unwind_pr_common+0x1cc>
 8000c5a:	45b2      	cmp	sl, r6
 8000c5c:	46b0      	mov	r8, r6
 8000c5e:	d016      	beq.n	8000c8e <__gnu_unwind_pr_common+0x1fa>
 8000c60:	4638      	mov	r0, r7
 8000c62:	9406      	str	r4, [sp, #24]
 8000c64:	f7ff fd8c 	bl	8000780 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000c68:	ab06      	add	r3, sp, #24
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f3af 8000 	nop.w
 8000c74:	f108 0601 	add.w	r6, r8, #1
 8000c78:	3704      	adds	r7, #4
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d0ed      	beq.n	8000c5a <__gnu_unwind_pr_common+0x1c6>
 8000c7e:	9b02      	ldr	r3, [sp, #8]
 8000c80:	9e05      	ldr	r6, [sp, #20]
 8000c82:	4543      	cmp	r3, r8
 8000c84:	465c      	mov	r4, fp
 8000c86:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c8a:	d1d2      	bne.n	8000c32 <__gnu_unwind_pr_common+0x19e>
 8000c8c:	e000      	b.n	8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000c8e:	465c      	mov	r4, fp
 8000c90:	4648      	mov	r0, r9
 8000c92:	210d      	movs	r1, #13
 8000c94:	f7ff fe92 	bl	80009bc <_Unwind_GetGR>
 8000c98:	9b06      	ldr	r3, [sp, #24]
 8000c9a:	6228      	str	r0, [r5, #32]
 8000c9c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c9e:	626b      	str	r3, [r5, #36]	; 0x24
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	e75f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	4648      	mov	r0, r9
 8000ca8:	f7ff fe88 	bl	80009bc <_Unwind_GetGR>
 8000cac:	210e      	movs	r1, #14
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4648      	mov	r0, r9
 8000cb2:	f7ff fea9 	bl	8000a08 <_Unwind_SetGR>
 8000cb6:	4648      	mov	r0, r9
 8000cb8:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <__gnu_unwind_pr_common+0x2cc>)
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f7ff fea4 	bl	8000a08 <_Unwind_SetGR>
 8000cc0:	2007      	movs	r0, #7
 8000cc2:	e74f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000cc4:	4607      	mov	r7, r0
 8000cc6:	210d      	movs	r1, #13
 8000cc8:	4648      	mov	r0, r9
 8000cca:	f7ff fe77 	bl	80009bc <_Unwind_GetGR>
 8000cce:	2f02      	cmp	r7, #2
 8000cd0:	6228      	str	r0, [r5, #32]
 8000cd2:	d11d      	bne.n	8000d10 <__gnu_unwind_pr_common+0x27c>
 8000cd4:	462b      	mov	r3, r5
 8000cd6:	9a06      	ldr	r2, [sp, #24]
 8000cd8:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000cdc:	626b      	str	r3, [r5, #36]	; 0x24
 8000cde:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ce0:	2006      	movs	r0, #6
 8000ce2:	e73f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000ce4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ce6:	429c      	cmp	r4, r3
 8000ce8:	d1a3      	bne.n	8000c32 <__gnu_unwind_pr_common+0x19e>
 8000cea:	2204      	movs	r2, #4
 8000cec:	2700      	movs	r7, #0
 8000cee:	18a3      	adds	r3, r4, r2
 8000cf0:	9902      	ldr	r1, [sp, #8]
 8000cf2:	62a9      	str	r1, [r5, #40]	; 0x28
 8000cf4:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000cf6:	632a      	str	r2, [r5, #48]	; 0x30
 8000cf8:	636b      	str	r3, [r5, #52]	; 0x34
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	42bb      	cmp	r3, r7
 8000cfe:	db1d      	blt.n	8000d3c <__gnu_unwind_pr_common+0x2a8>
 8000d00:	2301      	movs	r3, #1
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	e720      	b.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000d06:	4648      	mov	r0, r9
 8000d08:	210d      	movs	r1, #13
 8000d0a:	f7ff fe57 	bl	80009bc <_Unwind_GetGR>
 8000d0e:	6228      	str	r0, [r5, #32]
 8000d10:	9b06      	ldr	r3, [sp, #24]
 8000d12:	626b      	str	r3, [r5, #36]	; 0x24
 8000d14:	e7e3      	b.n	8000cde <__gnu_unwind_pr_common+0x24a>
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff fc68 	bl	80005ec <selfrel_offset31>
 8000d1c:	3404      	adds	r4, #4
 8000d1e:	4606      	mov	r6, r0
 8000d20:	63ac      	str	r4, [r5, #56]	; 0x38
 8000d22:	4628      	mov	r0, r5
 8000d24:	f3af 8000 	nop.w
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	f43f af1a 	beq.w	8000b62 <__gnu_unwind_pr_common+0xce>
 8000d2e:	4648      	mov	r0, r9
 8000d30:	4632      	mov	r2, r6
 8000d32:	210f      	movs	r1, #15
 8000d34:	f7ff fe68 	bl	8000a08 <_Unwind_SetGR>
 8000d38:	2007      	movs	r0, #7
 8000d3a:	e713      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	3001      	adds	r0, #1
 8000d40:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000d44:	f7ff fc52 	bl	80005ec <selfrel_offset31>
 8000d48:	210f      	movs	r1, #15
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	4648      	mov	r0, r9
 8000d4e:	f7ff fe5b 	bl	8000a08 <_Unwind_SetGR>
 8000d52:	4648      	mov	r0, r9
 8000d54:	462a      	mov	r2, r5
 8000d56:	4639      	mov	r1, r7
 8000d58:	f7ff fe56 	bl	8000a08 <_Unwind_SetGR>
 8000d5c:	2007      	movs	r0, #7
 8000d5e:	e701      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000d60:	00000000 	.word	0x00000000

08000d64 <__aeabi_unwind_cpp_pr0>:
 8000d64:	2300      	movs	r3, #0
 8000d66:	e695      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d68 <__aeabi_unwind_cpp_pr1>:
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e693      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d6c <__aeabi_unwind_cpp_pr2>:
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e691      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d70 <_Unwind_VRS_Pop>:
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	4604      	mov	r4, r0
 8000d74:	b0c5      	sub	sp, #276	; 0x114
 8000d76:	2904      	cmp	r1, #4
 8000d78:	d80d      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000d7a:	e8df f001 	tbb	[pc, r1]
 8000d7e:	0353      	.short	0x0353
 8000d80:	310c      	.short	0x310c
 8000d82:	0f          	.byte	0x0f
 8000d83:	00          	.byte	0x00
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d8a:	b295      	uxth	r5, r2
 8000d8c:	d162      	bne.n	8000e54 <_Unwind_VRS_Pop+0xe4>
 8000d8e:	1972      	adds	r2, r6, r5
 8000d90:	2a10      	cmp	r2, #16
 8000d92:	f240 809b 	bls.w	8000ecc <_Unwind_VRS_Pop+0x15c>
 8000d96:	2002      	movs	r0, #2
 8000d98:	b045      	add	sp, #276	; 0x114
 8000d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1fa      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000da0:	2a10      	cmp	r2, #16
 8000da2:	d8f8      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	06d8      	lsls	r0, r3, #27
 8000da8:	f100 80c6 	bmi.w	8000f38 <_Unwind_VRS_Pop+0x1c8>
 8000dac:	ae22      	add	r6, sp, #136	; 0x88
 8000dae:	4630      	mov	r0, r6
 8000db0:	9201      	str	r2, [sp, #4]
 8000db2:	f000 f973 	bl	800109c <__gnu_Unwind_Save_WMMXC>
 8000db6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000db8:	9a01      	ldr	r2, [sp, #4]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2501      	movs	r5, #1
 8000dbe:	fa05 f103 	lsl.w	r1, r5, r3
 8000dc2:	4211      	tst	r1, r2
 8000dc4:	d003      	beq.n	8000dce <_Unwind_VRS_Pop+0x5e>
 8000dc6:	6801      	ldr	r1, [r0, #0]
 8000dc8:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000dcc:	3004      	adds	r0, #4
 8000dce:	3301      	adds	r3, #1
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d1f4      	bne.n	8000dbe <_Unwind_VRS_Pop+0x4e>
 8000dd4:	63a0      	str	r0, [r4, #56]	; 0x38
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f000 f956 	bl	8001088 <__gnu_Unwind_Restore_WMMXC>
 8000ddc:	2000      	movs	r0, #0
 8000dde:	e7db      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d1d8      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000de4:	0c15      	lsrs	r5, r2, #16
 8000de6:	b297      	uxth	r7, r2
 8000de8:	19eb      	adds	r3, r5, r7
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d8d3      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	071e      	lsls	r6, r3, #28
 8000df2:	f100 80b5 	bmi.w	8000f60 <_Unwind_VRS_Pop+0x1f0>
 8000df6:	ae22      	add	r6, sp, #136	; 0x88
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 f923 	bl	8001044 <__gnu_Unwind_Save_WMMXD>
 8000dfe:	00ed      	lsls	r5, r5, #3
 8000e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e02:	b14f      	cbz	r7, 8000e18 <_Unwind_VRS_Pop+0xa8>
 8000e04:	3d04      	subs	r5, #4
 8000e06:	1971      	adds	r1, r6, r5
 8000e08:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8000e14:	4283      	cmp	r3, r0
 8000e16:	d1f9      	bne.n	8000e0c <_Unwind_VRS_Pop+0x9c>
 8000e18:	4630      	mov	r0, r6
 8000e1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8000e1c:	f000 f8f0 	bl	8001000 <__gnu_Unwind_Restore_WMMXD>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e7b9      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1b6      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e28:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000e2a:	b297      	uxth	r7, r2
 8000e2c:	1d20      	adds	r0, r4, #4
 8000e2e:	2601      	movs	r6, #1
 8000e30:	fa06 f103 	lsl.w	r1, r6, r3
 8000e34:	4239      	tst	r1, r7
 8000e36:	f103 0301 	add.w	r3, r3, #1
 8000e3a:	d002      	beq.n	8000e42 <_Unwind_VRS_Pop+0xd2>
 8000e3c:	6829      	ldr	r1, [r5, #0]
 8000e3e:	6001      	str	r1, [r0, #0]
 8000e40:	3504      	adds	r5, #4
 8000e42:	2b10      	cmp	r3, #16
 8000e44:	f100 0004 	add.w	r0, r0, #4
 8000e48:	d1f2      	bne.n	8000e30 <_Unwind_VRS_Pop+0xc0>
 8000e4a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000e4e:	d13b      	bne.n	8000ec8 <_Unwind_VRS_Pop+0x158>
 8000e50:	63a5      	str	r5, [r4, #56]	; 0x38
 8000e52:	e7a1      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d19e      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e58:	1977      	adds	r7, r6, r5
 8000e5a:	2f20      	cmp	r7, #32
 8000e5c:	d89b      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e5e:	2e0f      	cmp	r6, #15
 8000e60:	d966      	bls.n	8000f30 <_Unwind_VRS_Pop+0x1c0>
 8000e62:	462f      	mov	r7, r5
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d13a      	bne.n	8000ede <_Unwind_VRS_Pop+0x16e>
 8000e68:	462a      	mov	r2, r5
 8000e6a:	2700      	movs	r7, #0
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e70:	dd72      	ble.n	8000f58 <_Unwind_VRS_Pop+0x1e8>
 8000e72:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e76:	4601      	mov	r1, r0
 8000e78:	a844      	add	r0, sp, #272	; 0x110
 8000e7a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e7e:	388c      	subs	r0, #140	; 0x8c
 8000e80:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e84:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e88:	4291      	cmp	r1, r2
 8000e8a:	d1f9      	bne.n	8000e80 <_Unwind_VRS_Pop+0x110>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	b197      	cbz	r7, 8000eb6 <_Unwind_VRS_Pop+0x146>
 8000e90:	2e10      	cmp	r6, #16
 8000e92:	4632      	mov	r2, r6
 8000e94:	a944      	add	r1, sp, #272	; 0x110
 8000e96:	bf38      	it	cc
 8000e98:	2210      	movcc	r2, #16
 8000e9a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e9e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000ea2:	0079      	lsls	r1, r7, #1
 8000ea4:	3a04      	subs	r2, #4
 8000ea6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000eaa:	f850 5b04 	ldr.w	r5, [r0], #4
 8000eae:	f842 5f04 	str.w	r5, [r2, #4]!
 8000eb2:	4288      	cmp	r0, r1
 8000eb4:	d1f9      	bne.n	8000eaa <_Unwind_VRS_Pop+0x13a>
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d048      	beq.n	8000f4c <_Unwind_VRS_Pop+0x1dc>
 8000eba:	2e0f      	cmp	r6, #15
 8000ebc:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ebe:	d933      	bls.n	8000f28 <_Unwind_VRS_Pop+0x1b8>
 8000ec0:	b117      	cbz	r7, 8000ec8 <_Unwind_VRS_Pop+0x158>
 8000ec2:	a802      	add	r0, sp, #8
 8000ec4:	f000 f894 	bl	8000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	e765      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000ecc:	2e0f      	cmp	r6, #15
 8000ece:	f63f af62 	bhi.w	8000d96 <_Unwind_VRS_Pop+0x26>
 8000ed2:	2700      	movs	r7, #0
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	07d1      	lsls	r1, r2, #31
 8000ed8:	d417      	bmi.n	8000f0a <_Unwind_VRS_Pop+0x19a>
 8000eda:	2f00      	cmp	r7, #0
 8000edc:	d060      	beq.n	8000fa0 <_Unwind_VRS_Pop+0x230>
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	0751      	lsls	r1, r2, #29
 8000ee2:	d445      	bmi.n	8000f70 <_Unwind_VRS_Pop+0x200>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d04d      	beq.n	8000f84 <_Unwind_VRS_Pop+0x214>
 8000ee8:	2e0f      	cmp	r6, #15
 8000eea:	d806      	bhi.n	8000efa <_Unwind_VRS_Pop+0x18a>
 8000eec:	a822      	add	r0, sp, #136	; 0x88
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	f000 f87a 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D>
 8000ef4:	9b01      	ldr	r3, [sp, #4]
 8000ef6:	2f00      	cmp	r7, #0
 8000ef8:	d0b6      	beq.n	8000e68 <_Unwind_VRS_Pop+0xf8>
 8000efa:	a802      	add	r0, sp, #8
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	f000 f87b 	bl	8000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f02:	9b01      	ldr	r3, [sp, #4]
 8000f04:	f1c6 0210 	rsb	r2, r6, #16
 8000f08:	e7b0      	b.n	8000e6c <_Unwind_VRS_Pop+0xfc>
 8000f0a:	f022 0101 	bic.w	r1, r2, #1
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	6021      	str	r1, [r4, #0]
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	4620      	mov	r0, r4
 8000f16:	d03b      	beq.n	8000f90 <_Unwind_VRS_Pop+0x220>
 8000f18:	f022 0203 	bic.w	r2, r2, #3
 8000f1c:	f840 2b48 	str.w	r2, [r0], #72
 8000f20:	f000 f85a 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000f24:	9b01      	ldr	r3, [sp, #4]
 8000f26:	e7d8      	b.n	8000eda <_Unwind_VRS_Pop+0x16a>
 8000f28:	a822      	add	r0, sp, #136	; 0x88
 8000f2a:	f000 f859 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D>
 8000f2e:	e7c7      	b.n	8000ec0 <_Unwind_VRS_Pop+0x150>
 8000f30:	2f10      	cmp	r7, #16
 8000f32:	d9ce      	bls.n	8000ed2 <_Unwind_VRS_Pop+0x162>
 8000f34:	3f10      	subs	r7, #16
 8000f36:	e7cd      	b.n	8000ed4 <_Unwind_VRS_Pop+0x164>
 8000f38:	f023 0310 	bic.w	r3, r3, #16
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000f42:	9201      	str	r2, [sp, #4]
 8000f44:	f000 f8aa 	bl	800109c <__gnu_Unwind_Save_WMMXC>
 8000f48:	9a01      	ldr	r2, [sp, #4]
 8000f4a:	e72f      	b.n	8000dac <_Unwind_VRS_Pop+0x3c>
 8000f4c:	3104      	adds	r1, #4
 8000f4e:	63a1      	str	r1, [r4, #56]	; 0x38
 8000f50:	a822      	add	r0, sp, #136	; 0x88
 8000f52:	f000 f83d 	bl	8000fd0 <__gnu_Unwind_Restore_VFP>
 8000f56:	e7b7      	b.n	8000ec8 <_Unwind_VRS_Pop+0x158>
 8000f58:	2f00      	cmp	r7, #0
 8000f5a:	d199      	bne.n	8000e90 <_Unwind_VRS_Pop+0x120>
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	e7aa      	b.n	8000eb6 <_Unwind_VRS_Pop+0x146>
 8000f60:	f023 0308 	bic.w	r3, r3, #8
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000f6a:	f000 f86b 	bl	8001044 <__gnu_Unwind_Save_WMMXD>
 8000f6e:	e742      	b.n	8000df6 <_Unwind_VRS_Pop+0x86>
 8000f70:	4620      	mov	r0, r4
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	f840 2bd0 	str.w	r2, [r0], #208
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f000 f83c 	bl	8000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	e7af      	b.n	8000ee4 <_Unwind_VRS_Pop+0x174>
 8000f84:	a822      	add	r0, sp, #136	; 0x88
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	f000 f826 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000f8c:	9b01      	ldr	r3, [sp, #4]
 8000f8e:	e7b9      	b.n	8000f04 <_Unwind_VRS_Pop+0x194>
 8000f90:	f041 0102 	orr.w	r1, r1, #2
 8000f94:	f840 1b48 	str.w	r1, [r0], #72
 8000f98:	f000 f826 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D>
 8000f9c:	9b01      	ldr	r3, [sp, #4]
 8000f9e:	e79c      	b.n	8000eda <_Unwind_VRS_Pop+0x16a>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d003      	beq.n	8000fac <_Unwind_VRS_Pop+0x23c>
 8000fa4:	2e0f      	cmp	r6, #15
 8000fa6:	f63f af5f 	bhi.w	8000e68 <_Unwind_VRS_Pop+0xf8>
 8000faa:	e79f      	b.n	8000eec <_Unwind_VRS_Pop+0x17c>
 8000fac:	a822      	add	r0, sp, #136	; 0x88
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f000 f812 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000fb4:	9b01      	ldr	r3, [sp, #4]
 8000fb6:	e757      	b.n	8000e68 <_Unwind_VRS_Pop+0xf8>

08000fb8 <__restore_core_regs>:
 8000fb8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000fbc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	46a6      	mov	lr, r4
 8000fc4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fc8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fcc:	46e5      	mov	sp, ip
 8000fce:	bd00      	pop	{pc}

08000fd0 <__gnu_Unwind_Restore_VFP>:
 8000fd0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Save_VFP>:
 8000fd8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__gnu_Unwind_Restore_VFP_D>:
 8000fe0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_VFP_D>:
 8000fe8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ff0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000ff8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <__gnu_Unwind_Restore_WMMXD>:
 8001000:	ecf0 0102 	ldfe	f0, [r0], #8
 8001004:	ecf0 1102 	ldfe	f1, [r0], #8
 8001008:	ecf0 2102 	ldfe	f2, [r0], #8
 800100c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001010:	ecf0 4102 	ldfe	f4, [r0], #8
 8001014:	ecf0 5102 	ldfe	f5, [r0], #8
 8001018:	ecf0 6102 	ldfe	f6, [r0], #8
 800101c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001020:	ecf0 8102 	ldfp	f0, [r0], #8
 8001024:	ecf0 9102 	ldfp	f1, [r0], #8
 8001028:	ecf0 a102 	ldfp	f2, [r0], #8
 800102c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001030:	ecf0 c102 	ldfp	f4, [r0], #8
 8001034:	ecf0 d102 	ldfp	f5, [r0], #8
 8001038:	ecf0 e102 	ldfp	f6, [r0], #8
 800103c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__gnu_Unwind_Save_WMMXD>:
 8001044:	ece0 0102 	stfe	f0, [r0], #8
 8001048:	ece0 1102 	stfe	f1, [r0], #8
 800104c:	ece0 2102 	stfe	f2, [r0], #8
 8001050:	ece0 3102 	stfe	f3, [r0], #8
 8001054:	ece0 4102 	stfe	f4, [r0], #8
 8001058:	ece0 5102 	stfe	f5, [r0], #8
 800105c:	ece0 6102 	stfe	f6, [r0], #8
 8001060:	ece0 7102 	stfe	f7, [r0], #8
 8001064:	ece0 8102 	stfp	f0, [r0], #8
 8001068:	ece0 9102 	stfp	f1, [r0], #8
 800106c:	ece0 a102 	stfp	f2, [r0], #8
 8001070:	ece0 b102 	stfp	f3, [r0], #8
 8001074:	ece0 c102 	stfp	f4, [r0], #8
 8001078:	ece0 d102 	stfp	f5, [r0], #8
 800107c:	ece0 e102 	stfp	f6, [r0], #8
 8001080:	ece0 f102 	stfp	f7, [r0], #8
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <__gnu_Unwind_Restore_WMMXC>:
 8001088:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800108c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001090:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001094:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__gnu_Unwind_Save_WMMXC>:
 800109c:	fca0 8101 	stc2	1, cr8, [r0], #4
 80010a0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80010a4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80010a8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <_Unwind_RaiseException>:
 80010b0:	46ec      	mov	ip, sp
 80010b2:	b500      	push	{lr}
 80010b4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010c4:	a901      	add	r1, sp, #4
 80010c6:	f7ff fbf3 	bl	80008b0 <__gnu_Unwind_RaiseException>
 80010ca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ce:	b012      	add	sp, #72	; 0x48
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <_Unwind_Resume>:
 80010d4:	46ec      	mov	ip, sp
 80010d6:	b500      	push	{lr}
 80010d8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e8:	a901      	add	r1, sp, #4
 80010ea:	f7ff fc1b 	bl	8000924 <__gnu_Unwind_Resume>
 80010ee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010f2:	b012      	add	sp, #72	; 0x48
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <_Unwind_Resume_or_Rethrow>:
 80010f8:	46ec      	mov	ip, sp
 80010fa:	b500      	push	{lr}
 80010fc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001100:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e92d 000c 	stmdb	sp!, {r2, r3}
 800110c:	a901      	add	r1, sp, #4
 800110e:	f7ff fc2b 	bl	8000968 <__gnu_Unwind_Resume_or_Rethrow>
 8001112:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001116:	b012      	add	sp, #72	; 0x48
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <_Unwind_ForcedUnwind>:
 800111c:	46ec      	mov	ip, sp
 800111e:	b500      	push	{lr}
 8001120:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001124:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001130:	ab01      	add	r3, sp, #4
 8001132:	f7ff fbed 	bl	8000910 <__gnu_Unwind_ForcedUnwind>
 8001136:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800113a:	b012      	add	sp, #72	; 0x48
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <_Unwind_Backtrace>:
 8001140:	46ec      	mov	ip, sp
 8001142:	b500      	push	{lr}
 8001144:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001148:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001154:	aa01      	add	r2, sp, #4
 8001156:	f7ff fc65 	bl	8000a24 <__gnu_Unwind_Backtrace>
 800115a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800115e:	b012      	add	sp, #72	; 0x48
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <next_unwind_byte>:
 8001164:	7a02      	ldrb	r2, [r0, #8]
 8001166:	b91a      	cbnz	r2, 8001170 <next_unwind_byte+0xc>
 8001168:	7a43      	ldrb	r3, [r0, #9]
 800116a:	b943      	cbnz	r3, 800117e <next_unwind_byte+0x1a>
 800116c:	20b0      	movs	r0, #176	; 0xb0
 800116e:	4770      	bx	lr
 8001170:	6803      	ldr	r3, [r0, #0]
 8001172:	3a01      	subs	r2, #1
 8001174:	7202      	strb	r2, [r0, #8]
 8001176:	021a      	lsls	r2, r3, #8
 8001178:	6002      	str	r2, [r0, #0]
 800117a:	0e18      	lsrs	r0, r3, #24
 800117c:	4770      	bx	lr
 800117e:	6842      	ldr	r2, [r0, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	b410      	push	{r4}
 8001184:	7243      	strb	r3, [r0, #9]
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	2103      	movs	r1, #3
 800118a:	1d14      	adds	r4, r2, #4
 800118c:	7201      	strb	r1, [r0, #8]
 800118e:	021a      	lsls	r2, r3, #8
 8001190:	6044      	str	r4, [r0, #4]
 8001192:	6002      	str	r2, [r0, #0]
 8001194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001198:	0e18      	lsrs	r0, r3, #24
 800119a:	4770      	bx	lr

0800119c <_Unwind_GetGR.constprop.0>:
 800119c:	b500      	push	{lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	aa03      	add	r2, sp, #12
 80011a2:	2300      	movs	r3, #0
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	220c      	movs	r2, #12
 80011aa:	f7ff fbed 	bl	8000988 <_Unwind_VRS_Get>
 80011ae:	9803      	ldr	r0, [sp, #12]
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop

080011b8 <unwind_UCB_from_context>:
 80011b8:	e7f0      	b.n	800119c <_Unwind_GetGR.constprop.0>
 80011ba:	bf00      	nop

080011bc <__gnu_unwind_execute>:
 80011bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c0:	4606      	mov	r6, r0
 80011c2:	b085      	sub	sp, #20
 80011c4:	460f      	mov	r7, r1
 80011c6:	f04f 0800 	mov.w	r8, #0
 80011ca:	4638      	mov	r0, r7
 80011cc:	f7ff ffca 	bl	8001164 <next_unwind_byte>
 80011d0:	28b0      	cmp	r0, #176	; 0xb0
 80011d2:	4604      	mov	r4, r0
 80011d4:	d023      	beq.n	800121e <__gnu_unwind_execute+0x62>
 80011d6:	0605      	lsls	r5, r0, #24
 80011d8:	d427      	bmi.n	800122a <__gnu_unwind_execute+0x6e>
 80011da:	2300      	movs	r3, #0
 80011dc:	f10d 090c 	add.w	r9, sp, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	0085      	lsls	r5, r0, #2
 80011e4:	220d      	movs	r2, #13
 80011e6:	f8cd 9000 	str.w	r9, [sp]
 80011ea:	4630      	mov	r0, r6
 80011ec:	f7ff fbcc 	bl	8000988 <_Unwind_VRS_Get>
 80011f0:	b2ed      	uxtb	r5, r5
 80011f2:	9b03      	ldr	r3, [sp, #12]
 80011f4:	f8cd 9000 	str.w	r9, [sp]
 80011f8:	0660      	lsls	r0, r4, #25
 80011fa:	f105 0504 	add.w	r5, r5, #4
 80011fe:	bf4c      	ite	mi
 8001200:	1b5d      	submi	r5, r3, r5
 8001202:	18ed      	addpl	r5, r5, r3
 8001204:	2300      	movs	r3, #0
 8001206:	4619      	mov	r1, r3
 8001208:	220d      	movs	r2, #13
 800120a:	4630      	mov	r0, r6
 800120c:	9503      	str	r5, [sp, #12]
 800120e:	f7ff fbe1 	bl	80009d4 <_Unwind_VRS_Set>
 8001212:	4638      	mov	r0, r7
 8001214:	f7ff ffa6 	bl	8001164 <next_unwind_byte>
 8001218:	28b0      	cmp	r0, #176	; 0xb0
 800121a:	4604      	mov	r4, r0
 800121c:	d1db      	bne.n	80011d6 <__gnu_unwind_execute+0x1a>
 800121e:	f1b8 0f00 	cmp.w	r8, #0
 8001222:	f000 8095 	beq.w	8001350 <__gnu_unwind_execute+0x194>
 8001226:	2000      	movs	r0, #0
 8001228:	e01c      	b.n	8001264 <__gnu_unwind_execute+0xa8>
 800122a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800122e:	2b80      	cmp	r3, #128	; 0x80
 8001230:	d05d      	beq.n	80012ee <__gnu_unwind_execute+0x132>
 8001232:	2b90      	cmp	r3, #144	; 0x90
 8001234:	d019      	beq.n	800126a <__gnu_unwind_execute+0xae>
 8001236:	2ba0      	cmp	r3, #160	; 0xa0
 8001238:	d02c      	beq.n	8001294 <__gnu_unwind_execute+0xd8>
 800123a:	2bb0      	cmp	r3, #176	; 0xb0
 800123c:	d03f      	beq.n	80012be <__gnu_unwind_execute+0x102>
 800123e:	2bc0      	cmp	r3, #192	; 0xc0
 8001240:	d06c      	beq.n	800131c <__gnu_unwind_execute+0x160>
 8001242:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001246:	2bd0      	cmp	r3, #208	; 0xd0
 8001248:	d10b      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 800124a:	f000 0207 	and.w	r2, r0, #7
 800124e:	3201      	adds	r2, #1
 8001250:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001254:	2305      	movs	r3, #5
 8001256:	2101      	movs	r1, #1
 8001258:	4630      	mov	r0, r6
 800125a:	f7ff fd89 	bl	8000d70 <_Unwind_VRS_Pop>
 800125e:	2800      	cmp	r0, #0
 8001260:	d0b3      	beq.n	80011ca <__gnu_unwind_execute+0xe>
 8001262:	2009      	movs	r0, #9
 8001264:	b005      	add	sp, #20
 8001266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800126a:	f000 030d 	and.w	r3, r0, #13
 800126e:	2b0d      	cmp	r3, #13
 8001270:	d0f7      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 8001272:	ad03      	add	r5, sp, #12
 8001274:	2300      	movs	r3, #0
 8001276:	f000 020f 	and.w	r2, r0, #15
 800127a:	4619      	mov	r1, r3
 800127c:	9500      	str	r5, [sp, #0]
 800127e:	4630      	mov	r0, r6
 8001280:	f7ff fb82 	bl	8000988 <_Unwind_VRS_Get>
 8001284:	2300      	movs	r3, #0
 8001286:	9500      	str	r5, [sp, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	220d      	movs	r2, #13
 800128c:	4630      	mov	r0, r6
 800128e:	f7ff fba1 	bl	80009d4 <_Unwind_VRS_Set>
 8001292:	e79a      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001294:	43c2      	mvns	r2, r0
 8001296:	f002 0307 	and.w	r3, r2, #7
 800129a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800129e:	411a      	asrs	r2, r3
 80012a0:	0701      	lsls	r1, r0, #28
 80012a2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	bf48      	it	mi
 80012ac:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80012b0:	4619      	mov	r1, r3
 80012b2:	4630      	mov	r0, r6
 80012b4:	f7ff fd5c 	bl	8000d70 <_Unwind_VRS_Pop>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d1d2      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 80012bc:	e785      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80012be:	28b1      	cmp	r0, #177	; 0xb1
 80012c0:	d057      	beq.n	8001372 <__gnu_unwind_execute+0x1b6>
 80012c2:	28b2      	cmp	r0, #178	; 0xb2
 80012c4:	d068      	beq.n	8001398 <__gnu_unwind_execute+0x1dc>
 80012c6:	28b3      	cmp	r0, #179	; 0xb3
 80012c8:	f000 8095 	beq.w	80013f6 <__gnu_unwind_execute+0x23a>
 80012cc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80012d0:	2bb4      	cmp	r3, #180	; 0xb4
 80012d2:	d0c6      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 80012d4:	f000 0207 	and.w	r2, r0, #7
 80012d8:	3201      	adds	r2, #1
 80012da:	2301      	movs	r3, #1
 80012dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012e0:	4619      	mov	r1, r3
 80012e2:	4630      	mov	r0, r6
 80012e4:	f7ff fd44 	bl	8000d70 <_Unwind_VRS_Pop>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d1ba      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 80012ec:	e76d      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80012ee:	4638      	mov	r0, r7
 80012f0:	f7ff ff38 	bl	8001164 <next_unwind_byte>
 80012f4:	0224      	lsls	r4, r4, #8
 80012f6:	4304      	orrs	r4, r0
 80012f8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80012fc:	d0b1      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 80012fe:	0124      	lsls	r4, r4, #4
 8001300:	2300      	movs	r3, #0
 8001302:	b2a2      	uxth	r2, r4
 8001304:	4619      	mov	r1, r3
 8001306:	4630      	mov	r0, r6
 8001308:	f7ff fd32 	bl	8000d70 <_Unwind_VRS_Pop>
 800130c:	2800      	cmp	r0, #0
 800130e:	d1a8      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 8001310:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001314:	bf18      	it	ne
 8001316:	f04f 0801 	movne.w	r8, #1
 800131a:	e756      	b.n	80011ca <__gnu_unwind_execute+0xe>
 800131c:	28c6      	cmp	r0, #198	; 0xc6
 800131e:	d07d      	beq.n	800141c <__gnu_unwind_execute+0x260>
 8001320:	28c7      	cmp	r0, #199	; 0xc7
 8001322:	f000 8086 	beq.w	8001432 <__gnu_unwind_execute+0x276>
 8001326:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800132a:	2bc0      	cmp	r3, #192	; 0xc0
 800132c:	f000 8094 	beq.w	8001458 <__gnu_unwind_execute+0x29c>
 8001330:	28c8      	cmp	r0, #200	; 0xc8
 8001332:	f000 809f 	beq.w	8001474 <__gnu_unwind_execute+0x2b8>
 8001336:	28c9      	cmp	r0, #201	; 0xc9
 8001338:	d193      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 800133a:	4638      	mov	r0, r7
 800133c:	f7ff ff12 	bl	8001164 <next_unwind_byte>
 8001340:	0302      	lsls	r2, r0, #12
 8001342:	f000 000f 	and.w	r0, r0, #15
 8001346:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800134a:	3001      	adds	r0, #1
 800134c:	4302      	orrs	r2, r0
 800134e:	e781      	b.n	8001254 <__gnu_unwind_execute+0x98>
 8001350:	ac03      	add	r4, sp, #12
 8001352:	4643      	mov	r3, r8
 8001354:	220e      	movs	r2, #14
 8001356:	4641      	mov	r1, r8
 8001358:	9400      	str	r4, [sp, #0]
 800135a:	4630      	mov	r0, r6
 800135c:	f7ff fb14 	bl	8000988 <_Unwind_VRS_Get>
 8001360:	9400      	str	r4, [sp, #0]
 8001362:	4630      	mov	r0, r6
 8001364:	4643      	mov	r3, r8
 8001366:	220f      	movs	r2, #15
 8001368:	4641      	mov	r1, r8
 800136a:	f7ff fb33 	bl	80009d4 <_Unwind_VRS_Set>
 800136e:	4640      	mov	r0, r8
 8001370:	e778      	b.n	8001264 <__gnu_unwind_execute+0xa8>
 8001372:	4638      	mov	r0, r7
 8001374:	f7ff fef6 	bl	8001164 <next_unwind_byte>
 8001378:	2800      	cmp	r0, #0
 800137a:	f43f af72 	beq.w	8001262 <__gnu_unwind_execute+0xa6>
 800137e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001382:	f47f af6e 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001386:	4602      	mov	r2, r0
 8001388:	4619      	mov	r1, r3
 800138a:	4630      	mov	r0, r6
 800138c:	f7ff fcf0 	bl	8000d70 <_Unwind_VRS_Pop>
 8001390:	2800      	cmp	r0, #0
 8001392:	f47f af66 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001396:	e718      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001398:	2300      	movs	r3, #0
 800139a:	f10d 090c 	add.w	r9, sp, #12
 800139e:	220d      	movs	r2, #13
 80013a0:	4619      	mov	r1, r3
 80013a2:	f8cd 9000 	str.w	r9, [sp]
 80013a6:	4630      	mov	r0, r6
 80013a8:	f7ff faee 	bl	8000988 <_Unwind_VRS_Get>
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff fed9 	bl	8001164 <next_unwind_byte>
 80013b2:	0602      	lsls	r2, r0, #24
 80013b4:	f04f 0402 	mov.w	r4, #2
 80013b8:	d50c      	bpl.n	80013d4 <__gnu_unwind_execute+0x218>
 80013ba:	9b03      	ldr	r3, [sp, #12]
 80013bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80013c0:	40a0      	lsls	r0, r4
 80013c2:	4403      	add	r3, r0
 80013c4:	4638      	mov	r0, r7
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	f7ff fecc 	bl	8001164 <next_unwind_byte>
 80013cc:	0603      	lsls	r3, r0, #24
 80013ce:	f104 0407 	add.w	r4, r4, #7
 80013d2:	d4f2      	bmi.n	80013ba <__gnu_unwind_execute+0x1fe>
 80013d4:	9b03      	ldr	r3, [sp, #12]
 80013d6:	f8cd 9000 	str.w	r9, [sp]
 80013da:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80013de:	40a2      	lsls	r2, r4
 80013e0:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80013e4:	2300      	movs	r3, #0
 80013e6:	4414      	add	r4, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	220d      	movs	r2, #13
 80013ec:	4630      	mov	r0, r6
 80013ee:	9403      	str	r4, [sp, #12]
 80013f0:	f7ff faf0 	bl	80009d4 <_Unwind_VRS_Set>
 80013f4:	e6e9      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80013f6:	4638      	mov	r0, r7
 80013f8:	f7ff feb4 	bl	8001164 <next_unwind_byte>
 80013fc:	0301      	lsls	r1, r0, #12
 80013fe:	f000 000f 	and.w	r0, r0, #15
 8001402:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001406:	1c42      	adds	r2, r0, #1
 8001408:	2301      	movs	r3, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	4630      	mov	r0, r6
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fcae 	bl	8000d70 <_Unwind_VRS_Pop>
 8001414:	2800      	cmp	r0, #0
 8001416:	f47f af24 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 800141a:	e6d6      	b.n	80011ca <__gnu_unwind_execute+0xe>
 800141c:	4638      	mov	r0, r7
 800141e:	f7ff fea1 	bl	8001164 <next_unwind_byte>
 8001422:	0301      	lsls	r1, r0, #12
 8001424:	f000 000f 	and.w	r0, r0, #15
 8001428:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800142c:	1c42      	adds	r2, r0, #1
 800142e:	2303      	movs	r3, #3
 8001430:	e7eb      	b.n	800140a <__gnu_unwind_execute+0x24e>
 8001432:	4638      	mov	r0, r7
 8001434:	f7ff fe96 	bl	8001164 <next_unwind_byte>
 8001438:	2800      	cmp	r0, #0
 800143a:	f43f af12 	beq.w	8001262 <__gnu_unwind_execute+0xa6>
 800143e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001442:	f47f af0e 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001446:	4602      	mov	r2, r0
 8001448:	2104      	movs	r1, #4
 800144a:	4630      	mov	r0, r6
 800144c:	f7ff fc90 	bl	8000d70 <_Unwind_VRS_Pop>
 8001450:	2800      	cmp	r0, #0
 8001452:	f47f af06 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001456:	e6b8      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001458:	f000 020f 	and.w	r2, r0, #15
 800145c:	3201      	adds	r2, #1
 800145e:	2303      	movs	r3, #3
 8001460:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001464:	4619      	mov	r1, r3
 8001466:	4630      	mov	r0, r6
 8001468:	f7ff fc82 	bl	8000d70 <_Unwind_VRS_Pop>
 800146c:	2800      	cmp	r0, #0
 800146e:	f47f aef8 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001472:	e6aa      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001474:	4638      	mov	r0, r7
 8001476:	f7ff fe75 	bl	8001164 <next_unwind_byte>
 800147a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800147e:	f000 030f 	and.w	r3, r0, #15
 8001482:	3210      	adds	r2, #16
 8001484:	3301      	adds	r3, #1
 8001486:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800148a:	e6e3      	b.n	8001254 <__gnu_unwind_execute+0x98>

0800148c <__gnu_unwind_frame>:
 800148c:	b510      	push	{r4, lr}
 800148e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001490:	b084      	sub	sp, #16
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	2003      	movs	r0, #3
 8001496:	f88d 000c 	strb.w	r0, [sp, #12]
 800149a:	79dc      	ldrb	r4, [r3, #7]
 800149c:	f88d 400d 	strb.w	r4, [sp, #13]
 80014a0:	0212      	lsls	r2, r2, #8
 80014a2:	3308      	adds	r3, #8
 80014a4:	4608      	mov	r0, r1
 80014a6:	a901      	add	r1, sp, #4
 80014a8:	9201      	str	r2, [sp, #4]
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	f7ff fe86 	bl	80011bc <__gnu_unwind_execute>
 80014b0:	b004      	add	sp, #16
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <_Unwind_GetRegionStart>:
 80014b4:	b508      	push	{r3, lr}
 80014b6:	f7ff fe7f 	bl	80011b8 <unwind_UCB_from_context>
 80014ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop

080014c0 <_Unwind_GetLanguageSpecificData>:
 80014c0:	b508      	push	{r3, lr}
 80014c2:	f7ff fe79 	bl	80011b8 <unwind_UCB_from_context>
 80014c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80014c8:	79c3      	ldrb	r3, [r0, #7]
 80014ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014ce:	3008      	adds	r0, #8
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop

080014d4 <_Unwind_GetTextRelBase>:
 80014d4:	b508      	push	{r3, lr}
 80014d6:	f006 fe66 	bl	80081a6 <abort>
 80014da:	bf00      	nop

080014dc <_Unwind_GetDataRelBase>:
 80014dc:	b508      	push	{r3, lr}
 80014de:	f7ff fff9 	bl	80014d4 <_Unwind_GetTextRelBase>
 80014e2:	bf00      	nop

080014e4 <__aeabi_idiv0>:
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ee:	e003      	b.n	80014f8 <LoopCopyDataInit>

080014f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014f6:	3104      	adds	r1, #4

080014f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001500:	d3f6      	bcc.n	80014f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001504:	e002      	b.n	800150c <LoopFillZerobss>

08001506 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001506:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001508:	f842 3b04 	str.w	r3, [r2], #4

0800150c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001510:	d3f9      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001512:	f001 f9cb 	bl	80028ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f006 fe17 	bl	8008148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f000 fab3 	bl	8001a84 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001524:	0800854c 	.word	0x0800854c
  ldr  r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800152c:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 8001530:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 8001534:	20004648 	.word	0x20004648

08001538 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC3_IRQHandler>
	...

0800153c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800153c:	b500      	push	{lr}
 800153e:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001540:	4822      	ldr	r0, [pc, #136]	; (80015cc <MX_ADC1_Init+0x90>)
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <MX_ADC1_Init+0x94>)
 8001544:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8001546:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800154a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800154c:	2300      	movs	r3, #0
 800154e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001550:	60c3      	str	r3, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001552:	2204      	movs	r2, #4
 8001554:	6102      	str	r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001556:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001558:	7543      	strb	r3, [r0, #21]
  hadc1.Init.NbrOfConversion = 1;
 800155a:	2201      	movs	r2, #1
 800155c:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155e:	7703      	strb	r3, [r0, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001560:	6202      	str	r2, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001562:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001564:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001566:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001568:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800156a:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.BoostMode = ENABLE;
 800156c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001570:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001574:	f001 f9f0 	bl	8002958 <HAL_ADC_Init>
 8001578:	b9c0      	cbnz	r0, 80015ac <MX_ADC1_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800157a:	a90a      	add	r1, sp, #40	; 0x28
 800157c:	2300      	movs	r3, #0
 800157e:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001582:	4812      	ldr	r0, [pc, #72]	; (80015cc <MX_ADC1_Init+0x90>)
 8001584:	f001 fe78 	bl	8003278 <HAL_ADCEx_MultiModeConfigChannel>
 8001588:	b9a8      	cbnz	r0, 80015b6 <MX_ADC1_Init+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 800158a:	2303      	movs	r3, #3
 800158c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800158e:	2301      	movs	r3, #1
 8001590:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001592:	2300      	movs	r3, #0
 8001594:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001596:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001598:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800159a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	4669      	mov	r1, sp
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <MX_ADC1_Init+0x90>)
 80015a0:	f001 fb5c 	bl	8002c5c <HAL_ADC_ConfigChannel>
 80015a4:	b960      	cbnz	r0, 80015c0 <MX_ADC1_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80015a6:	b00b      	add	sp, #44	; 0x2c
 80015a8:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80015ac:	2158      	movs	r1, #88	; 0x58
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <MX_ADC1_Init+0x98>)
 80015b0:	f000 f9d6 	bl	8001960 <_Error_Handler>
 80015b4:	e7e1      	b.n	800157a <MX_ADC1_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 80015b6:	2160      	movs	r1, #96	; 0x60
 80015b8:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_ADC1_Init+0x98>)
 80015ba:	f000 f9d1 	bl	8001960 <_Error_Handler>
 80015be:	e7e4      	b.n	800158a <MX_ADC1_Init+0x4e>
    _Error_Handler(__FILE__, __LINE__);
 80015c0:	216d      	movs	r1, #109	; 0x6d
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_ADC1_Init+0x98>)
 80015c4:	f000 f9cc 	bl	8001960 <_Error_Handler>
}
 80015c8:	e7ed      	b.n	80015a6 <MX_ADC1_Init+0x6a>
 80015ca:	bf00      	nop
 80015cc:	20003e74 	.word	0x20003e74
 80015d0:	40022000 	.word	0x40022000
 80015d4:	08008338 	.word	0x08008338

080015d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80015d8:	6802      	ldr	r2, [r0, #0]
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_ADC_MspInit+0x44>)
 80015dc:	429a      	cmp	r2, r3
 80015de:	d000      	beq.n	80015e2 <HAL_ADC_MspInit+0xa>
 80015e0:	4770      	bx	lr
{
 80015e2:	b500      	push	{lr}
 80015e4:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_ADC_MspInit+0x48>)
 80015e8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80015ec:	f042 0220 	orr.w	r2, r2, #32
 80015f0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80015f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_INP3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	a901      	add	r1, sp, #4
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_ADC_MspInit+0x4c>)
 8001610:	f002 fae2 	bl	8003bd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001614:	b007      	add	sp, #28
 8001616:	f85d fb04 	ldr.w	pc, [sp], #4
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000
 8001620:	58024400 	.word	0x58024400
 8001624:	58020000 	.word	0x58020000

08001628 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001628:	b500      	push	{lr}
 800162a:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_DMA_Init+0x84>)
 800162e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800163a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2105      	movs	r1, #5
 800164a:	200b      	movs	r0, #11
 800164c:	f001 fec6 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001650:	200b      	movs	r0, #11
 8001652:	f001 fef3 	bl	800343c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	200c      	movs	r0, #12
 800165c:	f001 febe 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001660:	200c      	movs	r0, #12
 8001662:	f001 feeb 	bl	800343c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	200d      	movs	r0, #13
 800166c:	f001 feb6 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001670:	200d      	movs	r0, #13
 8001672:	f001 fee3 	bl	800343c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	200e      	movs	r0, #14
 800167c:	f001 feae 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001680:	200e      	movs	r0, #14
 8001682:	f001 fedb 	bl	800343c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2105      	movs	r1, #5
 800168a:	200f      	movs	r0, #15
 800168c:	f001 fea6 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001690:	200f      	movs	r0, #15
 8001692:	f001 fed3 	bl	800343c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2105      	movs	r1, #5
 800169a:	2010      	movs	r0, #16
 800169c:	f001 fe9e 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016a0:	2010      	movs	r0, #16
 80016a2:	f001 fecb 	bl	800343c <HAL_NVIC_EnableIRQ>

}
 80016a6:	b003      	add	sp, #12
 80016a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80016ac:	58024400 	.word	0x58024400

080016b0 <StartidleTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartidleTask function */
void StartidleTask(void const * argument)
{
 80016b0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartidleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f005 fac7 	bl	8006c46 <osDelay>
 80016b8:	e7fb      	b.n	80016b2 <StartidleTask+0x2>
	...

080016bc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	b0ba      	sub	sp, #232	; 0xe8
  osThreadDef(idleTask, StartidleTask, osPriorityIdle, 0, 128);
 80016c0:	4c5c      	ldr	r4, [pc, #368]	; (8001834 <MX_FREERTOS_Init+0x178>)
 80016c2:	ad35      	add	r5, sp, #212	; 0xd4
 80016c4:	4626      	mov	r6, r4
 80016c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	6833      	ldr	r3, [r6, #0]
 80016cc:	602b      	str	r3, [r5, #0]
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 80016ce:	2100      	movs	r1, #0
 80016d0:	a835      	add	r0, sp, #212	; 0xd4
 80016d2:	f005 fa9e 	bl	8006c12 <osThreadCreate>
 80016d6:	4b58      	ldr	r3, [pc, #352]	; (8001838 <MX_FREERTOS_Init+0x17c>)
 80016d8:	6018      	str	r0, [r3, #0]
  osThreadDef(LED1Task, StartLED1Task, osPriorityIdle, 0, 128);
 80016da:	ad30      	add	r5, sp, #192	; 0xc0
 80016dc:	f104 0614 	add.w	r6, r4, #20
 80016e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e4:	6833      	ldr	r3, [r6, #0]
 80016e6:	602b      	str	r3, [r5, #0]
  LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 80016e8:	2100      	movs	r1, #0
 80016ea:	a830      	add	r0, sp, #192	; 0xc0
 80016ec:	f005 fa91 	bl	8006c12 <osThreadCreate>
 80016f0:	4b52      	ldr	r3, [pc, #328]	; (800183c <MX_FREERTOS_Init+0x180>)
 80016f2:	6018      	str	r0, [r3, #0]
  osThreadDef(LED2Task, StartLED2Task, osPriorityIdle, 0, 128);
 80016f4:	ad2b      	add	r5, sp, #172	; 0xac
 80016f6:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80016fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fe:	6833      	ldr	r3, [r6, #0]
 8001700:	602b      	str	r3, [r5, #0]
  LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 8001702:	2100      	movs	r1, #0
 8001704:	a82b      	add	r0, sp, #172	; 0xac
 8001706:	f005 fa84 	bl	8006c12 <osThreadCreate>
 800170a:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <MX_FREERTOS_Init+0x184>)
 800170c:	6018      	str	r0, [r3, #0]
  osThreadDef(J1uartport, StartJ1uartport, osPriorityLow, 0, 128);
 800170e:	ad26      	add	r5, sp, #152	; 0x98
 8001710:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8001714:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001718:	6833      	ldr	r3, [r6, #0]
 800171a:	602b      	str	r3, [r5, #0]
  J1uartportHandle = osThreadCreate(osThread(J1uartport), NULL);
 800171c:	2100      	movs	r1, #0
 800171e:	a826      	add	r0, sp, #152	; 0x98
 8001720:	f005 fa77 	bl	8006c12 <osThreadCreate>
 8001724:	4b47      	ldr	r3, [pc, #284]	; (8001844 <MX_FREERTOS_Init+0x188>)
 8001726:	6018      	str	r0, [r3, #0]
  osThreadDef(J2uartport, StartJ2uartport, osPriorityIdle, 0, 128);
 8001728:	ad21      	add	r5, sp, #132	; 0x84
 800172a:	f104 0650 	add.w	r6, r4, #80	; 0x50
 800172e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001732:	6833      	ldr	r3, [r6, #0]
 8001734:	602b      	str	r3, [r5, #0]
  J2uartportHandle = osThreadCreate(osThread(J2uartport), NULL);
 8001736:	2100      	movs	r1, #0
 8001738:	a821      	add	r0, sp, #132	; 0x84
 800173a:	f005 fa6a 	bl	8006c12 <osThreadCreate>
 800173e:	4b42      	ldr	r3, [pc, #264]	; (8001848 <MX_FREERTOS_Init+0x18c>)
 8001740:	6018      	str	r0, [r3, #0]
  osThreadDef(J3uartport, StartJ3uartport, osPriorityIdle, 0, 128);
 8001742:	ad1c      	add	r5, sp, #112	; 0x70
 8001744:	f104 0664 	add.w	r6, r4, #100	; 0x64
 8001748:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800174a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174c:	6833      	ldr	r3, [r6, #0]
 800174e:	602b      	str	r3, [r5, #0]
  J3uartportHandle = osThreadCreate(osThread(J3uartport), NULL);
 8001750:	2100      	movs	r1, #0
 8001752:	a81c      	add	r0, sp, #112	; 0x70
 8001754:	f005 fa5d 	bl	8006c12 <osThreadCreate>
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <MX_FREERTOS_Init+0x190>)
 800175a:	6018      	str	r0, [r3, #0]
  osThreadDef(J4uartport, StartJ4uartport, osPriorityIdle, 0, 128);
 800175c:	ad17      	add	r5, sp, #92	; 0x5c
 800175e:	f104 0678 	add.w	r6, r4, #120	; 0x78
 8001762:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001766:	6833      	ldr	r3, [r6, #0]
 8001768:	602b      	str	r3, [r5, #0]
  J4uartportHandle = osThreadCreate(osThread(J4uartport), NULL);
 800176a:	2100      	movs	r1, #0
 800176c:	a817      	add	r0, sp, #92	; 0x5c
 800176e:	f005 fa50 	bl	8006c12 <osThreadCreate>
 8001772:	4b37      	ldr	r3, [pc, #220]	; (8001850 <MX_FREERTOS_Init+0x194>)
 8001774:	6018      	str	r0, [r3, #0]
  osThreadDef(J5uartport, StartJ5uartport, osPriorityIdle, 0, 128);
 8001776:	ad12      	add	r5, sp, #72	; 0x48
 8001778:	f104 068c 	add.w	r6, r4, #140	; 0x8c
 800177c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800177e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001780:	6833      	ldr	r3, [r6, #0]
 8001782:	602b      	str	r3, [r5, #0]
  J5uartportHandle = osThreadCreate(osThread(J5uartport), NULL);
 8001784:	2100      	movs	r1, #0
 8001786:	a812      	add	r0, sp, #72	; 0x48
 8001788:	f005 fa43 	bl	8006c12 <osThreadCreate>
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <MX_FREERTOS_Init+0x198>)
 800178e:	6018      	str	r0, [r3, #0]
  osThreadDef(J6uartport, StartJ6uartport, osPriorityIdle, 0, 128);
 8001790:	ad0d      	add	r5, sp, #52	; 0x34
 8001792:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8001796:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179a:	6833      	ldr	r3, [r6, #0]
 800179c:	602b      	str	r3, [r5, #0]
  J6uartportHandle = osThreadCreate(osThread(J6uartport), NULL);
 800179e:	2100      	movs	r1, #0
 80017a0:	a80d      	add	r0, sp, #52	; 0x34
 80017a2:	f005 fa36 	bl	8006c12 <osThreadCreate>
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <MX_FREERTOS_Init+0x19c>)
 80017a8:	6018      	str	r0, [r3, #0]
  osMessageQDef(J1vectorqueue, 1, pvector);
 80017aa:	ab0b      	add	r3, sp, #44	; 0x2c
 80017ac:	34b4      	adds	r4, #180	; 0xb4
 80017ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b2:	e883 0003 	stmia.w	r3, {r0, r1}
  J1vectorqueueHandle = osMessageCreate(osMessageQ(J1vectorqueue), NULL);
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f005 fa4d 	bl	8006c58 <osMessageCreate>
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <MX_FREERTOS_Init+0x1a0>)
 80017c0:	6018      	str	r0, [r3, #0]
  osMessageQDef(J2vectorqueue, 1, pvector);
 80017c2:	ab09      	add	r3, sp, #36	; 0x24
 80017c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c8:	e883 0003 	stmia.w	r3, {r0, r1}
  J2vectorqueueHandle = osMessageCreate(osMessageQ(J2vectorqueue), NULL);
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f005 fa42 	bl	8006c58 <osMessageCreate>
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <MX_FREERTOS_Init+0x1a4>)
 80017d6:	6018      	str	r0, [r3, #0]
  osMessageQDef(J3vectorqueue, 1, pvector);
 80017d8:	ab07      	add	r3, sp, #28
 80017da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017de:	e883 0003 	stmia.w	r3, {r0, r1}
  J3vectorqueueHandle = osMessageCreate(osMessageQ(J3vectorqueue), NULL);
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fa37 	bl	8006c58 <osMessageCreate>
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <MX_FREERTOS_Init+0x1a8>)
 80017ec:	6018      	str	r0, [r3, #0]
  osMessageQDef(J4vectorqueue, 1, pvector);
 80017ee:	ab05      	add	r3, sp, #20
 80017f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f4:	e883 0003 	stmia.w	r3, {r0, r1}
  J4vectorqueueHandle = osMessageCreate(osMessageQ(J4vectorqueue), NULL);
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f005 fa2c 	bl	8006c58 <osMessageCreate>
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <MX_FREERTOS_Init+0x1ac>)
 8001802:	6018      	str	r0, [r3, #0]
  osMessageQDef(J5vectorqueue, 1, pvector);
 8001804:	ab03      	add	r3, sp, #12
 8001806:	e894 0003 	ldmia.w	r4, {r0, r1}
 800180a:	e883 0003 	stmia.w	r3, {r0, r1}
  J5vectorqueueHandle = osMessageCreate(osMessageQ(J5vectorqueue), NULL);
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f005 fa21 	bl	8006c58 <osMessageCreate>
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_FREERTOS_Init+0x1b0>)
 8001818:	6018      	str	r0, [r3, #0]
  osMessageQDef(J6vectorqueue, 1, pvector);
 800181a:	ab01      	add	r3, sp, #4
 800181c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001820:	e883 0003 	stmia.w	r3, {r0, r1}
  J6vectorqueueHandle = osMessageCreate(osMessageQ(J6vectorqueue), NULL);
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f005 fa16 	bl	8006c58 <osMessageCreate>
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_FREERTOS_Init+0x1b4>)
 800182e:	6018      	str	r0, [r3, #0]
}
 8001830:	b03a      	add	sp, #232	; 0xe8
 8001832:	bd70      	pop	{r4, r5, r6, pc}
 8001834:	08008278 	.word	0x08008278
 8001838:	20003f04 	.word	0x20003f04
 800183c:	20003f0c 	.word	0x20003f0c
 8001840:	20003ef0 	.word	0x20003ef0
 8001844:	20003f10 	.word	0x20003f10
 8001848:	20003f08 	.word	0x20003f08
 800184c:	20003ee0 	.word	0x20003ee0
 8001850:	20003ed8 	.word	0x20003ed8
 8001854:	20003ef4 	.word	0x20003ef4
 8001858:	20003eec 	.word	0x20003eec
 800185c:	20003ee8 	.word	0x20003ee8
 8001860:	20003efc 	.word	0x20003efc
 8001864:	20003ef8 	.word	0x20003ef8
 8001868:	20003f00 	.word	0x20003f00
 800186c:	20003edc 	.word	0x20003edc
 8001870:	20003ee4 	.word	0x20003ee4

08001874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <MX_GPIO_Init+0xc8>)
 800187a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800187e:	f042 0210 	orr.w	r2, r2, #16
 8001882:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001886:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800188a:	f002 0210 	and.w	r2, r2, #16
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800189a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800189e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018a2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80018a6:	9201      	str	r2, [sp, #4]
 80018a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018ba:	f002 0201 	and.w	r2, r2, #1
 80018be:	9202      	str	r2, [sp, #8]
 80018c0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018c6:	f042 0202 	orr.w	r2, r2, #2
 80018ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018d2:	f002 0202 	and.w	r2, r2, #2
 80018d6:	9203      	str	r2, [sp, #12]
 80018d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018de:	f042 0204 	orr.w	r2, r2, #4
 80018e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	9304      	str	r3, [sp, #16]
 80018f0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80018f2:	4e13      	ldr	r6, [pc, #76]	; (8001940 <MX_GPIO_Init+0xcc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	210c      	movs	r1, #12
 80018f8:	4630      	mov	r0, r6
 80018fa:	f002 fa63 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80018fe:	4d11      	ldr	r5, [pc, #68]	; (8001944 <MX_GPIO_Init+0xd0>)
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001906:	4628      	mov	r0, r5
 8001908:	f002 fa5c 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800190c:	230c      	movs	r3, #12
 800190e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001910:	2311      	movs	r3, #17
 8001912:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2400      	movs	r4, #0
 8001916:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191a:	a905      	add	r1, sp, #20
 800191c:	4630      	mov	r0, r6
 800191e:	f002 f95b 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001926:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001930:	a905      	add	r1, sp, #20
 8001932:	4628      	mov	r0, r5
 8001934:	f002 f950 	bl	8003bd8 <HAL_GPIO_Init>

}
 8001938:	b00a      	add	sp, #40	; 0x28
 800193a:	bd70      	pop	{r4, r5, r6, pc}
 800193c:	58024400 	.word	0x58024400
 8001940:	58021000 	.word	0x58021000
 8001944:	58020000 	.word	0x58020000

08001948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800194a:	6802      	ldr	r2, [r0, #0]
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800194e:	429a      	cmp	r2, r3
 8001950:	d000      	beq.n	8001954 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001952:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001954:	f000 ffee 	bl	8002934 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001958:	e7fb      	b.n	8001952 <HAL_TIM_PeriodElapsedCallback+0xa>
 800195a:	bf00      	nop
 800195c:	40000800 	.word	0x40000800

08001960 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001960:	e7fe      	b.n	8001960 <_Error_Handler>
	...

08001964 <_Z18SystemClock_Configv>:
{
 8001964:	b500      	push	{lr}
 8001966:	b0cd      	sub	sp, #308	; 0x134
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8001968:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <_Z18SystemClock_Configv+0x108>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	f022 0204 	bic.w	r2, r2, #4
 8001970:	60da      	str	r2, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001972:	2200      	movs	r2, #0
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800197c:	619a      	str	r2, [r3, #24]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	9b01      	ldr	r3, [sp, #4]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <_Z18SystemClock_Configv+0x108>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001990:	d0fa      	beq.n	8001988 <_Z18SystemClock_Configv+0x24>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001992:	4a37      	ldr	r2, [pc, #220]	; (8001a70 <_Z18SystemClock_Configv+0x10c>)
 8001994:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	f043 0302 	orr.w	r3, r3, #2
 800199e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a0:	2201      	movs	r2, #1
 80019a2:	9239      	str	r2, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a8:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019aa:	2302      	movs	r3, #2
 80019ac:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ae:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019b0:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 100;
 80019b2:	2264      	movs	r2, #100	; 0x64
 80019b4:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019b6:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019b8:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019ba:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019bc:	230c      	movs	r3, #12
 80019be:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019c4:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c6:	a839      	add	r0, sp, #228	; 0xe4
 80019c8:	f002 fa06 	bl	8003dd8 <HAL_RCC_OscConfig>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d140      	bne.n	8001a52 <_Z18SystemClock_Configv+0xee>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d0:	233f      	movs	r3, #63	; 0x3f
 80019d2:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d4:	2303      	movs	r3, #3
 80019d6:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019dc:	2308      	movs	r3, #8
 80019de:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019e0:	2340      	movs	r3, #64	; 0x40
 80019e2:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019e4:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ea:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019ec:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ee:	2102      	movs	r1, #2
 80019f0:	a831      	add	r0, sp, #196	; 0xc4
 80019f2:	f002 fd9d 	bl	8004530 <HAL_RCC_ClockConfig>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d12f      	bne.n	8001a5a <_Z18SystemClock_Configv+0xf6>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <_Z18SystemClock_Configv+0x110>)
 80019fc:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001a02:	2213      	movs	r2, #19
 8001a04:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8001a06:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001a0c:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001a0e:	23c0      	movs	r3, #192	; 0xc0
 8001a10:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001a12:	2320      	movs	r3, #32
 8001a14:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a1a:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a1c:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001a1e:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001a20:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a22:	a802      	add	r0, sp, #8
 8001a24:	f002 ffac 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 8001a28:	b9d8      	cbnz	r0, 8001a62 <_Z18SystemClock_Configv+0xfe>
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_Z18SystemClock_Configv+0x114>)
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_Z18SystemClock_Configv+0x118>)
 8001a30:	fba3 3000 	umull	r3, r0, r3, r0
 8001a34:	0980      	lsrs	r0, r0, #6
 8001a36:	f001 fd0f 	bl	8003458 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a3a:	2004      	movs	r0, #4
 8001a3c:	f001 fd22 	bl	8003484 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f001 fcc8 	bl	80033dc <HAL_NVIC_SetPriority>
}
 8001a4c:	b04d      	add	sp, #308	; 0x134
 8001a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001a52:	21c6      	movs	r1, #198	; 0xc6
 8001a54:	480a      	ldr	r0, [pc, #40]	; (8001a80 <_Z18SystemClock_Configv+0x11c>)
 8001a56:	f7ff ff83 	bl	8001960 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001a5a:	21d8      	movs	r1, #216	; 0xd8
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <_Z18SystemClock_Configv+0x11c>)
 8001a5e:	f7ff ff7f 	bl	8001960 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001a62:	21ee      	movs	r1, #238	; 0xee
 8001a64:	4806      	ldr	r0, [pc, #24]	; (8001a80 <_Z18SystemClock_Configv+0x11c>)
 8001a66:	f7ff ff7b 	bl	8001960 <_Error_Handler>
 8001a6a:	bf00      	nop
 8001a6c:	58024800 	.word	0x58024800
 8001a70:	58024400 	.word	0x58024400
 8001a74:	00081003 	.word	0x00081003
 8001a78:	20000090 	.word	0x20000090
 8001a7c:	10624dd3 	.word	0x10624dd3
 8001a80:	080083b8 	.word	0x080083b8

08001a84 <main>:
{
 8001a84:	b510      	push	{r4, lr}
 8001a86:	b082      	sub	sp, #8
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a8c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a90:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <main+0xd8>)
 8001a92:	2100      	movs	r1, #0
 8001a94:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a9c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aa6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aac:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001ab0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ab8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001abc:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001ac0:	e00f      	b.n	8001ae2 <main+0x5e>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ac2:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ac4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ac8:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001acc:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001ad0:	4922      	ldr	r1, [pc, #136]	; (8001b5c <main+0xd8>)
 8001ad2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001ad6:	1e53      	subs	r3, r2, #1
      do {
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d1f2      	bne.n	8001ac2 <main+0x3e>
    } while(sets-- != 0U);
 8001adc:	1e43      	subs	r3, r0, #1
    do {
 8001ade:	b118      	cbz	r0, 8001ae8 <main+0x64>
    } while(sets-- != 0U);
 8001ae0:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ae2:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8001ae6:	e7ed      	b.n	8001ac4 <main+0x40>
 8001ae8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001aec:	694b      	ldr	r3, [r1, #20]
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	614b      	str	r3, [r1, #20]
 8001af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001af8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001afc:	f000 ff0a 	bl	8002914 <HAL_Init>
  SystemClock_Config();
 8001b00:	f7ff ff30 	bl	8001964 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001b04:	f7ff feb6 	bl	8001874 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b08:	f7ff fd8e 	bl	8001628 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b0c:	f7ff fd16 	bl	800153c <MX_ADC1_Init>
  MX_SPI3_Init();
 8001b10:	f000 f82c 	bl	8001b6c <MX_SPI3_Init>
  MX_UART4_Init();
 8001b14:	f000 f954 	bl	8001dc0 <MX_UART4_Init>
  MX_UART5_Init();
 8001b18:	f000 f97c 	bl	8001e14 <MX_UART5_Init>
  MX_UART7_Init();
 8001b1c:	f000 f9a4 	bl	8001e68 <MX_UART7_Init>
  MX_UART8_Init();
 8001b20:	f000 f9cc 	bl	8001ebc <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001b24:	f000 f9f6 	bl	8001f14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b28:	f000 fa1e 	bl	8001f68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b2c:	f000 fa46 	bl	8001fbc <MX_USART3_UART_Init>
  uint8_t data[2] = {'O','K'};
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <main+0xdc>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	a902      	add	r1, sp, #8
 8001b36:	f821 3d04 	strh.w	r3, [r1, #-4]!
  HAL_UART_Transmit(&huart8,data,2,1);
 8001b3a:	4c0a      	ldr	r4, [pc, #40]	; (8001b64 <main+0xe0>)
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4620      	mov	r0, r4
 8001b42:	f004 ff88 	bl	8006a56 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart8,rx_buff,UART8BYTES);
 8001b46:	2218      	movs	r2, #24
 8001b48:	4907      	ldr	r1, [pc, #28]	; (8001b68 <main+0xe4>)
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f004 f8e3 	bl	8005d16 <HAL_UART_Receive_IT>
  MX_FREERTOS_Init();
 8001b50:	f7ff fdb4 	bl	80016bc <MX_FREERTOS_Init>
  osKernelStart();
 8001b54:	f005 f858 	bl	8006c08 <osKernelStart>
 8001b58:	e7fe      	b.n	8001b58 <main+0xd4>
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00
 8001b60:	08008334 	.word	0x08008334
 8001b64:	20004434 	.word	0x20004434
 8001b68:	2000462c 	.word	0x2000462c

08001b6c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b6c:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8001b6e:	4815      	ldr	r0, [pc, #84]	; (8001bc4 <MX_SPI3_Init+0x58>)
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_SPI3_Init+0x5c>)
 8001b72:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b78:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7e:	2207      	movs	r2, #7
 8001b80:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b82:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b84:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b86:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001b8a:	6181      	str	r1, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b8c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001b90:	61c1      	str	r1, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b92:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b94:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b96:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b98:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b9e:	6342      	str	r2, [r0, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ba0:	6383      	str	r3, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ba2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ba4:	6403      	str	r3, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ba6:	6443      	str	r3, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ba8:	6483      	str	r3, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001baa:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bac:	6503      	str	r3, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = 0;
 8001bae:	6543      	str	r3, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bb0:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bb2:	f003 fe3d 	bl	8005830 <HAL_SPI_Init>
 8001bb6:	b900      	cbnz	r0, 8001bba <MX_SPI3_Init+0x4e>
 8001bb8:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001bba:	2159      	movs	r1, #89	; 0x59
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_SPI3_Init+0x60>)
 8001bbe:	f7ff fecf 	bl	8001960 <_Error_Handler>
  }

}
 8001bc2:	e7f9      	b.n	8001bb8 <MX_SPI3_Init+0x4c>
 8001bc4:	20003f14 	.word	0x20003f14
 8001bc8:	40003c00 	.word	0x40003c00
 8001bcc:	080083d0 	.word	0x080083d0

08001bd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8001bd0:	6802      	ldr	r2, [r0, #0]
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_SPI_MspInit+0x4c>)
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d000      	beq.n	8001bda <HAL_SPI_MspInit+0xa>
 8001bd8:	4770      	bx	lr
{
 8001bda:	b500      	push	{lr}
 8001bdc:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_SPI_MspInit+0x50>)
 8001be0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	9b00      	ldr	r3, [sp, #0]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bf8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bfc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c08:	2306      	movs	r3, #6
 8001c0a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	a901      	add	r1, sp, #4
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_SPI_MspInit+0x54>)
 8001c10:	f001 ffe2 	bl	8003bd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c14:	b007      	add	sp, #28
 8001c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c1a:	bf00      	nop
 8001c1c:	40003c00 	.word	0x40003c00
 8001c20:	58024400 	.word	0x58024400
 8001c24:	58020800 	.word	0x58020800

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b500      	push	{lr}
 8001c2a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_MspInit+0x80>)
 8001c2e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001c32:	f042 0202 	orr.w	r2, r2, #2
 8001c36:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c46:	2003      	movs	r0, #3
 8001c48:	f001 fbb6 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4611      	mov	r1, r2
 8001c50:	f06f 000b 	mvn.w	r0, #11
 8001c54:	f001 fbc2 	bl	80033dc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	f06f 000a 	mvn.w	r0, #10
 8001c60:	f001 fbbc 	bl	80033dc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	4611      	mov	r1, r2
 8001c68:	f06f 0009 	mvn.w	r0, #9
 8001c6c:	f001 fbb6 	bl	80033dc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	4611      	mov	r1, r2
 8001c74:	f06f 0004 	mvn.w	r0, #4
 8001c78:	f001 fbb0 	bl	80033dc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4611      	mov	r1, r2
 8001c80:	f06f 0003 	mvn.w	r0, #3
 8001c84:	f001 fbaa 	bl	80033dc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f06f 0001 	mvn.w	r0, #1
 8001c90:	f001 fba4 	bl	80033dc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f001 fb9e 	bl	80033dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca0:	b003      	add	sp, #12
 8001ca2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca6:	bf00      	nop
 8001ca8:	58024400 	.word	0x58024400

08001cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b500      	push	{lr}
 8001cae:	b08b      	sub	sp, #44	; 0x2c
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	201e      	movs	r0, #30
 8001cb6:	f001 fb91 	bl	80033dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001cba:	201e      	movs	r0, #30
 8001cbc:	f001 fbbe 	bl	800343c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_InitTick+0x70>)
 8001cc2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001cc6:	f042 0204 	orr.w	r2, r2, #4
 8001cca:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001cce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cda:	a901      	add	r1, sp, #4
 8001cdc:	a802      	add	r0, sp, #8
 8001cde:	f002 fd65 	bl	80047ac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ce2:	f002 fd37 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 8001ce6:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <HAL_InitTick+0x74>)
 8001cea:	fba0 2303 	umull	r2, r3, r0, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	3b01      	subs	r3, #1
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <HAL_InitTick+0x78>)
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_InitTick+0x7c>)
 8001cf6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cfc:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001cfe:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d04:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001d06:	f003 ff9d 	bl	8005c44 <HAL_TIM_Base_Init>
 8001d0a:	b118      	cbz	r0, 8001d14 <HAL_InitTick+0x68>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
}
 8001d0e:	b00b      	add	sp, #44	; 0x2c
 8001d10:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <HAL_InitTick+0x78>)
 8001d16:	f003 fe34 	bl	8005982 <HAL_TIM_Base_Start_IT>
 8001d1a:	e7f8      	b.n	8001d0e <HAL_InitTick+0x62>
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	20003f9c 	.word	0x20003f9c
 8001d28:	40000800 	.word	0x40000800

08001d2c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001d2c:	4770      	bx	lr

08001d2e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler>

08001d30 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler>

08001d32 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001d32:	e7fe      	b.n	8001d32 <BusFault_Handler>

08001d34 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001d34:	e7fe      	b.n	8001d34 <UsageFault_Handler>

08001d36 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001d38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001d3a:	f004 ff94 	bl	8006c66 <osSystickHandler>
 8001d3e:	bd08      	pop	{r3, pc}

08001d40 <DMA1_Stream0_IRQHandler>:

/**
* @brief This function handles DMA1 stream0 global interrupt.
*/
void DMA1_Stream0_IRQHandler(void)
{
 8001d40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d42:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Stream0_IRQHandler+0xc>)
 8001d44:	f001 fda8 	bl	8003898 <HAL_DMA_IRQHandler>
 8001d48:	bd08      	pop	{r3, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20003fdc 	.word	0x20003fdc

08001d50 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 8001d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001d52:	4802      	ldr	r0, [pc, #8]	; (8001d5c <DMA1_Stream1_IRQHandler+0xc>)
 8001d54:	f001 fda0 	bl	8003898 <HAL_DMA_IRQHandler>
 8001d58:	bd08      	pop	{r3, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200045b4 	.word	0x200045b4

08001d60 <DMA1_Stream2_IRQHandler>:

/**
* @brief This function handles DMA1 stream2 global interrupt.
*/
void DMA1_Stream2_IRQHandler(void)
{
 8001d60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001d62:	4802      	ldr	r0, [pc, #8]	; (8001d6c <DMA1_Stream2_IRQHandler+0xc>)
 8001d64:	f001 fd98 	bl	8003898 <HAL_DMA_IRQHandler>
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200042c4 	.word	0x200042c4

08001d70 <DMA1_Stream3_IRQHandler>:

/**
* @brief This function handles DMA1 stream3 global interrupt.
*/
void DMA1_Stream3_IRQHandler(void)
{
 8001d70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d72:	4802      	ldr	r0, [pc, #8]	; (8001d7c <DMA1_Stream3_IRQHandler+0xc>)
 8001d74:	f001 fd90 	bl	8003898 <HAL_DMA_IRQHandler>
 8001d78:	bd08      	pop	{r3, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000433c 	.word	0x2000433c

08001d80 <DMA1_Stream4_IRQHandler>:

/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 8001d80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d82:	4802      	ldr	r0, [pc, #8]	; (8001d8c <DMA1_Stream4_IRQHandler+0xc>)
 8001d84:	f001 fd88 	bl	8003898 <HAL_DMA_IRQHandler>
 8001d88:	bd08      	pop	{r3, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20004054 	.word	0x20004054

08001d90 <DMA1_Stream5_IRQHandler>:

/**
* @brief This function handles DMA1 stream5 global interrupt.
*/
void DMA1_Stream5_IRQHandler(void)
{
 8001d90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d92:	4802      	ldr	r0, [pc, #8]	; (8001d9c <DMA1_Stream5_IRQHandler+0xc>)
 8001d94:	f001 fd80 	bl	8003898 <HAL_DMA_IRQHandler>
 8001d98:	bd08      	pop	{r3, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000414c 	.word	0x2000414c

08001da0 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8001da0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001da2:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM4_IRQHandler+0xc>)
 8001da4:	f003 fdfe 	bl	80059a4 <HAL_TIM_IRQHandler>
 8001da8:	bd08      	pop	{r3, pc}
 8001daa:	bf00      	nop
 8001dac:	20003f9c 	.word	0x20003f9c

08001db0 <UART8_IRQHandler>:

/**
* @brief This function handles UART8 global interrupt.
*/
void UART8_IRQHandler(void)
{
 8001db0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001db2:	4802      	ldr	r0, [pc, #8]	; (8001dbc <UART8_IRQHandler+0xc>)
 8001db4:	f004 f864 	bl	8005e80 <HAL_UART_IRQHandler>
 8001db8:	bd08      	pop	{r3, pc}
 8001dba:	bf00      	nop
 8001dbc:	20004434 	.word	0x20004434

08001dc0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001dc0:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8001dc2:	4810      	ldr	r0, [pc, #64]	; (8001e04 <MX_UART4_Init+0x44>)
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_UART4_Init+0x48>)
 8001dc6:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 1250000;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_UART4_Init+0x4c>)
 8001dca:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd0:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dda:	6102      	str	r2, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	220c      	movs	r2, #12
 8001dde:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de0:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de2:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de4:	6203      	str	r3, [r0, #32]
  huart4.Init.Prescaler = UART_PRESCALER_DIV1;
 8001de6:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001de8:	6283      	str	r3, [r0, #40]	; 0x28
  huart4.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001dea:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart4.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001dec:	6303      	str	r3, [r0, #48]	; 0x30
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dee:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001df0:	f004 fecf 	bl	8006b92 <HAL_UART_Init>
 8001df4:	b900      	cbnz	r0, 8001df8 <MX_UART4_Init+0x38>
 8001df6:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001df8:	215e      	movs	r1, #94	; 0x5e
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_UART4_Init+0x50>)
 8001dfc:	f7ff fdb0 	bl	8001960 <_Error_Handler>
  }

}
 8001e00:	e7f9      	b.n	8001df6 <MX_UART4_Init+0x36>
 8001e02:	bf00      	nop
 8001e04:	200044b4 	.word	0x200044b4
 8001e08:	40004c00 	.word	0x40004c00
 8001e0c:	001312d0 	.word	0x001312d0
 8001e10:	080083e4 	.word	0x080083e4

08001e14 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e14:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 8001e16:	4810      	ldr	r0, [pc, #64]	; (8001e58 <MX_UART5_Init+0x44>)
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_UART5_Init+0x48>)
 8001e1a:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 1250000;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_UART5_Init+0x4c>)
 8001e1e:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e24:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e2e:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e30:	220c      	movs	r2, #12
 8001e32:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e34:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e36:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e38:	6203      	str	r3, [r0, #32]
  huart5.Init.Prescaler = UART_PRESCALER_DIV1;
 8001e3a:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001e3c:	6283      	str	r3, [r0, #40]	; 0x28
  huart5.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001e3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart5.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001e40:	6303      	str	r3, [r0, #48]	; 0x30
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e42:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e44:	f004 fea5 	bl	8006b92 <HAL_UART_Init>
 8001e48:	b900      	cbnz	r0, 8001e4c <MX_UART5_Init+0x38>
 8001e4a:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e4c:	2176      	movs	r1, #118	; 0x76
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <MX_UART5_Init+0x50>)
 8001e50:	f7ff fd86 	bl	8001960 <_Error_Handler>
  }

}
 8001e54:	e7f9      	b.n	8001e4a <MX_UART5_Init+0x36>
 8001e56:	bf00      	nop
 8001e58:	20004244 	.word	0x20004244
 8001e5c:	40005000 	.word	0x40005000
 8001e60:	001312d0 	.word	0x001312d0
 8001e64:	080083e4 	.word	0x080083e4

08001e68 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001e68:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 8001e6a:	4810      	ldr	r0, [pc, #64]	; (8001eac <MX_UART7_Init+0x44>)
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MX_UART7_Init+0x48>)
 8001e6e:	6003      	str	r3, [r0, #0]
  huart7.Init.BaudRate = 1250000;
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <MX_UART7_Init+0x4c>)
 8001e72:	6043      	str	r3, [r0, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e78:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e82:	6102      	str	r2, [r0, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e84:	220c      	movs	r2, #12
 8001e86:	6142      	str	r2, [r0, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e88:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8a:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8c:	6203      	str	r3, [r0, #32]
  huart7.Init.Prescaler = UART_PRESCALER_DIV1;
 8001e8e:	6243      	str	r3, [r0, #36]	; 0x24
  huart7.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001e90:	6283      	str	r3, [r0, #40]	; 0x28
  huart7.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001e92:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart7.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001e94:	6303      	str	r3, [r0, #48]	; 0x30
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e96:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e98:	f004 fe7b 	bl	8006b92 <HAL_UART_Init>
 8001e9c:	b900      	cbnz	r0, 8001ea0 <MX_UART7_Init+0x38>
 8001e9e:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ea0:	218e      	movs	r1, #142	; 0x8e
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_UART7_Init+0x50>)
 8001ea4:	f7ff fd5c 	bl	8001960 <_Error_Handler>
  }

}
 8001ea8:	e7f9      	b.n	8001e9e <MX_UART7_Init+0x36>
 8001eaa:	bf00      	nop
 8001eac:	200040cc 	.word	0x200040cc
 8001eb0:	40007800 	.word	0x40007800
 8001eb4:	001312d0 	.word	0x001312d0
 8001eb8:	080083e4 	.word	0x080083e4

08001ebc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001ebc:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <MX_UART8_Init+0x4c>)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <MX_UART8_Init+0x50>)
 8001ec2:	6003      	str	r3, [r0, #0]
  huart8.Init.BaudRate = 921600;
 8001ec4:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8001ec8:	6043      	str	r3, [r0, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001ece:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001ed0:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eda:	6203      	str	r3, [r0, #32]
  huart8.Init.Prescaler = UART_PRESCALER_DIV1;
 8001edc:	6243      	str	r3, [r0, #36]	; 0x24
  huart8.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001ede:	6283      	str	r3, [r0, #40]	; 0x28
  huart8.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_8_8;
 8001ee0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001ee4:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart8.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_8_8;
 8001ee6:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8001eea:	6303      	str	r3, [r0, #48]	; 0x30
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001eec:	2310      	movs	r3, #16
 8001eee:	6343      	str	r3, [r0, #52]	; 0x34
  huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001ef6:	f004 fe4c 	bl	8006b92 <HAL_UART_Init>
 8001efa:	b900      	cbnz	r0, 8001efe <MX_UART8_Init+0x42>
 8001efc:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001efe:	21a7      	movs	r1, #167	; 0xa7
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <MX_UART8_Init+0x54>)
 8001f02:	f7ff fd2d 	bl	8001960 <_Error_Handler>
  }

}
 8001f06:	e7f9      	b.n	8001efc <MX_UART8_Init+0x40>
 8001f08:	20004434 	.word	0x20004434
 8001f0c:	40007c00 	.word	0x40007c00
 8001f10:	080083e4 	.word	0x080083e4

08001f14 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f14:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001f16:	4810      	ldr	r0, [pc, #64]	; (8001f58 <MX_USART1_UART_Init+0x44>)
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_USART1_UART_Init+0x48>)
 8001f1a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 1250000;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f24:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2e:	6102      	str	r2, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f30:	220c      	movs	r2, #12
 8001f32:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f34:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f36:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f38:	6203      	str	r3, [r0, #32]
  huart1.Init.Prescaler = UART_PRESCALER_DIV1;
 8001f3a:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001f3c:	6283      	str	r3, [r0, #40]	; 0x28
  huart1.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001f3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart1.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001f40:	6303      	str	r3, [r0, #48]	; 0x30
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f42:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f44:	f004 fe25 	bl	8006b92 <HAL_UART_Init>
 8001f48:	b900      	cbnz	r0, 8001f4c <MX_USART1_UART_Init+0x38>
 8001f4a:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f4c:	21c0      	movs	r1, #192	; 0xc0
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART1_UART_Init+0x50>)
 8001f50:	f7ff fd06 	bl	8001960 <_Error_Handler>
  }

}
 8001f54:	e7f9      	b.n	8001f4a <MX_USART1_UART_Init+0x36>
 8001f56:	bf00      	nop
 8001f58:	200043b4 	.word	0x200043b4
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	001312d0 	.word	0x001312d0
 8001f64:	080083e4 	.word	0x080083e4

08001f68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f68:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001f6a:	4810      	ldr	r0, [pc, #64]	; (8001fac <MX_USART2_UART_Init+0x44>)
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_USART2_UART_Init+0x48>)
 8001f6e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 1250000;
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f72:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f78:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f82:	6102      	str	r2, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f84:	220c      	movs	r2, #12
 8001f86:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f88:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8a:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8c:	6203      	str	r3, [r0, #32]
  huart2.Init.Prescaler = UART_PRESCALER_DIV1;
 8001f8e:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001f90:	6283      	str	r3, [r0, #40]	; 0x28
  huart2.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001f92:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart2.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001f94:	6303      	str	r3, [r0, #48]	; 0x30
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f96:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f98:	f004 fdfb 	bl	8006b92 <HAL_UART_Init>
 8001f9c:	b900      	cbnz	r0, 8001fa0 <MX_USART2_UART_Init+0x38>
 8001f9e:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001fa0:	21d9      	movs	r1, #217	; 0xd9
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART2_UART_Init+0x50>)
 8001fa4:	f7ff fcdc 	bl	8001960 <_Error_Handler>
  }

}
 8001fa8:	e7f9      	b.n	8001f9e <MX_USART2_UART_Init+0x36>
 8001faa:	bf00      	nop
 8001fac:	20004534 	.word	0x20004534
 8001fb0:	40004400 	.word	0x40004400
 8001fb4:	001312d0 	.word	0x001312d0
 8001fb8:	080083e4 	.word	0x080083e4

08001fbc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fbc:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8001fbe:	4810      	ldr	r0, [pc, #64]	; (8002000 <MX_USART3_UART_Init+0x44>)
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_USART3_UART_Init+0x48>)
 8001fc2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 1250000;
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fc6:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd6:	6102      	str	r2, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	220c      	movs	r2, #12
 8001fda:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fdc:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fde:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe0:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8001fe2:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001fe4:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001fe6:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001fe8:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fea:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fec:	f004 fdd1 	bl	8006b92 <HAL_UART_Init>
 8001ff0:	b900      	cbnz	r0, 8001ff4 <MX_USART3_UART_Init+0x38>
 8001ff2:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ff4:	21f2      	movs	r1, #242	; 0xf2
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_USART3_UART_Init+0x50>)
 8001ff8:	f7ff fcb2 	bl	8001960 <_Error_Handler>
  }

}
 8001ffc:	e7f9      	b.n	8001ff2 <MX_USART3_UART_Init+0x36>
 8001ffe:	bf00      	nop
 8002000:	200041c4 	.word	0x200041c4
 8002004:	40004800 	.word	0x40004800
 8002008:	001312d0 	.word	0x001312d0
 800200c:	080083e4 	.word	0x080083e4

08002010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002010:	b530      	push	{r4, r5, lr}
 8002012:	b08d      	sub	sp, #52	; 0x34
 8002014:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8002016:	6803      	ldr	r3, [r0, #0]
 8002018:	4aa4      	ldr	r2, [pc, #656]	; (80022ac <HAL_UART_MspInit+0x29c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d017      	beq.n	800204e <HAL_UART_MspInit+0x3e>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 800201e:	4aa4      	ldr	r2, [pc, #656]	; (80022b0 <HAL_UART_MspInit+0x2a0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04a      	beq.n	80020ba <HAL_UART_MspInit+0xaa>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==UART7)
 8002024:	4aa3      	ldr	r2, [pc, #652]	; (80022b4 <HAL_UART_MspInit+0x2a4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d07e      	beq.n	8002128 <HAL_UART_MspInit+0x118>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 800202a:	4aa3      	ldr	r2, [pc, #652]	; (80022b8 <HAL_UART_MspInit+0x2a8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	f000 80b2 	beq.w	8002196 <HAL_UART_MspInit+0x186>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8002032:	4aa2      	ldr	r2, [pc, #648]	; (80022bc <HAL_UART_MspInit+0x2ac>)
 8002034:	4293      	cmp	r3, r2
 8002036:	f000 80d1 	beq.w	80021dc <HAL_UART_MspInit+0x1cc>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800203a:	4aa1      	ldr	r2, [pc, #644]	; (80022c0 <HAL_UART_MspInit+0x2b0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	f000 8104 	beq.w	800224a <HAL_UART_MspInit+0x23a>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002042:	4aa0      	ldr	r2, [pc, #640]	; (80022c4 <HAL_UART_MspInit+0x2b4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	f000 8163 	beq.w	8002310 <HAL_UART_MspInit+0x300>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800204a:	b00d      	add	sp, #52	; 0x34
 800204c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 800204e:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <HAL_UART_MspInit+0x2b8>)
 8002050:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002054:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002058:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800205c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002068:	2303      	movs	r3, #3
 800206a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2500      	movs	r5, #0
 8002072:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002076:	2308      	movs	r3, #8
 8002078:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	a907      	add	r1, sp, #28
 800207c:	4893      	ldr	r0, [pc, #588]	; (80022cc <HAL_UART_MspInit+0x2bc>)
 800207e:	f001 fdab 	bl	8003bd8 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8002082:	4893      	ldr	r0, [pc, #588]	; (80022d0 <HAL_UART_MspInit+0x2c0>)
 8002084:	4b93      	ldr	r3, [pc, #588]	; (80022d4 <HAL_UART_MspInit+0x2c4>)
 8002086:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002088:	233f      	movs	r3, #63	; 0x3f
 800208a:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208c:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800208e:	60c5      	str	r5, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002094:	6103      	str	r3, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002096:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002098:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800209a:	61c5      	str	r5, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800209c:	6205      	str	r5, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80020a0:	f001 faca 	bl	8003638 <HAL_DMA_Init>
 80020a4:	b918      	cbnz	r0, 80020ae <HAL_UART_MspInit+0x9e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80020a6:	4b8a      	ldr	r3, [pc, #552]	; (80022d0 <HAL_UART_MspInit+0x2c0>)
 80020a8:	6763      	str	r3, [r4, #116]	; 0x74
 80020aa:	639c      	str	r4, [r3, #56]	; 0x38
 80020ac:	e7cd      	b.n	800204a <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 80020ae:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80020b2:	4889      	ldr	r0, [pc, #548]	; (80022d8 <HAL_UART_MspInit+0x2c8>)
 80020b4:	f7ff fc54 	bl	8001960 <_Error_Handler>
 80020b8:	e7f5      	b.n	80020a6 <HAL_UART_MspInit+0x96>
    __HAL_RCC_UART5_CLK_ENABLE();
 80020ba:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <HAL_UART_MspInit+0x2b8>)
 80020bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80020c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020c4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80020c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020d8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2500      	movs	r5, #0
 80020e0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80020e4:	230e      	movs	r3, #14
 80020e6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	a907      	add	r1, sp, #28
 80020ea:	487c      	ldr	r0, [pc, #496]	; (80022dc <HAL_UART_MspInit+0x2cc>)
 80020ec:	f001 fd74 	bl	8003bd8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream1;
 80020f0:	487b      	ldr	r0, [pc, #492]	; (80022e0 <HAL_UART_MspInit+0x2d0>)
 80020f2:	4b7c      	ldr	r3, [pc, #496]	; (80022e4 <HAL_UART_MspInit+0x2d4>)
 80020f4:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80020f6:	2341      	movs	r3, #65	; 0x41
 80020f8:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020fa:	6085      	str	r5, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fc:	60c5      	str	r5, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002102:	6103      	str	r3, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002104:	6145      	str	r5, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002106:	6185      	str	r5, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002108:	61c5      	str	r5, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800210a:	6205      	str	r5, [r0, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800210e:	f001 fa93 	bl	8003638 <HAL_DMA_Init>
 8002112:	b918      	cbnz	r0, 800211c <HAL_UART_MspInit+0x10c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002114:	4b72      	ldr	r3, [pc, #456]	; (80022e0 <HAL_UART_MspInit+0x2d0>)
 8002116:	6763      	str	r3, [r4, #116]	; 0x74
 8002118:	639c      	str	r4, [r3, #56]	; 0x38
 800211a:	e796      	b.n	800204a <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 800211c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002120:	486d      	ldr	r0, [pc, #436]	; (80022d8 <HAL_UART_MspInit+0x2c8>)
 8002122:	f7ff fc1d 	bl	8001960 <_Error_Handler>
 8002126:	e7f5      	b.n	8002114 <HAL_UART_MspInit+0x104>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002128:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_UART_MspInit+0x2b8>)
 800212a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800212e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002132:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002142:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002146:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2500      	movs	r5, #0
 800214e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002152:	2307      	movs	r3, #7
 8002154:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002156:	a907      	add	r1, sp, #28
 8002158:	4863      	ldr	r0, [pc, #396]	; (80022e8 <HAL_UART_MspInit+0x2d8>)
 800215a:	f001 fd3d 	bl	8003bd8 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 800215e:	4863      	ldr	r0, [pc, #396]	; (80022ec <HAL_UART_MspInit+0x2dc>)
 8002160:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_UART_MspInit+0x2e0>)
 8002162:	6003      	str	r3, [r0, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002164:	234f      	movs	r3, #79	; 0x4f
 8002166:	6043      	str	r3, [r0, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002168:	6085      	str	r5, [r0, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216a:	60c5      	str	r5, [r0, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002170:	6103      	str	r3, [r0, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002172:	6145      	str	r5, [r0, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002174:	6185      	str	r5, [r0, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8002176:	61c5      	str	r5, [r0, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002178:	6205      	str	r5, [r0, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800217a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800217c:	f001 fa5c 	bl	8003638 <HAL_DMA_Init>
 8002180:	b918      	cbnz	r0, 800218a <HAL_UART_MspInit+0x17a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8002182:	4b5a      	ldr	r3, [pc, #360]	; (80022ec <HAL_UART_MspInit+0x2dc>)
 8002184:	6763      	str	r3, [r4, #116]	; 0x74
 8002186:	639c      	str	r4, [r3, #56]	; 0x38
 8002188:	e75f      	b.n	800204a <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 800218a:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800218e:	4852      	ldr	r0, [pc, #328]	; (80022d8 <HAL_UART_MspInit+0x2c8>)
 8002190:	f7ff fbe6 	bl	8001960 <_Error_Handler>
 8002194:	e7f5      	b.n	8002182 <HAL_UART_MspInit+0x172>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002196:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_UART_MspInit+0x2b8>)
 8002198:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800219c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021a0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80021a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021ac:	9303      	str	r3, [sp, #12]
 80021ae:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021b0:	2303      	movs	r3, #3
 80021b2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2202      	movs	r2, #2
 80021b6:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2400      	movs	r4, #0
 80021ba:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80021be:	2308      	movs	r3, #8
 80021c0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c2:	a907      	add	r1, sp, #28
 80021c4:	4848      	ldr	r0, [pc, #288]	; (80022e8 <HAL_UART_MspInit+0x2d8>)
 80021c6:	f001 fd07 	bl	8003bd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80021ca:	4622      	mov	r2, r4
 80021cc:	2105      	movs	r1, #5
 80021ce:	2053      	movs	r0, #83	; 0x53
 80021d0:	f001 f904 	bl	80033dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80021d4:	2053      	movs	r0, #83	; 0x53
 80021d6:	f001 f931 	bl	800343c <HAL_NVIC_EnableIRQ>
 80021da:	e736      	b.n	800204a <HAL_UART_MspInit+0x3a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021dc:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_UART_MspInit+0x2b8>)
 80021de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80021e2:	f042 0210 	orr.w	r2, r2, #16
 80021e6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80021ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	9304      	str	r3, [sp, #16]
 80021f4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021fa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2500      	movs	r5, #0
 8002202:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002206:	2304      	movs	r3, #4
 8002208:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	a907      	add	r1, sp, #28
 800220c:	4833      	ldr	r0, [pc, #204]	; (80022dc <HAL_UART_MspInit+0x2cc>)
 800220e:	f001 fce3 	bl	8003bd8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8002212:	4838      	ldr	r0, [pc, #224]	; (80022f4 <HAL_UART_MspInit+0x2e4>)
 8002214:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_UART_MspInit+0x2e8>)
 8002216:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002218:	2329      	movs	r3, #41	; 0x29
 800221a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221c:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800221e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002224:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002226:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002228:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800222a:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800222c:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800222e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002230:	f001 fa02 	bl	8003638 <HAL_DMA_Init>
 8002234:	b918      	cbnz	r0, 800223e <HAL_UART_MspInit+0x22e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_UART_MspInit+0x2e4>)
 8002238:	6763      	str	r3, [r4, #116]	; 0x74
 800223a:	639c      	str	r4, [r3, #56]	; 0x38
 800223c:	e705      	b.n	800204a <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 800223e:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002242:	4825      	ldr	r0, [pc, #148]	; (80022d8 <HAL_UART_MspInit+0x2c8>)
 8002244:	f7ff fb8c 	bl	8001960 <_Error_Handler>
 8002248:	e7f5      	b.n	8002236 <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART2_CLK_ENABLE();
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_UART_MspInit+0x2b8>)
 800224c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002250:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002254:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	9305      	str	r3, [sp, #20]
 8002262:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002264:	230c      	movs	r3, #12
 8002266:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2500      	movs	r5, #0
 800226e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002272:	2307      	movs	r3, #7
 8002274:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	a907      	add	r1, sp, #28
 8002278:	4814      	ldr	r0, [pc, #80]	; (80022cc <HAL_UART_MspInit+0x2bc>)
 800227a:	f001 fcad 	bl	8003bd8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 800227e:	481f      	ldr	r0, [pc, #124]	; (80022fc <HAL_UART_MspInit+0x2ec>)
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_UART_MspInit+0x2f0>)
 8002282:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002284:	232b      	movs	r3, #43	; 0x2b
 8002286:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002288:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800228a:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800228c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002290:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002292:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002294:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002296:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002298:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800229a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800229c:	f001 f9cc 	bl	8003638 <HAL_DMA_Init>
 80022a0:	bb80      	cbnz	r0, 8002304 <HAL_UART_MspInit+0x2f4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_UART_MspInit+0x2ec>)
 80022a4:	6763      	str	r3, [r4, #116]	; 0x74
 80022a6:	639c      	str	r4, [r3, #56]	; 0x38
 80022a8:	e6cf      	b.n	800204a <HAL_UART_MspInit+0x3a>
 80022aa:	bf00      	nop
 80022ac:	40004c00 	.word	0x40004c00
 80022b0:	40005000 	.word	0x40005000
 80022b4:	40007800 	.word	0x40007800
 80022b8:	40007c00 	.word	0x40007c00
 80022bc:	40011000 	.word	0x40011000
 80022c0:	40004400 	.word	0x40004400
 80022c4:	40004800 	.word	0x40004800
 80022c8:	58024400 	.word	0x58024400
 80022cc:	58020000 	.word	0x58020000
 80022d0:	20003fdc 	.word	0x20003fdc
 80022d4:	40020010 	.word	0x40020010
 80022d8:	080083e4 	.word	0x080083e4
 80022dc:	58020400 	.word	0x58020400
 80022e0:	200045b4 	.word	0x200045b4
 80022e4:	40020028 	.word	0x40020028
 80022e8:	58021000 	.word	0x58021000
 80022ec:	200042c4 	.word	0x200042c4
 80022f0:	40020040 	.word	0x40020040
 80022f4:	2000433c 	.word	0x2000433c
 80022f8:	40020058 	.word	0x40020058
 80022fc:	20004054 	.word	0x20004054
 8002300:	40020070 	.word	0x40020070
      _Error_Handler(__FILE__, __LINE__);
 8002304:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002308:	481d      	ldr	r0, [pc, #116]	; (8002380 <HAL_UART_MspInit+0x370>)
 800230a:	f7ff fb29 	bl	8001960 <_Error_Handler>
 800230e:	e7c8      	b.n	80022a2 <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_UART_MspInit+0x374>)
 8002312:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002316:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800231a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800231e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002326:	9306      	str	r3, [sp, #24]
 8002328:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800232a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800232e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2500      	movs	r5, #0
 8002336:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800233a:	2307      	movs	r3, #7
 800233c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	a907      	add	r1, sp, #28
 8002340:	4811      	ldr	r0, [pc, #68]	; (8002388 <HAL_UART_MspInit+0x378>)
 8002342:	f001 fc49 	bl	8003bd8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8002346:	4811      	ldr	r0, [pc, #68]	; (800238c <HAL_UART_MspInit+0x37c>)
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_UART_MspInit+0x380>)
 800234a:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800234c:	232d      	movs	r3, #45	; 0x2d
 800234e:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002350:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002352:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002358:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235a:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800235c:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800235e:	61c5      	str	r5, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002360:	6205      	str	r5, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002362:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002364:	f001 f968 	bl	8003638 <HAL_DMA_Init>
 8002368:	b918      	cbnz	r0, 8002372 <HAL_UART_MspInit+0x362>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_UART_MspInit+0x37c>)
 800236c:	6763      	str	r3, [r4, #116]	; 0x74
 800236e:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002370:	e66b      	b.n	800204a <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 8002372:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002376:	4802      	ldr	r0, [pc, #8]	; (8002380 <HAL_UART_MspInit+0x370>)
 8002378:	f7ff faf2 	bl	8001960 <_Error_Handler>
 800237c:	e7f5      	b.n	800236a <HAL_UART_MspInit+0x35a>
 800237e:	bf00      	nop
 8002380:	080083e4 	.word	0x080083e4
 8002384:	58024400 	.word	0x58024400
 8002388:	58020400 	.word	0x58020400
 800238c:	2000414c 	.word	0x2000414c
 8002390:	40020088 	.word	0x40020088

08002394 <HAL_UART_ErrorCallback>:
#define TXHEADER 0xF8
#define UART8BYTES sizeof(pvector)+2
uint8_t rx_buff[UART8BYTES];

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002394:	4770      	bx	lr
	...

08002398 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002398:	b508      	push	{r3, lr}
	if(huart->Instance==huart8.Instance) //not necessary to check..
 800239a:	6802      	ldr	r2, [r0, #0]
 800239c:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_UART_RxCpltCallback+0x204>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d000      	beq.n	80023a6 <HAL_UART_RxCpltCallback+0xe>
 80023a4:	bd08      	pop	{r3, pc}
	{
		static BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		if(rx_buff[0]==TXHEADER)
 80023a6:	4b7e      	ldr	r3, [pc, #504]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2bf8      	cmp	r3, #248	; 0xf8
 80023ac:	d011      	beq.n	80023d2 <HAL_UART_RxCpltCallback+0x3a>
				break;
			}

		}
				//continue IT
		HAL_UART_Receive_IT(&huart8,rx_buff,UART8BYTES);
 80023ae:	2218      	movs	r2, #24
 80023b0:	497b      	ldr	r1, [pc, #492]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80023b2:	487a      	ldr	r0, [pc, #488]	; (800259c <HAL_UART_RxCpltCallback+0x204>)
 80023b4:	f003 fcaf 	bl	8005d16 <HAL_UART_Receive_IT>
			//call a context switch if needed..
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80023b8:	4b7a      	ldr	r3, [pc, #488]	; (80025a4 <HAL_UART_RxCpltCallback+0x20c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f1      	beq.n	80023a4 <HAL_UART_RxCpltCallback+0xc>
 80023c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c4:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <HAL_UART_RxCpltCallback+0x210>)
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	f3bf 8f6f 	isb	sy
	}
}
 80023d0:	e7e8      	b.n	80023a4 <HAL_UART_RxCpltCallback+0xc>
			switch (rx_buff[1])
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d8e8      	bhi.n	80023ae <HAL_UART_RxCpltCallback+0x16>
 80023dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023e0:	002a0006 	.word	0x002a0006
 80023e4:	0072004e 	.word	0x0072004e
 80023e8:	00ba0096 	.word	0x00ba0096
				portJ1_anglevector.servonum = rx_buff[2]==0?portJ1_anglevector.servonum:rx_buff[2];
 80023ec:	4b6c      	ldr	r3, [pc, #432]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80023ee:	7898      	ldrb	r0, [r3, #2]
 80023f0:	b908      	cbnz	r0, 80023f6 <HAL_UART_RxCpltCallback+0x5e>
 80023f2:	4b6e      	ldr	r3, [pc, #440]	; (80025ac <HAL_UART_RxCpltCallback+0x214>)
 80023f4:	7818      	ldrb	r0, [r3, #0]
 80023f6:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_UART_RxCpltCallback+0x214>)
 80023f8:	7018      	strb	r0, [r3, #0]
				portJ1_anglevector.servoIDstart = rx_buff[3]==0?portJ1_anglevector.servoIDstart:rx_buff[3];
 80023fa:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80023fc:	78db      	ldrb	r3, [r3, #3]
 80023fe:	b90b      	cbnz	r3, 8002404 <HAL_UART_RxCpltCallback+0x6c>
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_UART_RxCpltCallback+0x214>)
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	4a69      	ldr	r2, [pc, #420]	; (80025ac <HAL_UART_RxCpltCallback+0x214>)
 8002406:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ1_anglevector.servonum;i++)
 8002408:	2300      	movs	r3, #0
 800240a:	e009      	b.n	8002420 <HAL_UART_RxCpltCallback+0x88>
					portJ1_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 800240c:	1c99      	adds	r1, r3, #2
 800240e:	4a64      	ldr	r2, [pc, #400]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 8002410:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002414:	4a65      	ldr	r2, [pc, #404]	; (80025ac <HAL_UART_RxCpltCallback+0x214>)
 8002416:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800241a:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ1_anglevector.servonum;i++)
 800241c:	3301      	adds	r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4283      	cmp	r3, r0
 8002422:	d3f3      	bcc.n	800240c <HAL_UART_RxCpltCallback+0x74>
				xQueueOverwriteFromISR(J1vectorqueueHandle,&portJ1_anglevector, &xHigherPriorityTaskWoken);
 8002424:	2302      	movs	r3, #2
 8002426:	4a5f      	ldr	r2, [pc, #380]	; (80025a4 <HAL_UART_RxCpltCallback+0x20c>)
 8002428:	4960      	ldr	r1, [pc, #384]	; (80025ac <HAL_UART_RxCpltCallback+0x214>)
 800242a:	4861      	ldr	r0, [pc, #388]	; (80025b0 <HAL_UART_RxCpltCallback+0x218>)
 800242c:	6800      	ldr	r0, [r0, #0]
 800242e:	f005 f81d 	bl	800746c <xQueueGenericSendFromISR>
				break;
 8002432:	e7bc      	b.n	80023ae <HAL_UART_RxCpltCallback+0x16>
				portJ2_anglevector.servonum = rx_buff[2]==0?portJ2_anglevector.servonum:rx_buff[2];
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 8002436:	7898      	ldrb	r0, [r3, #2]
 8002438:	b908      	cbnz	r0, 800243e <HAL_UART_RxCpltCallback+0xa6>
 800243a:	4b5e      	ldr	r3, [pc, #376]	; (80025b4 <HAL_UART_RxCpltCallback+0x21c>)
 800243c:	7818      	ldrb	r0, [r3, #0]
 800243e:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_UART_RxCpltCallback+0x21c>)
 8002440:	7018      	strb	r0, [r3, #0]
				portJ2_anglevector.servoIDstart = rx_buff[3]==0?portJ2_anglevector.servoIDstart:rx_buff[3];
 8002442:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 8002444:	78db      	ldrb	r3, [r3, #3]
 8002446:	b90b      	cbnz	r3, 800244c <HAL_UART_RxCpltCallback+0xb4>
 8002448:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <HAL_UART_RxCpltCallback+0x21c>)
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	4a59      	ldr	r2, [pc, #356]	; (80025b4 <HAL_UART_RxCpltCallback+0x21c>)
 800244e:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ2_anglevector.servonum;i++)
 8002450:	2300      	movs	r3, #0
 8002452:	e009      	b.n	8002468 <HAL_UART_RxCpltCallback+0xd0>
					portJ2_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 8002454:	1c99      	adds	r1, r3, #2
 8002456:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 8002458:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800245c:	4a55      	ldr	r2, [pc, #340]	; (80025b4 <HAL_UART_RxCpltCallback+0x21c>)
 800245e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002462:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ2_anglevector.servonum;i++)
 8002464:	3301      	adds	r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4283      	cmp	r3, r0
 800246a:	d3f3      	bcc.n	8002454 <HAL_UART_RxCpltCallback+0xbc>
				xQueueOverwriteFromISR(J2vectorqueueHandle,&portJ2_anglevector, &xHigherPriorityTaskWoken);
 800246c:	2302      	movs	r3, #2
 800246e:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_UART_RxCpltCallback+0x20c>)
 8002470:	4950      	ldr	r1, [pc, #320]	; (80025b4 <HAL_UART_RxCpltCallback+0x21c>)
 8002472:	4851      	ldr	r0, [pc, #324]	; (80025b8 <HAL_UART_RxCpltCallback+0x220>)
 8002474:	6800      	ldr	r0, [r0, #0]
 8002476:	f004 fff9 	bl	800746c <xQueueGenericSendFromISR>
				break;
 800247a:	e798      	b.n	80023ae <HAL_UART_RxCpltCallback+0x16>
				portJ3_anglevector.servonum = rx_buff[2]==0?portJ3_anglevector.servonum:rx_buff[2];
 800247c:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 800247e:	7898      	ldrb	r0, [r3, #2]
 8002480:	b908      	cbnz	r0, 8002486 <HAL_UART_RxCpltCallback+0xee>
 8002482:	4b4e      	ldr	r3, [pc, #312]	; (80025bc <HAL_UART_RxCpltCallback+0x224>)
 8002484:	7818      	ldrb	r0, [r3, #0]
 8002486:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_UART_RxCpltCallback+0x224>)
 8002488:	7018      	strb	r0, [r3, #0]
				portJ3_anglevector.servoIDstart = rx_buff[3]==0?portJ3_anglevector.servoIDstart:rx_buff[3];
 800248a:	4b45      	ldr	r3, [pc, #276]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 800248c:	78db      	ldrb	r3, [r3, #3]
 800248e:	b90b      	cbnz	r3, 8002494 <HAL_UART_RxCpltCallback+0xfc>
 8002490:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_UART_RxCpltCallback+0x224>)
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	4a49      	ldr	r2, [pc, #292]	; (80025bc <HAL_UART_RxCpltCallback+0x224>)
 8002496:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ3_anglevector.servonum;i++)
 8002498:	2300      	movs	r3, #0
 800249a:	e009      	b.n	80024b0 <HAL_UART_RxCpltCallback+0x118>
					portJ3_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 800249c:	1c99      	adds	r1, r3, #2
 800249e:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80024a0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80024a4:	4a45      	ldr	r2, [pc, #276]	; (80025bc <HAL_UART_RxCpltCallback+0x224>)
 80024a6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80024aa:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ3_anglevector.servonum;i++)
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4283      	cmp	r3, r0
 80024b2:	d3f3      	bcc.n	800249c <HAL_UART_RxCpltCallback+0x104>
				xQueueOverwriteFromISR(J3vectorqueueHandle,&portJ3_anglevector, &xHigherPriorityTaskWoken);
 80024b4:	2302      	movs	r3, #2
 80024b6:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <HAL_UART_RxCpltCallback+0x20c>)
 80024b8:	4940      	ldr	r1, [pc, #256]	; (80025bc <HAL_UART_RxCpltCallback+0x224>)
 80024ba:	4841      	ldr	r0, [pc, #260]	; (80025c0 <HAL_UART_RxCpltCallback+0x228>)
 80024bc:	6800      	ldr	r0, [r0, #0]
 80024be:	f004 ffd5 	bl	800746c <xQueueGenericSendFromISR>
				break;
 80024c2:	e774      	b.n	80023ae <HAL_UART_RxCpltCallback+0x16>
				portJ4_anglevector.servonum = rx_buff[2]==0?portJ4_anglevector.servonum:rx_buff[2];
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80024c6:	7898      	ldrb	r0, [r3, #2]
 80024c8:	b908      	cbnz	r0, 80024ce <HAL_UART_RxCpltCallback+0x136>
 80024ca:	4b3e      	ldr	r3, [pc, #248]	; (80025c4 <HAL_UART_RxCpltCallback+0x22c>)
 80024cc:	7818      	ldrb	r0, [r3, #0]
 80024ce:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <HAL_UART_RxCpltCallback+0x22c>)
 80024d0:	7018      	strb	r0, [r3, #0]
				portJ4_anglevector.servoIDstart = rx_buff[3]==0?portJ4_anglevector.servoIDstart:rx_buff[3];
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	b90b      	cbnz	r3, 80024dc <HAL_UART_RxCpltCallback+0x144>
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_UART_RxCpltCallback+0x22c>)
 80024da:	785b      	ldrb	r3, [r3, #1]
 80024dc:	4a39      	ldr	r2, [pc, #228]	; (80025c4 <HAL_UART_RxCpltCallback+0x22c>)
 80024de:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ4_anglevector.servonum;i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	e009      	b.n	80024f8 <HAL_UART_RxCpltCallback+0x160>
					portJ4_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 80024e4:	1c99      	adds	r1, r3, #2
 80024e6:	4a2e      	ldr	r2, [pc, #184]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 80024e8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80024ec:	4a35      	ldr	r2, [pc, #212]	; (80025c4 <HAL_UART_RxCpltCallback+0x22c>)
 80024ee:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80024f2:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ4_anglevector.servonum;i++)
 80024f4:	3301      	adds	r3, #1
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	4283      	cmp	r3, r0
 80024fa:	d3f3      	bcc.n	80024e4 <HAL_UART_RxCpltCallback+0x14c>
				xQueueOverwriteFromISR(J4vectorqueueHandle,&portJ4_anglevector, &xHigherPriorityTaskWoken);
 80024fc:	2302      	movs	r3, #2
 80024fe:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <HAL_UART_RxCpltCallback+0x20c>)
 8002500:	4930      	ldr	r1, [pc, #192]	; (80025c4 <HAL_UART_RxCpltCallback+0x22c>)
 8002502:	4831      	ldr	r0, [pc, #196]	; (80025c8 <HAL_UART_RxCpltCallback+0x230>)
 8002504:	6800      	ldr	r0, [r0, #0]
 8002506:	f004 ffb1 	bl	800746c <xQueueGenericSendFromISR>
				break;
 800250a:	e750      	b.n	80023ae <HAL_UART_RxCpltCallback+0x16>
				portJ5_anglevector.servonum = rx_buff[2]==0?portJ5_anglevector.servonum:rx_buff[2];
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 800250e:	7898      	ldrb	r0, [r3, #2]
 8002510:	b908      	cbnz	r0, 8002516 <HAL_UART_RxCpltCallback+0x17e>
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_UART_RxCpltCallback+0x234>)
 8002514:	7818      	ldrb	r0, [r3, #0]
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_UART_RxCpltCallback+0x234>)
 8002518:	7018      	strb	r0, [r3, #0]
				portJ5_anglevector.servoIDstart = rx_buff[3]==0?portJ5_anglevector.servoIDstart:rx_buff[3];
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 800251c:	78db      	ldrb	r3, [r3, #3]
 800251e:	b90b      	cbnz	r3, 8002524 <HAL_UART_RxCpltCallback+0x18c>
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_UART_RxCpltCallback+0x234>)
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_UART_RxCpltCallback+0x234>)
 8002526:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ5_anglevector.servonum;i++)
 8002528:	2300      	movs	r3, #0
 800252a:	e009      	b.n	8002540 <HAL_UART_RxCpltCallback+0x1a8>
					portJ5_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 800252c:	1c99      	adds	r1, r3, #2
 800252e:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 8002530:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002534:	4a25      	ldr	r2, [pc, #148]	; (80025cc <HAL_UART_RxCpltCallback+0x234>)
 8002536:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800253a:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ5_anglevector.servonum;i++)
 800253c:	3301      	adds	r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4283      	cmp	r3, r0
 8002542:	d3f3      	bcc.n	800252c <HAL_UART_RxCpltCallback+0x194>
				xQueueOverwriteFromISR(J5vectorqueueHandle,&portJ5_anglevector, &xHigherPriorityTaskWoken);
 8002544:	2302      	movs	r3, #2
 8002546:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <HAL_UART_RxCpltCallback+0x20c>)
 8002548:	4920      	ldr	r1, [pc, #128]	; (80025cc <HAL_UART_RxCpltCallback+0x234>)
 800254a:	4821      	ldr	r0, [pc, #132]	; (80025d0 <HAL_UART_RxCpltCallback+0x238>)
 800254c:	6800      	ldr	r0, [r0, #0]
 800254e:	f004 ff8d 	bl	800746c <xQueueGenericSendFromISR>
				break;
 8002552:	e72c      	b.n	80023ae <HAL_UART_RxCpltCallback+0x16>
				portJ6_anglevector.servonum = rx_buff[2]==0?portJ6_anglevector.servonum:rx_buff[2];
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 8002556:	7898      	ldrb	r0, [r3, #2]
 8002558:	b908      	cbnz	r0, 800255e <HAL_UART_RxCpltCallback+0x1c6>
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_UART_RxCpltCallback+0x23c>)
 800255c:	7818      	ldrb	r0, [r3, #0]
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_UART_RxCpltCallback+0x23c>)
 8002560:	7018      	strb	r0, [r3, #0]
				portJ6_anglevector.servoIDstart = rx_buff[3]==0?portJ6_anglevector.servoIDstart:rx_buff[3];
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 8002564:	78db      	ldrb	r3, [r3, #3]
 8002566:	b90b      	cbnz	r3, 800256c <HAL_UART_RxCpltCallback+0x1d4>
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_UART_RxCpltCallback+0x23c>)
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <HAL_UART_RxCpltCallback+0x23c>)
 800256e:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ6_anglevector.servonum;i++)
 8002570:	2300      	movs	r3, #0
 8002572:	e009      	b.n	8002588 <HAL_UART_RxCpltCallback+0x1f0>
					portJ6_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 8002574:	1c99      	adds	r1, r3, #2
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_UART_RxCpltCallback+0x208>)
 8002578:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_UART_RxCpltCallback+0x23c>)
 800257e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002582:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ6_anglevector.servonum;i++)
 8002584:	3301      	adds	r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4283      	cmp	r3, r0
 800258a:	d3f3      	bcc.n	8002574 <HAL_UART_RxCpltCallback+0x1dc>
				xQueueOverwriteFromISR(J6vectorqueueHandle,&portJ6_anglevector, &xHigherPriorityTaskWoken);
 800258c:	2302      	movs	r3, #2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <HAL_UART_RxCpltCallback+0x20c>)
 8002590:	4910      	ldr	r1, [pc, #64]	; (80025d4 <HAL_UART_RxCpltCallback+0x23c>)
 8002592:	4811      	ldr	r0, [pc, #68]	; (80025d8 <HAL_UART_RxCpltCallback+0x240>)
 8002594:	6800      	ldr	r0, [r0, #0]
 8002596:	f004 ff69 	bl	800746c <xQueueGenericSendFromISR>
				break;
 800259a:	e708      	b.n	80023ae <HAL_UART_RxCpltCallback+0x16>
 800259c:	20004434 	.word	0x20004434
 80025a0:	2000462c 	.word	0x2000462c
 80025a4:	20000120 	.word	0x20000120
 80025a8:	e000ed04 	.word	0xe000ed04
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20003ee8 	.word	0x20003ee8
 80025b4:	20000018 	.word	0x20000018
 80025b8:	20003efc 	.word	0x20003efc
 80025bc:	20000030 	.word	0x20000030
 80025c0:	20003ef8 	.word	0x20003ef8
 80025c4:	20000048 	.word	0x20000048
 80025c8:	20003f00 	.word	0x20003f00
 80025cc:	20000060 	.word	0x20000060
 80025d0:	20003edc 	.word	0x20003edc
 80025d4:	20000078 	.word	0x20000078
 80025d8:	20003ee4 	.word	0x20003ee4

080025dc <StartLED1Task>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
/* StartLED1Task function */
void StartLED1Task(void const * argument)
{
 80025dc:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartLED1Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 80025de:	2104      	movs	r1, #4
 80025e0:	4803      	ldr	r0, [pc, #12]	; (80025f0 <StartLED1Task+0x14>)
 80025e2:	f001 fbf4 	bl	8003dce <HAL_GPIO_TogglePin>
	  osDelay(300);
 80025e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025ea:	f004 fb2c 	bl	8006c46 <osDelay>
 80025ee:	e7f6      	b.n	80025de <StartLED1Task+0x2>
 80025f0:	58021000 	.word	0x58021000

080025f4 <StartLED2Task>:
  /* USER CODE END StartLED1Task */
}

/* StartLED2Task function */
void StartLED2Task(void const * argument)
{
 80025f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartLED2Task */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80025f6:	2108      	movs	r1, #8
 80025f8:	4803      	ldr	r0, [pc, #12]	; (8002608 <StartLED2Task+0x14>)
 80025fa:	f001 fbe8 	bl	8003dce <HAL_GPIO_TogglePin>
	  osDelay(600);
 80025fe:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002602:	f004 fb20 	bl	8006c46 <osDelay>
 8002606:	e7f6      	b.n	80025f6 <StartLED2Task+0x2>
 8002608:	58021000 	.word	0x58021000

0800260c <StartJ1uartport>:
}

/* StartJ1uartport function */
//uart2
void StartJ1uartport(void const * argument)
{
 800260c:	b510      	push	{r4, lr}
 800260e:	b088      	sub	sp, #32
	//should divide them to two 7 bits byte
	//that is lowbyte = val&0x007f, highbyte = val&0x3f80 >> 7
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J1vectorqueueHandle,&anglevector,0)==pdPASS)
 8002610:	2301      	movs	r3, #1
 8002612:	2200      	movs	r2, #0
 8002614:	a902      	add	r1, sp, #8
 8002616:	4817      	ldr	r0, [pc, #92]	; (8002674 <StartJ1uartport+0x68>)
 8002618:	6800      	ldr	r0, [r0, #0]
 800261a:	f004 ff9f 	bl	800755c <xQueueGenericReceive>
 800261e:	2801      	cmp	r0, #1
 8002620:	d003      	beq.n	800262a <StartJ1uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002622:	2001      	movs	r0, #1
 8002624:	f004 fb0f 	bl	8006c46 <osDelay>
 8002628:	e7f2      	b.n	8002610 <StartJ1uartport+0x4>
 800262a:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 800262c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002630:	429c      	cmp	r4, r3
 8002632:	d2ed      	bcs.n	8002610 <StartJ1uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002634:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002638:	4423      	add	r3, r4
 800263a:	3b80      	subs	r3, #128	; 0x80
 800263c:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002640:	ab08      	add	r3, sp, #32
 8002642:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8002646:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800264a:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 800264e:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002656:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 800265a:	3401      	adds	r4, #1
 800265c:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart2,datatosend,3,1);
 800265e:	2301      	movs	r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	a901      	add	r1, sp, #4
 8002664:	4804      	ldr	r0, [pc, #16]	; (8002678 <StartJ1uartport+0x6c>)
 8002666:	f004 f9f6 	bl	8006a56 <HAL_UART_Transmit>
				osDelay(1);
 800266a:	2001      	movs	r0, #1
 800266c:	f004 faeb 	bl	8006c46 <osDelay>
				if(motornum>=anglevector.servonum)
 8002670:	e7dc      	b.n	800262c <StartJ1uartport+0x20>
 8002672:	bf00      	nop
 8002674:	20003ee8 	.word	0x20003ee8
 8002678:	20004534 	.word	0x20004534

0800267c <StartJ2uartport>:
}

/* StartJ2uartport function */
//uart7
void StartJ2uartport(void const * argument)
{
 800267c:	b510      	push	{r4, lr}
 800267e:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J2vectorqueueHandle,&anglevector,0)==pdPASS)
 8002680:	2301      	movs	r3, #1
 8002682:	2200      	movs	r2, #0
 8002684:	a902      	add	r1, sp, #8
 8002686:	4817      	ldr	r0, [pc, #92]	; (80026e4 <StartJ2uartport+0x68>)
 8002688:	6800      	ldr	r0, [r0, #0]
 800268a:	f004 ff67 	bl	800755c <xQueueGenericReceive>
 800268e:	2801      	cmp	r0, #1
 8002690:	d003      	beq.n	800269a <StartJ2uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f004 fad7 	bl	8006c46 <osDelay>
 8002698:	e7f2      	b.n	8002680 <StartJ2uartport+0x4>
 800269a:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 800269c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80026a0:	429c      	cmp	r4, r3
 80026a2:	d2ed      	bcs.n	8002680 <StartJ2uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80026a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80026a8:	4423      	add	r3, r4
 80026aa:	3b80      	subs	r3, #128	; 0x80
 80026ac:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80026b0:	ab08      	add	r3, sp, #32
 80026b2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80026b6:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 80026ba:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 80026be:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80026c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c6:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 80026ca:	3401      	adds	r4, #1
 80026cc:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart7,datatosend,3,1);
 80026ce:	2301      	movs	r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	a901      	add	r1, sp, #4
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <StartJ2uartport+0x6c>)
 80026d6:	f004 f9be 	bl	8006a56 <HAL_UART_Transmit>
				osDelay(1);
 80026da:	2001      	movs	r0, #1
 80026dc:	f004 fab3 	bl	8006c46 <osDelay>
				if(motornum>=anglevector.servonum)
 80026e0:	e7dc      	b.n	800269c <StartJ2uartport+0x20>
 80026e2:	bf00      	nop
 80026e4:	20003efc 	.word	0x20003efc
 80026e8:	200040cc 	.word	0x200040cc

080026ec <StartJ3uartport>:
}

/* StartJ3uartport function */
//uart5
void StartJ3uartport(void const * argument)
{
 80026ec:	b510      	push	{r4, lr}
 80026ee:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J3vectorqueueHandle,&anglevector,0)==pdPASS)
 80026f0:	2301      	movs	r3, #1
 80026f2:	2200      	movs	r2, #0
 80026f4:	a902      	add	r1, sp, #8
 80026f6:	4817      	ldr	r0, [pc, #92]	; (8002754 <StartJ3uartport+0x68>)
 80026f8:	6800      	ldr	r0, [r0, #0]
 80026fa:	f004 ff2f 	bl	800755c <xQueueGenericReceive>
 80026fe:	2801      	cmp	r0, #1
 8002700:	d003      	beq.n	800270a <StartJ3uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002702:	2001      	movs	r0, #1
 8002704:	f004 fa9f 	bl	8006c46 <osDelay>
 8002708:	e7f2      	b.n	80026f0 <StartJ3uartport+0x4>
 800270a:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 800270c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002710:	429c      	cmp	r4, r3
 8002712:	d2ed      	bcs.n	80026f0 <StartJ3uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002714:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002718:	4423      	add	r3, r4
 800271a:	3b80      	subs	r3, #128	; 0x80
 800271c:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002720:	ab08      	add	r3, sp, #32
 8002722:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8002726:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800272a:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 800272e:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002736:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 800273a:	3401      	adds	r4, #1
 800273c:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart5,datatosend,3,1);
 800273e:	2301      	movs	r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	a901      	add	r1, sp, #4
 8002744:	4804      	ldr	r0, [pc, #16]	; (8002758 <StartJ3uartport+0x6c>)
 8002746:	f004 f986 	bl	8006a56 <HAL_UART_Transmit>
				osDelay(1);
 800274a:	2001      	movs	r0, #1
 800274c:	f004 fa7b 	bl	8006c46 <osDelay>
				if(motornum>=anglevector.servonum)
 8002750:	e7dc      	b.n	800270c <StartJ3uartport+0x20>
 8002752:	bf00      	nop
 8002754:	20003ef8 	.word	0x20003ef8
 8002758:	20004244 	.word	0x20004244

0800275c <StartJ4uartport>:
}

/* StartJ4uartport function */
//uart4
void StartJ4uartport(void const * argument)
{
 800275c:	b510      	push	{r4, lr}
 800275e:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J4vectorqueueHandle,&anglevector,0)==pdPASS)
 8002760:	2301      	movs	r3, #1
 8002762:	2200      	movs	r2, #0
 8002764:	a902      	add	r1, sp, #8
 8002766:	4817      	ldr	r0, [pc, #92]	; (80027c4 <StartJ4uartport+0x68>)
 8002768:	6800      	ldr	r0, [r0, #0]
 800276a:	f004 fef7 	bl	800755c <xQueueGenericReceive>
 800276e:	2801      	cmp	r0, #1
 8002770:	d003      	beq.n	800277a <StartJ4uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002772:	2001      	movs	r0, #1
 8002774:	f004 fa67 	bl	8006c46 <osDelay>
 8002778:	e7f2      	b.n	8002760 <StartJ4uartport+0x4>
 800277a:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 800277c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002780:	429c      	cmp	r4, r3
 8002782:	d2ed      	bcs.n	8002760 <StartJ4uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002784:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002788:	4423      	add	r3, r4
 800278a:	3b80      	subs	r3, #128	; 0x80
 800278c:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002790:	ab08      	add	r3, sp, #32
 8002792:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8002796:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800279a:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 800279e:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80027a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a6:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 80027aa:	3401      	adds	r4, #1
 80027ac:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart4,datatosend,3,1);
 80027ae:	2301      	movs	r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	a901      	add	r1, sp, #4
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <StartJ4uartport+0x6c>)
 80027b6:	f004 f94e 	bl	8006a56 <HAL_UART_Transmit>
				osDelay(1);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f004 fa43 	bl	8006c46 <osDelay>
				if(motornum>=anglevector.servonum)
 80027c0:	e7dc      	b.n	800277c <StartJ4uartport+0x20>
 80027c2:	bf00      	nop
 80027c4:	20003f00 	.word	0x20003f00
 80027c8:	200044b4 	.word	0x200044b4

080027cc <StartJ5uartport>:
}

/* StartJ5uartport function */
//uart3
void StartJ5uartport(void const * argument)
{
 80027cc:	b510      	push	{r4, lr}
 80027ce:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J5vectorqueueHandle,&anglevector,0)==pdPASS)
 80027d0:	2301      	movs	r3, #1
 80027d2:	2200      	movs	r2, #0
 80027d4:	a902      	add	r1, sp, #8
 80027d6:	4817      	ldr	r0, [pc, #92]	; (8002834 <StartJ5uartport+0x68>)
 80027d8:	6800      	ldr	r0, [r0, #0]
 80027da:	f004 febf 	bl	800755c <xQueueGenericReceive>
 80027de:	2801      	cmp	r0, #1
 80027e0:	d003      	beq.n	80027ea <StartJ5uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f004 fa2f 	bl	8006c46 <osDelay>
 80027e8:	e7f2      	b.n	80027d0 <StartJ5uartport+0x4>
 80027ea:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 80027ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80027f0:	429c      	cmp	r4, r3
 80027f2:	d2ed      	bcs.n	80027d0 <StartJ5uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80027f4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80027f8:	4423      	add	r3, r4
 80027fa:	3b80      	subs	r3, #128	; 0x80
 80027fc:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002800:	ab08      	add	r3, sp, #32
 8002802:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8002806:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800280a:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 800280e:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002816:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 800281a:	3401      	adds	r4, #1
 800281c:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart3,datatosend,3,1);
 800281e:	2301      	movs	r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	a901      	add	r1, sp, #4
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <StartJ5uartport+0x6c>)
 8002826:	f004 f916 	bl	8006a56 <HAL_UART_Transmit>
				osDelay(1);
 800282a:	2001      	movs	r0, #1
 800282c:	f004 fa0b 	bl	8006c46 <osDelay>
				if(motornum>=anglevector.servonum)
 8002830:	e7dc      	b.n	80027ec <StartJ5uartport+0x20>
 8002832:	bf00      	nop
 8002834:	20003edc 	.word	0x20003edc
 8002838:	200041c4 	.word	0x200041c4

0800283c <StartJ6uartport>:
}

/* StartJ6uartport function */
//uart1
void StartJ6uartport(void const * argument)
{
 800283c:	b510      	push	{r4, lr}
 800283e:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J6vectorqueueHandle,&anglevector,0)==pdPASS)
 8002840:	2301      	movs	r3, #1
 8002842:	2200      	movs	r2, #0
 8002844:	a902      	add	r1, sp, #8
 8002846:	4817      	ldr	r0, [pc, #92]	; (80028a4 <StartJ6uartport+0x68>)
 8002848:	6800      	ldr	r0, [r0, #0]
 800284a:	f004 fe87 	bl	800755c <xQueueGenericReceive>
 800284e:	2801      	cmp	r0, #1
 8002850:	d003      	beq.n	800285a <StartJ6uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002852:	2001      	movs	r0, #1
 8002854:	f004 f9f7 	bl	8006c46 <osDelay>
 8002858:	e7f2      	b.n	8002840 <StartJ6uartport+0x4>
 800285a:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 800285c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002860:	429c      	cmp	r4, r3
 8002862:	d2ed      	bcs.n	8002840 <StartJ6uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002864:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002868:	4423      	add	r3, r4
 800286a:	3b80      	subs	r3, #128	; 0x80
 800286c:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002870:	ab08      	add	r3, sp, #32
 8002872:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8002876:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800287a:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 800287e:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002886:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 800288a:	3401      	adds	r4, #1
 800288c:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart1,datatosend,3,1);
 800288e:	2301      	movs	r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	a901      	add	r1, sp, #4
 8002894:	4804      	ldr	r0, [pc, #16]	; (80028a8 <StartJ6uartport+0x6c>)
 8002896:	f004 f8de 	bl	8006a56 <HAL_UART_Transmit>
				osDelay(1);
 800289a:	2001      	movs	r0, #1
 800289c:	f004 f9d3 	bl	8006c46 <osDelay>
				if(motornum>=anglevector.servonum)
 80028a0:	e7dc      	b.n	800285c <StartJ6uartport+0x20>
 80028a2:	bf00      	nop
 80028a4:	20003ee4 	.word	0x20003ee4
 80028a8:	200043b4 	.word	0x200043b4

080028ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028ac:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ae:	4915      	ldr	r1, [pc, #84]	; (8002904 <SystemInit+0x58>)
 80028b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <SystemInit+0x5c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	480f      	ldr	r0, [pc, #60]	; (800290c <SystemInit+0x60>)
 80028ce:	4020      	ands	r0, r4
 80028d0:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028d6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80028ee:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 80028f2:	2201      	movs	r2, #1
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <SystemInit+0x64>)
 80028f6:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80028f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028fc:	608b      	str	r3, [r1, #8]
#endif

}
 80028fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00
 8002908:	58024400 	.word	0x58024400
 800290c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002910:	51008108 	.word	0x51008108

08002914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b510      	push	{r4, lr}
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002916:	2003      	movs	r0, #3
 8002918:	f000 fd4e 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff f9c5 	bl	8001cac <HAL_InitTick>
 8002922:	b110      	cbz	r0, 800292a <HAL_Init+0x16>
  {
    return HAL_ERROR;
 8002924:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8002926:	4620      	mov	r0, r4
 8002928:	bd10      	pop	{r4, pc}
 800292a:	4604      	mov	r4, r0
  HAL_MspInit();
 800292c:	f7ff f97c 	bl	8001c28 <HAL_MspInit>
  return HAL_OK;
 8002930:	e7f9      	b.n	8002926 <HAL_Init+0x12>
	...

08002934 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_IncTick+0x10>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	4a03      	ldr	r2, [pc, #12]	; (8002948 <HAL_IncTick+0x14>)
 800293a:	6811      	ldr	r1, [r2, #0]
 800293c:	440b      	add	r3, r1
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000098 	.word	0x20000098
 8002948:	20000124 	.word	0x20000124

0800294c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800294c:	4b01      	ldr	r3, [pc, #4]	; (8002954 <HAL_GetTick+0x8>)
 800294e:	6818      	ldr	r0, [r3, #0]
}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000124 	.word	0x20000124

08002958 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002958:	b530      	push	{r4, r5, lr}
 800295a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if(hadc == NULL)
 8002960:	2800      	cmp	r0, #0
 8002962:	f000 8167 	beq.w	8002c34 <HAL_ADC_Init+0x2dc>
 8002966:	4604      	mov	r4, r0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));


  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002968:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800296a:	b1e3      	cbz	r3, 80029a6 <HAL_ADC_Init+0x4e>
  }


  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state                        */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002974:	d003      	beq.n	800297e <HAL_ADC_Init+0x26>
  {
    /* Exit deep power down mode */
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800297c:	609a      	str	r2, [r3, #8]
       be relaunched or a previously saved calibration factor
       re-applied once the ADC voltage regulator is enabled   */
  }


  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002986:	d11b      	bne.n	80029c0 <HAL_ADC_Init+0x68>
  {
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800298e:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time                                       */
    /* Wait loop initialization and execution                                 */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8002990:	4ba9      	ldr	r3, [pc, #676]	; (8002c38 <HAL_ADC_Init+0x2e0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4aa9      	ldr	r2, [pc, #676]	; (8002c3c <HAL_ADC_Init+0x2e4>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0cdb      	lsrs	r3, r3, #19
 800299c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029a0:	005a      	lsls	r2, r3, #1
 80029a2:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80029a4:	e009      	b.n	80029ba <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 80029a6:	f7fe fe17 	bl	80015d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80029aa:	2300      	movs	r3, #0
 80029ac:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80029ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80029b2:	e7db      	b.n	800296c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80029b4:	9b01      	ldr	r3, [sp, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80029ba:	9b01      	ldr	r3, [sp, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <HAL_ADC_Init+0x5c>


  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80029c8:	d143      	bne.n	8002a52 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029cc:	f042 0210 	orr.w	r2, r2, #16
 80029d0:	6562      	str	r2, [r4, #84]	; 0x54

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	65a2      	str	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029da:	2001      	movs	r0, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029de:	f012 0f10 	tst.w	r2, #16
 80029e2:	f040 8120 	bne.w	8002c26 <HAL_ADC_Init+0x2ce>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 80029e6:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029e8:	f012 0f04 	tst.w	r2, #4
 80029ec:	f040 811b 	bne.w	8002c26 <HAL_ADC_Init+0x2ce>
  {

    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80029f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029f2:	f042 0202 	orr.w	r2, r2, #2
 80029f6:	6562      	str	r2, [r4, #84]	; 0x54

    /* Configuration of common ADC parameters                                 */

    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 80029f8:	4a91      	ldr	r2, [pc, #580]	; (8002c40 <HAL_ADC_Init+0x2e8>)
 80029fa:	4992      	ldr	r1, [pc, #584]	; (8002c44 <HAL_ADC_Init+0x2ec>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bf18      	it	ne
 8002a00:	428b      	cmpne	r3, r1
 8002a02:	d128      	bne.n	8002a56 <HAL_ADC_Init+0xfe>
    {
      /* Pointer to the common control register                               */
      tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8002a04:	f501 7140 	add.w	r1, r1, #768	; 0x300
    }

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	f002 0203 	and.w	r2, r2, #3
 8002a0e:	2a01      	cmp	r2, #1
 8002a10:	d023      	beq.n	8002a5a <HAL_ADC_Init+0x102>
 8002a12:	2200      	movs	r2, #0
 8002a14:	2a00      	cmp	r2, #0
 8002a16:	d17a      	bne.n	8002b0e <HAL_ADC_Init+0x1b6>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8002a18:	4d8a      	ldr	r5, [pc, #552]	; (8002c44 <HAL_ADC_Init+0x2ec>)
 8002a1a:	42ab      	cmp	r3, r5
 8002a1c:	d025      	beq.n	8002a6a <HAL_ADC_Init+0x112>
 8002a1e:	4d88      	ldr	r5, [pc, #544]	; (8002c40 <HAL_ADC_Init+0x2e8>)
 8002a20:	42ab      	cmp	r3, r5
 8002a22:	d03f      	beq.n	8002aa4 <HAL_ADC_Init+0x14c>
 8002a24:	4b87      	ldr	r3, [pc, #540]	; (8002c44 <HAL_ADC_Init+0x2ec>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d05b      	beq.n	8002ae8 <HAL_ADC_Init+0x190>
 8002a30:	4613      	mov	r3, r2
 8002a32:	f013 0f01 	tst.w	r3, #1
 8002a36:	d160      	bne.n	8002afa <HAL_ADC_Init+0x1a2>
 8002a38:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_ADC_Init+0x2e8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d15b      	bne.n	8002afc <HAL_ADC_Init+0x1a4>
 8002a44:	4b7e      	ldr	r3, [pc, #504]	; (8002c40 <HAL_ADC_Init+0x2e8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f013 0f01 	tst.w	r3, #1
 8002a4c:	d056      	beq.n	8002afc <HAL_ADC_Init+0x1a4>
 8002a4e:	2201      	movs	r2, #1
 8002a50:	e054      	b.n	8002afc <HAL_ADC_Init+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a52:	2000      	movs	r0, #0
 8002a54:	e7c2      	b.n	80029dc <HAL_ADC_Init+0x84>
      tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8002a56:	497c      	ldr	r1, [pc, #496]	; (8002c48 <HAL_ADC_Init+0x2f0>)
 8002a58:	e7d6      	b.n	8002a08 <HAL_ADC_Init+0xb0>
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f012 0f01 	tst.w	r2, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Init+0x10e>
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d6      	b.n	8002a14 <HAL_ADC_Init+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	e7d4      	b.n	8002a14 <HAL_ADC_Init+0xbc>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8002a6a:	4b75      	ldr	r3, [pc, #468]	; (8002c40 <HAL_ADC_Init+0x2e8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d008      	beq.n	8002a88 <HAL_ADC_Init+0x130>
 8002a76:	4b75      	ldr	r3, [pc, #468]	; (8002c4c <HAL_ADC_Init+0x2f4>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d009      	beq.n	8002a96 <HAL_ADC_Init+0x13e>
 8002a82:	f082 0201 	eor.w	r2, r2, #1
 8002a86:	e03b      	b.n	8002b00 <HAL_ADC_Init+0x1a8>
 8002a88:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_ADC_Init+0x2e8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f013 0f01 	tst.w	r3, #1
 8002a90:	d0f1      	beq.n	8002a76 <HAL_ADC_Init+0x11e>
 8002a92:	2201      	movs	r2, #1
 8002a94:	e7f5      	b.n	8002a82 <HAL_ADC_Init+0x12a>
 8002a96:	4b6d      	ldr	r3, [pc, #436]	; (8002c4c <HAL_ADC_Init+0x2f4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f013 0f01 	tst.w	r3, #1
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_ADC_Init+0x12a>
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	e7ee      	b.n	8002a82 <HAL_ADC_Init+0x12a>
 8002aa4:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_ADC_Init+0x2ec>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d00b      	beq.n	8002ac8 <HAL_ADC_Init+0x170>
 8002ab0:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <HAL_ADC_Init+0x2f4>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d00c      	beq.n	8002ad6 <HAL_ADC_Init+0x17e>
 8002abc:	4613      	mov	r3, r2
 8002abe:	f013 0f01 	tst.w	r3, #1
 8002ac2:	d0b9      	beq.n	8002a38 <HAL_ADC_Init+0xe0>
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	e019      	b.n	8002afc <HAL_ADC_Init+0x1a4>
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <HAL_ADC_Init+0x2ec>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f013 0f01 	tst.w	r3, #1
 8002ad0:	d0ee      	beq.n	8002ab0 <HAL_ADC_Init+0x158>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e7f3      	b.n	8002abe <HAL_ADC_Init+0x166>
 8002ad6:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_ADC_Init+0x2f4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f013 0f01 	tst.w	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_Init+0x18c>
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	e7ec      	b.n	8002abe <HAL_ADC_Init+0x166>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e7ea      	b.n	8002abe <HAL_ADC_Init+0x166>
 8002ae8:	4b56      	ldr	r3, [pc, #344]	; (8002c44 <HAL_ADC_Init+0x2ec>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f013 0f01 	tst.w	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Init+0x19e>
 8002af2:	4613      	mov	r3, r2
 8002af4:	e79d      	b.n	8002a32 <HAL_ADC_Init+0xda>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e79b      	b.n	8002a32 <HAL_ADC_Init+0xda>
 8002afa:	2201      	movs	r2, #1
 8002afc:	f082 0201 	eor.w	r2, r2, #1
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002b00:	b12a      	cbz	r2, 8002b0e <HAL_ADC_Init+0x1b6>
      /*     HAL_ADCEx_MultiModeConfigChannel())                              */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */

      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 8002b02:	688b      	ldr	r3, [r1, #8]
 8002b04:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002b08:	6862      	ldr	r2, [r4, #4]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002b0e:	7d63      	ldrb	r3, [r4, #21]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b14:	fa92 f2a2 	rbit	r2, r2
 8002b18:	fab2 f282 	clz	r2, r2
 8002b1c:	4093      	lsls	r3, r2
                 hadc->Init.Overrun                                          |
 8002b1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002b20:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                       |
 8002b22:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.Overrun                                          |
 8002b24:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8002b26:	7f21      	ldrb	r1, [r4, #28]
 8002b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002b38:	4313      	orrs	r3, r2

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b3a:	2901      	cmp	r1, #1
 8002b3c:	d048      	beq.n	8002bd0 <HAL_ADC_Init+0x278>
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b40:	2a01      	cmp	r2, #1
 8002b42:	d003      	beq.n	8002b4c <HAL_ADC_Init+0x1f4>
        && (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 8002b44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b46:	b109      	cbz	r1, 8002b4c <HAL_ADC_Init+0x1f4>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4313      	orrs	r3, r2
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b4c:	6821      	ldr	r1, [r4, #0]
 8002b4e:	68cd      	ldr	r5, [r1, #12]
 8002b50:	4a3f      	ldr	r2, [pc, #252]	; (8002c50 <HAL_ADC_Init+0x2f8>)
 8002b52:	402a      	ands	r2, r5
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    /*  - Boost Mode                      BoostMode                           */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b58:	6822      	ldr	r2, [r4, #0]
 8002b5a:	6893      	ldr	r3, [r2, #8]
 8002b5c:	f013 0f0c 	tst.w	r3, #12
 8002b60:	d127      	bne.n	8002bb2 <HAL_ADC_Init+0x25a>
    {
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002b62:	7d23      	ldrb	r3, [r4, #20]
 8002b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b68:	fa91 f1a1 	rbit	r1, r1
 8002b6c:	fab1 f181 	clz	r1, r1
 8002b70:	408b      	lsls	r3, r1
                  ADC_CFGR_DMACONTREQ(hadc->Init.ConversionDataManagement) );
 8002b72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002b74:	430b      	orrs	r3, r1

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b76:	68d5      	ldr	r5, [r2, #12]
 8002b78:	4936      	ldr	r1, [pc, #216]	; (8002c54 <HAL_ADC_Init+0x2fc>)
 8002b7a:	4029      	ands	r1, r5
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	60d3      	str	r3, [r2, #12]


      if (hadc->Init.OversamplingMode == ENABLE)
 8002b80:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d02e      	beq.n	8002be6 <HAL_ADC_Init+0x28e>
                                         hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	6913      	ldr	r3, [r2, #16]
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6113      	str	r3, [r2, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	6913      	ldr	r3, [r2, #16]
 8002b96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6113      	str	r3, [r2, #16]

      /* Configure the BOOST Mode */
      if(hadc->Init.BoostMode == ENABLE)
 8002ba0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d02f      	beq.n	8002c08 <HAL_ADC_Init+0x2b0>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	6893      	ldr	r3, [r2, #8]
 8002bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb0:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bb2:	68e3      	ldr	r3, [r4, #12]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d02d      	beq.n	8002c14 <HAL_ADC_Init+0x2bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bb8:	6822      	ldr	r2, [r4, #0]
 8002bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002bbc:	f023 030f 	bic.w	r3, r3, #15
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
    }


    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bc4:	f023 0303 	bic.w	r3, r3, #3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6563      	str	r3, [r4, #84]	; 0x54
 8002bce:	e02f      	b.n	8002c30 <HAL_ADC_Init+0x2d8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bd0:	6a22      	ldr	r2, [r4, #32]
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8002bd8:	fa91 f1a1 	rbit	r1, r1
 8002bdc:	fab1 f181 	clz	r1, r1
 8002be0:	408a      	lsls	r2, r1
 8002be2:	4313      	orrs	r3, r2
 8002be4:	e7ab      	b.n	8002b3e <HAL_ADC_Init+0x1e6>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002be6:	6821      	ldr	r1, [r4, #0]
 8002be8:	690a      	ldr	r2, [r1, #16]
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_ADC_Init+0x300>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002bf0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bf2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002bf6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002bf8:	432a      	orrs	r2, r5
 8002bfa:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002bfc:	432a      	orrs	r2, r5
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	610b      	str	r3, [r1, #16]
 8002c06:	e7c4      	b.n	8002b92 <HAL_ADC_Init+0x23a>
        SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8002c08:	6822      	ldr	r2, [r4, #0]
 8002c0a:	6893      	ldr	r3, [r2, #8]
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6093      	str	r3, [r2, #8]
 8002c12:	e7ce      	b.n	8002bb2 <HAL_ADC_Init+0x25a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c14:	6821      	ldr	r1, [r4, #0]
 8002c16:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002c18:	f023 030f 	bic.w	r3, r3, #15
 8002c1c:	69a2      	ldr	r2, [r4, #24]
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	4313      	orrs	r3, r2
 8002c22:	630b      	str	r3, [r1, #48]	; 0x30
 8002c24:	e7cd      	b.n	8002bc2 <HAL_ADC_Init+0x26a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c28:	f043 0310 	orr.w	r3, r3, #16
 8002c2c:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c2e:	2001      	movs	r0, #1


  /* Return function status */
  return tmp_hal_status;

}
 8002c30:	b003      	add	sp, #12
 8002c32:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002c34:	2001      	movs	r0, #1
 8002c36:	e7fb      	b.n	8002c30 <HAL_ADC_Init+0x2d8>
 8002c38:	20000090 	.word	0x20000090
 8002c3c:	431bde83 	.word	0x431bde83
 8002c40:	40022100 	.word	0x40022100
 8002c44:	40022000 	.word	0x40022000
 8002c48:	58026300 	.word	0x58026300
 8002c4c:	58026000 	.word	0x58026000
 8002c50:	fff0c003 	.word	0xfff0c003
 8002c54:	ffffbffc 	.word	0xffffbffc
 8002c58:	fc00f81e 	.word	0xfc00f81e

08002c5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8002c60:	2200      	movs	r2, #0
 8002c62:	9201      	str	r2, [sp, #4]
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c64:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8002c68:	2a01      	cmp	r2, #1
 8002c6a:	f000 82f7 	beq.w	800325c <HAL_ADC_ConfigChannel+0x600>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2201      	movs	r2, #1
 8002c72:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  /*  - Preselection of ADC inputs                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c76:	6802      	ldr	r2, [r0, #0]
 8002c78:	6890      	ldr	r0, [r2, #8]
 8002c7a:	f010 0f04 	tst.w	r0, #4
 8002c7e:	f040 82e1 	bne.w	8003244 <HAL_ADC_ConfigChannel+0x5e8>
  {
    /* ADC channels preselction */
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 8002c82:	69d0      	ldr	r0, [r2, #28]
 8002c84:	680d      	ldr	r5, [r1, #0]
 8002c86:	2401      	movs	r4, #1
 8002c88:	40ac      	lsls	r4, r5
 8002c8a:	4320      	orrs	r0, r4
 8002c8c:	61d0      	str	r0, [r2, #28]

    /* Regular sequence configuration */
    /* Clear the old SQx bits then set the new ones for the selected rank */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 8002c8e:	684a      	ldr	r2, [r1, #4]
 8002c90:	2a04      	cmp	r2, #4
 8002c92:	d84f      	bhi.n	8002d34 <HAL_ADC_ConfigChannel+0xd8>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c94:	681e      	ldr	r6, [r3, #0]
 8002c96:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8002c98:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 8002c9c:	fa90 f4a0 	rbit	r4, r0
 8002ca0:	fab4 f484 	clz	r4, r4
 8002ca4:	fb04 f402 	mul.w	r4, r4, r2
 8002ca8:	271f      	movs	r7, #31
 8002caa:	fa07 f404 	lsl.w	r4, r7, r4
 8002cae:	ea25 0504 	bic.w	r5, r5, r4
 8002cb2:	680c      	ldr	r4, [r1, #0]
 8002cb4:	fa90 f0a0 	rbit	r0, r0
 8002cb8:	fab0 f080 	clz	r0, r0
 8002cbc:	fb00 f202 	mul.w	r2, r0, r2
 8002cc0:	fa04 f202 	lsl.w	r2, r4, r2
 8002cc4:	432a      	orrs	r2, r5
 8002cc6:	6332      	str	r2, [r6, #48]	; 0x30
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	6890      	ldr	r0, [r2, #8]
 8002ccc:	f010 0f0c 	tst.w	r0, #12
 8002cd0:	f040 816c 	bne.w	8002fac <HAL_ADC_ConfigChannel+0x350>
    {

      /* Channel sampling time configuration */
      /* Clear the old sample time then set the new one for the selected channel */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	2809      	cmp	r0, #9
 8002cd8:	f240 8084 	bls.w	8002de4 <HAL_ADC_ConfigChannel+0x188>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002cdc:	6996      	ldr	r6, [r2, #24]
 8002cde:	2438      	movs	r4, #56	; 0x38
 8002ce0:	fa94 f5a4 	rbit	r5, r4
 8002ce4:	fab5 f585 	clz	r5, r5
 8002ce8:	380a      	subs	r0, #10
 8002cea:	fb00 f505 	mul.w	r5, r0, r5
 8002cee:	2707      	movs	r7, #7
 8002cf0:	fa07 f505 	lsl.w	r5, r7, r5
 8002cf4:	ea26 0605 	bic.w	r6, r6, r5
 8002cf8:	688d      	ldr	r5, [r1, #8]
 8002cfa:	fa94 f4a4 	rbit	r4, r4
 8002cfe:	fab4 f484 	clz	r4, r4
 8002d02:	fb04 f000 	mul.w	r0, r4, r0
 8002d06:	fa05 f000 	lsl.w	r0, r5, r0
 8002d0a:	4330      	orrs	r0, r6
 8002d0c:	6190      	str	r0, [r2, #24]

      /* Configure the offset: offset enable/disable, channel, offset value, Signed saturation feature */
     
      /* Shift the offset in function of the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d0e:	6948      	ldr	r0, [r1, #20]
 8002d10:	681c      	ldr	r4, [r3, #0]
 8002d12:	68e2      	ldr	r2, [r4, #12]
 8002d14:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8002d18:	0052      	lsls	r2, r2, #1
 8002d1a:	fa00 f202 	lsl.w	r2, r0, r2
     
      switch (sConfig->OffsetNumber)
 8002d1e:	6908      	ldr	r0, [r1, #16]
 8002d20:	3801      	subs	r0, #1
 8002d22:	2803      	cmp	r0, #3
 8002d24:	f200 8107 	bhi.w	8002f36 <HAL_ADC_ConfigChannel+0x2da>
 8002d28:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002d2c:	00980075 	.word	0x00980075
 8002d30:	00e000bc 	.word	0x00e000bc
    else if (sConfig->Rank < 10)
 8002d34:	2a09      	cmp	r2, #9
 8002d36:	d81b      	bhi.n	8002d70 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->SQR2,
 8002d38:	681e      	ldr	r6, [r3, #0]
 8002d3a:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8002d3c:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 8002d40:	fa90 f5a0 	rbit	r5, r0
 8002d44:	fab5 f585 	clz	r5, r5
 8002d48:	3a05      	subs	r2, #5
 8002d4a:	fb02 f505 	mul.w	r5, r2, r5
 8002d4e:	271f      	movs	r7, #31
 8002d50:	fa07 f505 	lsl.w	r5, r7, r5
 8002d54:	ea24 0405 	bic.w	r4, r4, r5
 8002d58:	680d      	ldr	r5, [r1, #0]
 8002d5a:	fa90 f0a0 	rbit	r0, r0
 8002d5e:	fab0 f080 	clz	r0, r0
 8002d62:	fb00 f202 	mul.w	r2, r0, r2
 8002d66:	fa05 f202 	lsl.w	r2, r5, r2
 8002d6a:	4322      	orrs	r2, r4
 8002d6c:	6372      	str	r2, [r6, #52]	; 0x34
 8002d6e:	e7ab      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x6c>
    else if (sConfig->Rank < 15)
 8002d70:	2a0e      	cmp	r2, #14
 8002d72:	d81b      	bhi.n	8002dac <HAL_ADC_ConfigChannel+0x150>
      MODIFY_REG(hadc->Instance->SQR3,
 8002d74:	681e      	ldr	r6, [r3, #0]
 8002d76:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8002d78:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 8002d7c:	fa90 f5a0 	rbit	r5, r0
 8002d80:	fab5 f585 	clz	r5, r5
 8002d84:	3a0a      	subs	r2, #10
 8002d86:	fb02 f505 	mul.w	r5, r2, r5
 8002d8a:	271f      	movs	r7, #31
 8002d8c:	fa07 f505 	lsl.w	r5, r7, r5
 8002d90:	ea24 0405 	bic.w	r4, r4, r5
 8002d94:	680d      	ldr	r5, [r1, #0]
 8002d96:	fa90 f0a0 	rbit	r0, r0
 8002d9a:	fab0 f080 	clz	r0, r0
 8002d9e:	fb00 f202 	mul.w	r2, r0, r2
 8002da2:	fa05 f202 	lsl.w	r2, r5, r2
 8002da6:	4322      	orrs	r2, r4
 8002da8:	63b2      	str	r2, [r6, #56]	; 0x38
 8002daa:	e78d      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x6c>
      MODIFY_REG(hadc->Instance->SQR4,
 8002dac:	681e      	ldr	r6, [r3, #0]
 8002dae:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
 8002db0:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 8002db4:	fa90 f4a0 	rbit	r4, r0
 8002db8:	fab4 f484 	clz	r4, r4
 8002dbc:	3a0f      	subs	r2, #15
 8002dbe:	fb02 f404 	mul.w	r4, r2, r4
 8002dc2:	271f      	movs	r7, #31
 8002dc4:	fa07 f404 	lsl.w	r4, r7, r4
 8002dc8:	ea25 0504 	bic.w	r5, r5, r4
 8002dcc:	680c      	ldr	r4, [r1, #0]
 8002dce:	fa90 f0a0 	rbit	r0, r0
 8002dd2:	fab0 f080 	clz	r0, r0
 8002dd6:	fb00 f202 	mul.w	r2, r0, r2
 8002dda:	fa04 f202 	lsl.w	r2, r4, r2
 8002dde:	432a      	orrs	r2, r5
 8002de0:	63f2      	str	r2, [r6, #60]	; 0x3c
 8002de2:	e771      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x6c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002de4:	6956      	ldr	r6, [r2, #20]
 8002de6:	2438      	movs	r4, #56	; 0x38
 8002de8:	fa94 f5a4 	rbit	r5, r4
 8002dec:	fab5 f585 	clz	r5, r5
 8002df0:	fb05 f500 	mul.w	r5, r5, r0
 8002df4:	2707      	movs	r7, #7
 8002df6:	fa07 f505 	lsl.w	r5, r7, r5
 8002dfa:	ea26 0605 	bic.w	r6, r6, r5
 8002dfe:	688d      	ldr	r5, [r1, #8]
 8002e00:	fa94 f4a4 	rbit	r4, r4
 8002e04:	fab4 f484 	clz	r4, r4
 8002e08:	fb04 f000 	mul.w	r0, r4, r0
 8002e0c:	fa05 f000 	lsl.w	r0, r5, r0
 8002e10:	4330      	orrs	r0, r6
 8002e12:	6150      	str	r0, [r2, #20]
 8002e14:	e77b      	b.n	8002d0e <HAL_ADC_ConfigChannel+0xb2>
         /* - Enable offset                                                      */
         /* - Set channel number                                                 */
         /* - Set offset value                                                   */
         /* - Set Right shift after offset application                           */
        case ADC_OFFSET_1:
           MODIFY_REG(hadc->Instance->OFR1,
 8002e16:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002e18:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8002e1c:	6808      	ldr	r0, [r1, #0]
 8002e1e:	f04f 46f8 	mov.w	r6, #2080374784	; 0x7c000000
 8002e22:	fa96 f6a6 	rbit	r6, r6
 8002e26:	fab6 f686 	clz	r6, r6
 8002e2a:	40b0      	lsls	r0, r6
 8002e2c:	4302      	orrs	r2, r0
 8002e2e:	432a      	orrs	r2, r5
 8002e30:	6622      	str	r2, [r4, #96]	; 0x60
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT1, sConfig->OffsetRightShift);
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	6902      	ldr	r2, [r0, #16]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3a:	7e0c      	ldrb	r4, [r1, #24]
 8002e3c:	4322      	orrs	r2, r4
 8002e3e:	6102      	str	r2, [r0, #16]
           /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8002e40:	7e4a      	ldrb	r2, [r1, #25]
 8002e42:	b12a      	cbz	r2, 8002e50 <HAL_ADC_ConfigChannel+0x1f4>
           {
              SET_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002e48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e4c:	6602      	str	r2, [r0, #96]	; 0x60
 8002e4e:	e0ad      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002e54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e58:	6602      	str	r2, [r0, #96]	; 0x60
 8002e5a:	e0a7      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
           }
          break;
        
        case ADC_OFFSET_2:
          MODIFY_REG(hadc->Instance->OFR2,
 8002e5c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002e5e:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8002e62:	6808      	ldr	r0, [r1, #0]
 8002e64:	f04f 46f8 	mov.w	r6, #2080374784	; 0x7c000000
 8002e68:	fa96 f6a6 	rbit	r6, r6
 8002e6c:	fab6 f686 	clz	r6, r6
 8002e70:	40b0      	lsls	r0, r6
 8002e72:	4302      	orrs	r2, r0
 8002e74:	432a      	orrs	r2, r5
 8002e76:	6662      	str	r2, [r4, #100]	; 0x64
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT2, (sConfig->OffsetRightShift)<<1);
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	6902      	ldr	r2, [r0, #16]
 8002e7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e80:	7e0c      	ldrb	r4, [r1, #24]
 8002e82:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8002e86:	6102      	str	r2, [r0, #16]
          /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8002e88:	7e4a      	ldrb	r2, [r1, #25]
 8002e8a:	b12a      	cbz	r2, 8002e98 <HAL_ADC_ConfigChannel+0x23c>
           {
              SET_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002e90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e94:	6642      	str	r2, [r0, #100]	; 0x64
 8002e96:	e089      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002e9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ea0:	6642      	str	r2, [r0, #100]	; 0x64
 8002ea2:	e083      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
           }
          break;
        
        case ADC_OFFSET_3:
          MODIFY_REG(hadc->Instance->OFR3,
 8002ea4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8002ea6:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8002eaa:	6808      	ldr	r0, [r1, #0]
 8002eac:	f04f 46f8 	mov.w	r6, #2080374784	; 0x7c000000
 8002eb0:	fa96 f6a6 	rbit	r6, r6
 8002eb4:	fab6 f686 	clz	r6, r6
 8002eb8:	40b0      	lsls	r0, r6
 8002eba:	4302      	orrs	r2, r0
 8002ebc:	432a      	orrs	r2, r5
 8002ebe:	66a2      	str	r2, [r4, #104]	; 0x68
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT3, (sConfig->OffsetRightShift)<<2);
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	6902      	ldr	r2, [r0, #16]
 8002ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec8:	7e0c      	ldrb	r4, [r1, #24]
 8002eca:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8002ece:	6102      	str	r2, [r0, #16]
          /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8002ed0:	7e4a      	ldrb	r2, [r1, #25]
 8002ed2:	b12a      	cbz	r2, 8002ee0 <HAL_ADC_ConfigChannel+0x284>
           {
              SET_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002ed8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002edc:	6682      	str	r2, [r0, #104]	; 0x68
 8002ede:	e065      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002ee4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ee8:	6682      	str	r2, [r0, #104]	; 0x68
 8002eea:	e05f      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
           }
          break;
        
        case ADC_OFFSET_4:
          MODIFY_REG(hadc->Instance->OFR4,
 8002eec:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002eee:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002ef2:	680e      	ldr	r6, [r1, #0]
 8002ef4:	f04f 45f8 	mov.w	r5, #2080374784	; 0x7c000000
 8002ef8:	fa95 f5a5 	rbit	r5, r5
 8002efc:	fab5 f585 	clz	r5, r5
 8002f00:	fa06 f505 	lsl.w	r5, r6, r5
 8002f04:	432a      	orrs	r2, r5
 8002f06:	4302      	orrs	r2, r0
 8002f08:	66e2      	str	r2, [r4, #108]	; 0x6c
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT4, (sConfig->OffsetRightShift)<<3);
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	6902      	ldr	r2, [r0, #16]
 8002f0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f12:	7e0c      	ldrb	r4, [r1, #24]
 8002f14:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
 8002f18:	6102      	str	r2, [r0, #16]
          /* Enable or disable the signed saturation bit */
          if(sConfig->OffsetSignedSaturation != DISABLE)
 8002f1a:	7e4a      	ldrb	r2, [r1, #25]
 8002f1c:	b12a      	cbz	r2, 8002f2a <HAL_ADC_ConfigChannel+0x2ce>
          {
            SET_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002f22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f26:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002f28:	e040      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
          }
          else
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002f2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f32:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002f34:	e03a      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
        /* Case ADC_OFFSET_NONE */
        default :
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f36:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002f38:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8002f3c:	6808      	ldr	r0, [r1, #0]
 8002f3e:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8002f42:	fa92 f2a2 	rbit	r2, r2
 8002f46:	fab2 f282 	clz	r2, r2
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	4295      	cmp	r5, r2
 8002f50:	d057      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x3a6>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f52:	681d      	ldr	r5, [r3, #0]
 8002f54:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8002f56:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002f5a:	6808      	ldr	r0, [r1, #0]
 8002f5c:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	fab2 f282 	clz	r2, r2
 8002f68:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6c:	4294      	cmp	r4, r2
 8002f6e:	d04d      	beq.n	800300c <HAL_ADC_ConfigChannel+0x3b0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f70:	681d      	ldr	r5, [r3, #0]
 8002f72:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8002f74:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002f78:	6808      	ldr	r0, [r1, #0]
 8002f7a:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8002f7e:	fa92 f2a2 	rbit	r2, r2
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	4294      	cmp	r4, r2
 8002f8c:	d043      	beq.n	8003016 <HAL_ADC_ConfigChannel+0x3ba>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f8e:	681d      	ldr	r5, [r3, #0]
 8002f90:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8002f92:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002f96:	6808      	ldr	r0, [r1, #0]
 8002f98:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8002f9c:	fa92 f2a2 	rbit	r2, r2
 8002fa0:	fab2 f282 	clz	r2, r2
 8002fa4:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa8:	4294      	cmp	r4, r2
 8002faa:	d039      	beq.n	8003020 <HAL_ADC_ConfigChannel+0x3c4>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	6882      	ldr	r2, [r0, #8]
 8002fb0:	f002 0203 	and.w	r2, r2, #3
 8002fb4:	2a01      	cmp	r2, #1
 8002fb6:	d038      	beq.n	800302a <HAL_ADC_ConfigChannel+0x3ce>
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	f040 814c 	bne.w	8003258 <HAL_ADC_ConfigChannel+0x5fc>
    {
      /* Configuration of differential mode */
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fc0:	68cc      	ldr	r4, [r1, #12]
 8002fc2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8002fc6:	d038      	beq.n	800303a <HAL_ADC_ConfigChannel+0x3de>
      {
        /* Disable differential mode (default mode: single-ended) */
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002fc8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8002fcc:	680e      	ldr	r6, [r1, #0]
 8002fce:	2501      	movs	r5, #1
 8002fd0:	40b5      	lsls	r5, r6
 8002fd2:	ea24 0405 	bic.w	r4, r4, r5
 8002fd6:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
      /*  paths.                                                                */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */
    
      /* Configuration of common ADC parameters                                 */
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	4ca0      	ldr	r4, [pc, #640]	; (8003260 <HAL_ADC_ConfigChannel+0x604>)
 8002fde:	4da1      	ldr	r5, [pc, #644]	; (8003264 <HAL_ADC_ConfigChannel+0x608>)
 8002fe0:	42a0      	cmp	r0, r4
 8002fe2:	bf18      	it	ne
 8002fe4:	42a8      	cmpne	r0, r5
 8002fe6:	d16b      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x464>
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8002fe8:	f504 7400 	add.w	r4, r4, #512	; 0x200
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
      }
    
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fec:	6809      	ldr	r1, [r1, #0]
 8002fee:	2912      	cmp	r1, #18
 8002ff0:	d068      	beq.n	80030c4 <HAL_ADC_ConfigChannel+0x468>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ff2:	2911      	cmp	r1, #17
 8002ff4:	f000 808e 	beq.w	8003114 <HAL_ADC_ConfigChannel+0x4b8>
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ff8:	2913      	cmp	r1, #19
 8002ffa:	f000 8090 	beq.w	800311e <HAL_ADC_ConfigChannel+0x4c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffe:	2000      	movs	r0, #0
 8003000:	e125      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003002:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003004:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003008:	6622      	str	r2, [r4, #96]	; 0x60
 800300a:	e7a2      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x2f6>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800300c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800300e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003012:	666a      	str	r2, [r5, #100]	; 0x64
 8003014:	e7ac      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x314>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003016:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003018:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800301c:	66aa      	str	r2, [r5, #104]	; 0x68
 800301e:	e7b6      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x332>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003020:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003022:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003026:	66ea      	str	r2, [r5, #108]	; 0x6c
 8003028:	e7c0      	b.n	8002fac <HAL_ADC_ConfigChannel+0x350>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800302a:	6802      	ldr	r2, [r0, #0]
 800302c:	f012 0f01 	tst.w	r2, #1
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x3da>
 8003032:	2200      	movs	r2, #0
 8003034:	e7c1      	b.n	8002fba <HAL_ADC_ConfigChannel+0x35e>
 8003036:	2201      	movs	r2, #1
 8003038:	e7bf      	b.n	8002fba <HAL_ADC_ConfigChannel+0x35e>
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800303a:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 800303e:	680e      	ldr	r6, [r1, #0]
 8003040:	2501      	movs	r5, #1
 8003042:	40b5      	lsls	r5, r6
 8003044:	432c      	orrs	r4, r5
 8003046:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
        if (sConfig->Channel >= ADC_CHANNEL_9)
 800304a:	6808      	ldr	r0, [r1, #0]
 800304c:	2808      	cmp	r0, #8
 800304e:	d91b      	bls.n	8003088 <HAL_ADC_ConfigChannel+0x42c>
          MODIFY_REG(hadc->Instance->SMPR2,
 8003050:	681f      	ldr	r7, [r3, #0]
 8003052:	69be      	ldr	r6, [r7, #24]
 8003054:	2438      	movs	r4, #56	; 0x38
 8003056:	fa94 f5a4 	rbit	r5, r4
 800305a:	fab5 f585 	clz	r5, r5
 800305e:	3809      	subs	r0, #9
 8003060:	fb00 f505 	mul.w	r5, r0, r5
 8003064:	f04f 0e07 	mov.w	lr, #7
 8003068:	fa0e f505 	lsl.w	r5, lr, r5
 800306c:	ea26 0605 	bic.w	r6, r6, r5
 8003070:	688d      	ldr	r5, [r1, #8]
 8003072:	fa94 f4a4 	rbit	r4, r4
 8003076:	fab4 f484 	clz	r4, r4
 800307a:	fb04 f000 	mul.w	r0, r4, r0
 800307e:	fa05 f000 	lsl.w	r0, r5, r0
 8003082:	4330      	orrs	r0, r6
 8003084:	61b8      	str	r0, [r7, #24]
 8003086:	e7a8      	b.n	8002fda <HAL_ADC_ConfigChannel+0x37e>
          MODIFY_REG(hadc->Instance->SMPR1,
 8003088:	681f      	ldr	r7, [r3, #0]
 800308a:	697e      	ldr	r6, [r7, #20]
 800308c:	2438      	movs	r4, #56	; 0x38
 800308e:	fa94 f5a4 	rbit	r5, r4
 8003092:	fab5 f585 	clz	r5, r5
 8003096:	3001      	adds	r0, #1
 8003098:	fb00 f505 	mul.w	r5, r0, r5
 800309c:	f04f 0e07 	mov.w	lr, #7
 80030a0:	fa0e f505 	lsl.w	r5, lr, r5
 80030a4:	ea26 0605 	bic.w	r6, r6, r5
 80030a8:	688d      	ldr	r5, [r1, #8]
 80030aa:	fa94 f4a4 	rbit	r4, r4
 80030ae:	fab4 f484 	clz	r4, r4
 80030b2:	fb04 f000 	mul.w	r0, r4, r0
 80030b6:	fa05 f000 	lsl.w	r0, r5, r0
 80030ba:	4330      	orrs	r0, r6
 80030bc:	6178      	str	r0, [r7, #20]
 80030be:	e78c      	b.n	8002fda <HAL_ADC_ConfigChannel+0x37e>
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 80030c0:	4c69      	ldr	r4, [pc, #420]	; (8003268 <HAL_ADC_ConfigChannel+0x60c>)
 80030c2:	e793      	b.n	8002fec <HAL_ADC_ConfigChannel+0x390>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030c4:	68a5      	ldr	r5, [r4, #8]
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030c6:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80030ca:	d192      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x396>
      {
        /* Configuration of common ADC parameters (continuation)                */
    
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80030cc:	6885      	ldr	r5, [r0, #8]
 80030ce:	f005 0503 	and.w	r5, r5, #3
 80030d2:	2d01      	cmp	r5, #1
 80030d4:	d029      	beq.n	800312a <HAL_ADC_ConfigChannel+0x4ce>
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d13c      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x4f8>
 80030da:	4d62      	ldr	r5, [pc, #392]	; (8003264 <HAL_ADC_ConfigChannel+0x608>)
 80030dc:	42a8      	cmp	r0, r5
 80030de:	d02a      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x4da>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80030e0:	4d5f      	ldr	r5, [pc, #380]	; (8003260 <HAL_ADC_ConfigChannel+0x604>)
 80030e2:	42a8      	cmp	r0, r5
 80030e4:	d04a      	beq.n	800317c <HAL_ADC_ConfigChannel+0x520>
 80030e6:	4d5f      	ldr	r5, [pc, #380]	; (8003264 <HAL_ADC_ConfigChannel+0x608>)
 80030e8:	68ad      	ldr	r5, [r5, #8]
 80030ea:	f005 0503 	and.w	r5, r5, #3
 80030ee:	2d01      	cmp	r5, #1
 80030f0:	d067      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0x566>
 80030f2:	4615      	mov	r5, r2
 80030f4:	f015 0f01 	tst.w	r5, #1
 80030f8:	d16c      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x578>
 80030fa:	4d59      	ldr	r5, [pc, #356]	; (8003260 <HAL_ADC_ConfigChannel+0x604>)
 80030fc:	68ad      	ldr	r5, [r5, #8]
 80030fe:	f005 0503 	and.w	r5, r5, #3
 8003102:	2d01      	cmp	r5, #1
 8003104:	d167      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x57a>
 8003106:	4d56      	ldr	r5, [pc, #344]	; (8003260 <HAL_ADC_ConfigChannel+0x604>)
 8003108:	682d      	ldr	r5, [r5, #0]
 800310a:	f015 0f01 	tst.w	r5, #1
 800310e:	d062      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x57a>
 8003110:	2201      	movs	r2, #1
 8003112:	e060      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x57a>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003114:	68a5      	ldr	r5, [r4, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
 8003116:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 800311a:	d0d7      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x470>
 800311c:	e76c      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x39c>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800311e:	68a5      	ldr	r5, [r4, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003120:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8003124:	d0d2      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x470>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003126:	2000      	movs	r0, #0
 8003128:	e091      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 800312a:	6805      	ldr	r5, [r0, #0]
 800312c:	f015 0f01 	tst.w	r5, #1
 8003130:	d0d1      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x47a>
 8003132:	2201      	movs	r2, #1
 8003134:	e7cf      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x47a>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8003136:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800313a:	68ad      	ldr	r5, [r5, #8]
 800313c:	f005 0503 	and.w	r5, r5, #3
 8003140:	2d01      	cmp	r5, #1
 8003142:	d00d      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x504>
 8003144:	4d49      	ldr	r5, [pc, #292]	; (800326c <HAL_ADC_ConfigChannel+0x610>)
 8003146:	68ad      	ldr	r5, [r5, #8]
 8003148:	f005 0503 	and.w	r5, r5, #3
 800314c:	2d01      	cmp	r5, #1
 800314e:	d00e      	beq.n	800316e <HAL_ADC_ConfigChannel+0x512>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8003150:	2a00      	cmp	r2, #0
 8003152:	d042      	beq.n	80031da <HAL_ADC_ConfigChannel+0x57e>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003156:	f042 0220 	orr.w	r2, r2, #32
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
    
          tmp_hal_status = HAL_ERROR;
 800315c:	2001      	movs	r0, #1
 800315e:	e076      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8003160:	4d3f      	ldr	r5, [pc, #252]	; (8003260 <HAL_ADC_ConfigChannel+0x604>)
 8003162:	682d      	ldr	r5, [r5, #0]
 8003164:	f015 0f01 	tst.w	r5, #1
 8003168:	d0ec      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x4e8>
 800316a:	2201      	movs	r2, #1
 800316c:	e7f0      	b.n	8003150 <HAL_ADC_ConfigChannel+0x4f4>
 800316e:	4d3f      	ldr	r5, [pc, #252]	; (800326c <HAL_ADC_ConfigChannel+0x610>)
 8003170:	682d      	ldr	r5, [r5, #0]
 8003172:	f015 0f01 	tst.w	r5, #1
 8003176:	d0eb      	beq.n	8003150 <HAL_ADC_ConfigChannel+0x4f4>
 8003178:	2201      	movs	r2, #1
 800317a:	e7e9      	b.n	8003150 <HAL_ADC_ConfigChannel+0x4f4>
 800317c:	f5a5 7580 	sub.w	r5, r5, #256	; 0x100
 8003180:	68ad      	ldr	r5, [r5, #8]
 8003182:	f005 0503 	and.w	r5, r5, #3
 8003186:	2d01      	cmp	r5, #1
 8003188:	d00b      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x546>
 800318a:	4d38      	ldr	r5, [pc, #224]	; (800326c <HAL_ADC_ConfigChannel+0x610>)
 800318c:	68ad      	ldr	r5, [r5, #8]
 800318e:	f005 0503 	and.w	r5, r5, #3
 8003192:	2d01      	cmp	r5, #1
 8003194:	d00c      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x554>
 8003196:	4615      	mov	r5, r2
 8003198:	f015 0f01 	tst.w	r5, #1
 800319c:	d0ad      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x49e>
 800319e:	2201      	movs	r2, #1
 80031a0:	e019      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x57a>
 80031a2:	4d30      	ldr	r5, [pc, #192]	; (8003264 <HAL_ADC_ConfigChannel+0x608>)
 80031a4:	682d      	ldr	r5, [r5, #0]
 80031a6:	f015 0f01 	tst.w	r5, #1
 80031aa:	d0ee      	beq.n	800318a <HAL_ADC_ConfigChannel+0x52e>
 80031ac:	2501      	movs	r5, #1
 80031ae:	e7f3      	b.n	8003198 <HAL_ADC_ConfigChannel+0x53c>
 80031b0:	4d2e      	ldr	r5, [pc, #184]	; (800326c <HAL_ADC_ConfigChannel+0x610>)
 80031b2:	682d      	ldr	r5, [r5, #0]
 80031b4:	f015 0f01 	tst.w	r5, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x562>
 80031ba:	4615      	mov	r5, r2
 80031bc:	e7ec      	b.n	8003198 <HAL_ADC_ConfigChannel+0x53c>
 80031be:	2501      	movs	r5, #1
 80031c0:	e7ea      	b.n	8003198 <HAL_ADC_ConfigChannel+0x53c>
 80031c2:	4d28      	ldr	r5, [pc, #160]	; (8003264 <HAL_ADC_ConfigChannel+0x608>)
 80031c4:	682d      	ldr	r5, [r5, #0]
 80031c6:	f015 0f01 	tst.w	r5, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x574>
 80031cc:	4615      	mov	r5, r2
 80031ce:	e791      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x498>
 80031d0:	2501      	movs	r5, #1
 80031d2:	e78f      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x498>
 80031d4:	2201      	movs	r2, #1
 80031d6:	2a00      	cmp	r2, #0
 80031d8:	d1bc      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x4f8>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 80031da:	2912      	cmp	r1, #18
 80031dc:	d005      	beq.n	80031ea <HAL_ADC_ConfigChannel+0x58e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 80031de:	2911      	cmp	r1, #17
 80031e0:	d01c      	beq.n	800321c <HAL_ADC_ConfigChannel+0x5c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && (hadc->Instance == ADC3))
 80031e2:	2913      	cmp	r1, #19
 80031e4:	d023      	beq.n	800322e <HAL_ADC_ConfigChannel+0x5d2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e6:	2000      	movs	r0, #0
 80031e8:	e031      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 80031ea:	4a20      	ldr	r2, [pc, #128]	; (800326c <HAL_ADC_ConfigChannel+0x610>)
 80031ec:	4290      	cmp	r0, r2
 80031ee:	d1f6      	bne.n	80031de <HAL_ADC_ConfigChannel+0x582>
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031f0:	68a2      	ldr	r2, [r4, #8]
 80031f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031f6:	60a2      	str	r2, [r4, #8]
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_ADC_ConfigChannel+0x614>)
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	491d      	ldr	r1, [pc, #116]	; (8003274 <HAL_ADC_ConfigChannel+0x618>)
 80031fe:	fbb2 f1f1 	udiv	r1, r2, r1
 8003202:	2278      	movs	r2, #120	; 0x78
 8003204:	fb02 f201 	mul.w	r2, r2, r1
 8003208:	9201      	str	r2, [sp, #4]
            while(wait_loop_index != 0)
 800320a:	e002      	b.n	8003212 <HAL_ADC_ConfigChannel+0x5b6>
              wait_loop_index--;
 800320c:	9a01      	ldr	r2, [sp, #4]
 800320e:	3a01      	subs	r2, #1
 8003210:	9201      	str	r2, [sp, #4]
            while(wait_loop_index != 0)
 8003212:	9a01      	ldr	r2, [sp, #4]
 8003214:	2a00      	cmp	r2, #0
 8003216:	d1f9      	bne.n	800320c <HAL_ADC_ConfigChannel+0x5b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003218:	2000      	movs	r0, #0
 800321a:	e018      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <HAL_ADC_ConfigChannel+0x610>)
 800321e:	4290      	cmp	r0, r2
 8003220:	d1df      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x586>
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003222:	68a2      	ldr	r2, [r4, #8]
 8003224:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003228:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800322a:	2000      	movs	r0, #0
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800322c:	e00f      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && (hadc->Instance == ADC3))
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <HAL_ADC_ConfigChannel+0x610>)
 8003230:	4290      	cmp	r0, r2
 8003232:	d001      	beq.n	8003238 <HAL_ADC_ConfigChannel+0x5dc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003234:	2000      	movs	r0, #0
 8003236:	e00a      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003238:	68a2      	ldr	r2, [r4, #8]
 800323a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800323e:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003240:	2000      	movs	r0, #0
 8003242:	e004      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003246:	f042 0220 	orr.w	r2, r2, #32
 800324a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800324c:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003254:	b003      	add	sp, #12
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003258:	2000      	movs	r0, #0
 800325a:	e7f8      	b.n	800324e <HAL_ADC_ConfigChannel+0x5f2>
  __HAL_LOCK(hadc);
 800325c:	2002      	movs	r0, #2
 800325e:	e7f9      	b.n	8003254 <HAL_ADC_ConfigChannel+0x5f8>
 8003260:	40022100 	.word	0x40022100
 8003264:	40022000 	.word	0x40022000
 8003268:	58026300 	.word	0x58026300
 800326c:	58026000 	.word	0x58026000
 8003270:	20000090 	.word	0x20000090
 8003274:	001e8480 	.word	0x001e8480

08003278 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003278:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 800327c:	2a01      	cmp	r2, #1
 800327e:	f000 8094 	beq.w	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x132>
{
 8003282:	b430      	push	{r4, r5}
 8003284:	b09a      	sub	sp, #104	; 0x68
 8003286:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003288:	2201      	movs	r2, #1
 800328a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800328e:	6802      	ldr	r2, [r0, #0]
 8003290:	4847      	ldr	r0, [pc, #284]	; (80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003292:	4282      	cmp	r2, r0
 8003294:	d032      	beq.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8003296:	2000      	movs	r0, #0
 8003298:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800329a:	9801      	ldr	r0, [sp, #4]
 800329c:	2800      	cmp	r0, #0
 800329e:	d031      	beq.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  }
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                           */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032a0:	6892      	ldr	r2, [r2, #8]
 80032a2:	f012 0f04 	tst.w	r2, #4
 80032a6:	d16d      	bne.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave) == RESET) )
 80032a8:	6882      	ldr	r2, [r0, #8]
 80032aa:	f012 0f04 	tst.w	r2, #4
 80032ae:	d169      	bne.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    tmpADC_Common = ADC12_COMMON_REGISTER(hadc);

    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	680a      	ldr	r2, [r1, #0]
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d03d      	beq.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0xba>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032b6:	4c3f      	ldr	r4, [pc, #252]	; (80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80032b8:	68a2      	ldr	r2, [r4, #8]
 80032ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80032be:	684d      	ldr	r5, [r1, #4]
 80032c0:	432a      	orrs	r2, r5
 80032c2:	60a2      	str	r2, [r4, #8]
      /*      from 1 to 9 clock cycles for 14 bits,                             */
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80032c4:	681c      	ldr	r4, [r3, #0]
 80032c6:	68a2      	ldr	r2, [r4, #8]
 80032c8:	f002 0203 	and.w	r2, r2, #3
 80032cc:	2a01      	cmp	r2, #1
 80032ce:	d022      	beq.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80032d0:	2200      	movs	r2, #0
 80032d2:	2a00      	cmp	r2, #0
 80032d4:	d161      	bne.n	800339a <HAL_ADCEx_MultiModeConfigChannel+0x122>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80032d6:	6884      	ldr	r4, [r0, #8]
 80032d8:	f004 0403 	and.w	r4, r4, #3
 80032dc:	2c01      	cmp	r4, #1
 80032de:	d022      	beq.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0xae>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80032e0:	2a00      	cmp	r2, #0
 80032e2:	d15c      	bne.n	800339e <HAL_ADCEx_MultiModeConfigChannel+0x126>
      {
        MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 80032e4:	4c33      	ldr	r4, [pc, #204]	; (80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80032e6:	68a0      	ldr	r0, [r4, #8]
 80032e8:	f5a2 6272 	sub.w	r2, r2, #3872	; 0xf20
 80032ec:	4002      	ands	r2, r0
 80032ee:	6808      	ldr	r0, [r1, #0]
 80032f0:	6889      	ldr	r1, [r1, #8]
 80032f2:	4301      	orrs	r1, r0
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 80032f8:	2000      	movs	r0, #0
 80032fa:	e048      	b.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x116>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032fc:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003300:	9001      	str	r0, [sp, #4]
 8003302:	e7ca      	b.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003306:	f042 0220 	orr.w	r2, r2, #32
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003312:	2001      	movs	r0, #1
 8003314:	e03e      	b.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	f012 0f01 	tst.w	r2, #1
 800331c:	d101      	bne.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800331e:	2200      	movs	r2, #0
 8003320:	e7d7      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8003322:	2201      	movs	r2, #1
 8003324:	e7d5      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8003326:	6800      	ldr	r0, [r0, #0]
 8003328:	f010 0f01 	tst.w	r0, #1
 800332c:	d0d8      	beq.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
 800332e:	2201      	movs	r2, #1
 8003330:	e7d6      	b.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
               multimode->Mode | multimode->TwoSamplingDelay );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003332:	4920      	ldr	r1, [pc, #128]	; (80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003334:	688a      	ldr	r2, [r1, #8]
 8003336:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800333a:	608a      	str	r2, [r1, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 800333c:	6819      	ldr	r1, [r3, #0]
 800333e:	688a      	ldr	r2, [r1, #8]
 8003340:	f002 0203 	and.w	r2, r2, #3
 8003344:	2a01      	cmp	r2, #1
 8003346:	d00f      	beq.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 8003348:	2200      	movs	r2, #0
 800334a:	bb52      	cbnz	r2, 80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 800334c:	6881      	ldr	r1, [r0, #8]
 800334e:	f001 0103 	and.w	r1, r1, #3
 8003352:	2901      	cmp	r1, #1
 8003354:	d010      	beq.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x100>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8003356:	bb32      	cbnz	r2, 80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800335a:	6888      	ldr	r0, [r1, #8]
 800335c:	f5a2 6272 	sub.w	r2, r2, #3872	; 0xf20
 8003360:	4002      	ands	r2, r0
 8003362:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 8003364:	2000      	movs	r0, #0
 8003366:	e012      	b.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x116>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8003368:	680a      	ldr	r2, [r1, #0]
 800336a:	f012 0f01 	tst.w	r2, #1
 800336e:	d101      	bne.n	8003374 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
 8003370:	2200      	movs	r2, #0
 8003372:	e7ea      	b.n	800334a <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8003374:	2201      	movs	r2, #1
 8003376:	e7e8      	b.n	800334a <HAL_ADCEx_MultiModeConfigChannel+0xd2>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8003378:	6801      	ldr	r1, [r0, #0]
 800337a:	f011 0f01 	tst.w	r1, #1
 800337e:	d0ea      	beq.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8003380:	2201      	movs	r2, #1
 8003382:	e7e8      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003386:	f042 0220 	orr.w	r2, r2, #32
 800338a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status  = HAL_ERROR;
 800338c:	2001      	movs	r0, #1
  }


  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status ;
}
 8003394:	b01a      	add	sp, #104	; 0x68
 8003396:	bc30      	pop	{r4, r5}
 8003398:	4770      	bx	lr
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 800339a:	2000      	movs	r0, #0
 800339c:	e7f7      	b.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800339e:	2000      	movs	r0, #0
 80033a0:	e7f5      	b.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e7f3      	b.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80033a6:	2000      	movs	r0, #0
 80033a8:	e7f1      	b.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 80033aa:	2002      	movs	r0, #2
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40022300 	.word	0x40022300

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b8:	4906      	ldr	r1, [pc, #24]	; (80033d4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80033ba:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80033c4:	0200      	lsls	r0, r0, #8
 80033c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80033cc:	4a02      	ldr	r2, [pc, #8]	; (80033d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80033ce:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80033d0:	60ca      	str	r2, [r1, #12]
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00
 80033d8:	05fa0000 	.word	0x05fa0000

080033dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_NVIC_SetPriority+0x54>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e6:	f1c3 0407 	rsb	r4, r3, #7
 80033ea:	2c04      	cmp	r4, #4
 80033ec:	bf28      	it	cs
 80033ee:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f0:	1d1d      	adds	r5, r3, #4
 80033f2:	2d06      	cmp	r5, #6
 80033f4:	d913      	bls.n	800341e <HAL_NVIC_SetPriority+0x42>
 80033f6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	2501      	movs	r5, #1
 80033fa:	fa05 f404 	lsl.w	r4, r5, r4
 80033fe:	3c01      	subs	r4, #1
 8003400:	4021      	ands	r1, r4
 8003402:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003404:	fa05 f303 	lsl.w	r3, r5, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800340e:	2800      	cmp	r0, #0
 8003410:	db07      	blt.n	8003422 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	0109      	lsls	r1, r1, #4
 8003414:	b2c9      	uxtb	r1, r1
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_NVIC_SetPriority+0x58>)
 8003418:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800341a:	bc30      	pop	{r4, r5}
 800341c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	2300      	movs	r3, #0
 8003420:	e7ea      	b.n	80033f8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	f000 000f 	and.w	r0, r0, #15
 8003426:	0109      	lsls	r1, r1, #4
 8003428:	b2c9      	uxtb	r1, r1
 800342a:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_NVIC_SetPriority+0x5c>)
 800342c:	5419      	strb	r1, [r3, r0]
 800342e:	e7f4      	b.n	800341a <HAL_NVIC_SetPriority+0x3e>
 8003430:	e000ed00 	.word	0xe000ed00
 8003434:	e000e400 	.word	0xe000e400
 8003438:	e000ed14 	.word	0xe000ed14

0800343c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800343c:	2800      	cmp	r0, #0
 800343e:	db08      	blt.n	8003452 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003440:	0942      	lsrs	r2, r0, #5
 8003442:	f000 001f 	and.w	r0, r0, #31
 8003446:	2301      	movs	r3, #1
 8003448:	fa03 f000 	lsl.w	r0, r3, r0
 800344c:	4b01      	ldr	r3, [pc, #4]	; (8003454 <HAL_NVIC_EnableIRQ+0x18>)
 800344e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100

08003458 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	3801      	subs	r0, #1
 800345a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800345e:	d20a      	bcs.n	8003476 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_SYSTICK_Config+0x24>)
 8003462:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	21f0      	movs	r1, #240	; 0xf0
 8003466:	4a06      	ldr	r2, [pc, #24]	; (8003480 <HAL_SYSTICK_Config+0x28>)
 8003468:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800346c:	2000      	movs	r0, #0
 800346e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003470:	2207      	movs	r2, #7
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003476:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e010 	.word	0xe000e010
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003484:	2804      	cmp	r0, #4
 8003486:	d005      	beq.n	8003494 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003488:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003494:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4770      	bx	lr
 80034a0:	e000e010 	.word	0xe000e010

080034a4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a4:	6802      	ldr	r2, [r0, #0]
 80034a6:	b2d3      	uxtb	r3, r2
 80034a8:	3b10      	subs	r3, #16
 80034aa:	4909      	ldr	r1, [pc, #36]	; (80034d0 <DMA_CalcBaseAndBitshift+0x2c>)
 80034ac:	fba1 1303 	umull	r1, r3, r1, r3
 80034b0:	091b      	lsrs	r3, r3, #4

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <DMA_CalcBaseAndBitshift+0x30>)
 80034b4:	5cc9      	ldrb	r1, [r1, r3]
 80034b6:	65c1      	str	r1, [r0, #92]	; 0x5c

  if (stream_number > 3U)
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d804      	bhi.n	80034c6 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <DMA_CalcBaseAndBitshift+0x34>)
 80034be:	4013      	ands	r3, r2
 80034c0:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 80034c2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80034c4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <DMA_CalcBaseAndBitshift+0x34>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	6583      	str	r3, [r0, #88]	; 0x58
 80034ce:	e7f8      	b.n	80034c2 <DMA_CalcBaseAndBitshift+0x1e>
 80034d0:	aaaaaaab 	.word	0xaaaaaaab
 80034d4:	0800840c 	.word	0x0800840c
 80034d8:	fffffc00 	.word	0xfffffc00

080034dc <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034dc:	6983      	ldr	r3, [r0, #24]
 80034de:	b99b      	cbnz	r3, 8003508 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 80034e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d00a      	beq.n	80034fc <DMA_CheckFifoParam+0x20>
 80034e6:	b11b      	cbz	r3, 80034f0 <DMA_CheckFifoParam+0x14>
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d001      	beq.n	80034f0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	2000      	movs	r0, #0
 80034ee:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80034f6:	d12e      	bne.n	8003556 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2000      	movs	r0, #0
 80034fa:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003502:	d02a      	beq.n	800355a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	2000      	movs	r0, #0
 8003506:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350c:	d006      	beq.n	800351c <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800350e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003510:	2b02      	cmp	r3, #2
 8003512:	d92a      	bls.n	800356a <DMA_CheckFifoParam+0x8e>
 8003514:	2b03      	cmp	r3, #3
 8003516:	d016      	beq.n	8003546 <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2000      	movs	r0, #0
 800351a:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 800351c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800351e:	2b03      	cmp	r3, #3
 8003520:	d803      	bhi.n	800352a <DMA_CheckFifoParam+0x4e>
 8003522:	e8df f003 	tbb	[pc, r3]
 8003526:	041c      	.short	0x041c
 8003528:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2000      	movs	r0, #0
 800352c:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800352e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003530:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003534:	d115      	bne.n	8003562 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2000      	movs	r0, #0
 8003538:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800353a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800353c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003540:	d011      	beq.n	8003566 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	2000      	movs	r0, #0
 8003544:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003546:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003548:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800354c:	d001      	beq.n	8003552 <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 800354e:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8003550:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2000      	movs	r0, #0
 8003554:	4770      	bx	lr
          status = HAL_ERROR;
 8003556:	2001      	movs	r0, #1
 8003558:	4770      	bx	lr
          status = HAL_ERROR;
 800355a:	2001      	movs	r0, #1
 800355c:	4770      	bx	lr
        status = HAL_ERROR;
 800355e:	2001      	movs	r0, #1
 8003560:	4770      	bx	lr
          status = HAL_ERROR;
 8003562:	2001      	movs	r0, #1
 8003564:	4770      	bx	lr
          status = HAL_ERROR;
 8003566:	2001      	movs	r0, #1
 8003568:	4770      	bx	lr
        status = HAL_ERROR;
 800356a:	2001      	movs	r0, #1
 800356c:	4770      	bx	lr
	...

08003570 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = 0U;
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 8003570:	6803      	ldr	r3, [r0, #0]

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 8003572:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003574:	441a      	add	r2, r3
 8003576:	2a8c      	cmp	r2, #140	; 0x8c
 8003578:	d915      	bls.n	80035a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
  }
  else
  {
    /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800357a:	b2da      	uxtb	r2, r3
 800357c:	3a10      	subs	r2, #16
 800357e:	4913      	ldr	r1, [pc, #76]	; (80035cc <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003580:	fba1 1202 	umull	r1, r2, r1, r2
 8003584:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003586:	4912      	ldr	r1, [pc, #72]	; (80035d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003588:	4419      	add	r1, r3
 800358a:	29a8      	cmp	r1, #168	; 0xa8
 800358c:	d800      	bhi.n	8003590 <DMA_CalcDMAMUXChannelBaseAndMask+0x20>
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
 800358e:	3208      	adds	r2, #8
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800359a:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 800359c:	2301      	movs	r3, #1
 800359e:	fa03 f202 	lsl.w	r2, r3, r2
 80035a2:	6682      	str	r2, [r0, #104]	; 0x68
 80035a4:	4770      	bx	lr
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3b08      	subs	r3, #8
 80035aa:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80035b4:	441a      	add	r2, r3
 80035b6:	0092      	lsls	r2, r2, #2
 80035b8:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80035bc:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80035be:	2201      	movs	r2, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	6683      	str	r3, [r0, #104]	; 0x68
 80035c6:	4770      	bx	lr
 80035c8:	a7fdabf8 	.word	0xa7fdabf8
 80035cc:	aaaaaaab 	.word	0xaaaaaaab
 80035d0:	bffdfbf0 	.word	0xbffdfbf0
 80035d4:	10008200 	.word	0x10008200
 80035d8:	40020880 	.word	0x40020880
 80035dc:	cccccccd 	.word	0xcccccccd
 80035e0:	16009600 	.word	0x16009600
 80035e4:	58025880 	.word	0x58025880

080035e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035e8:	b410      	push	{r4}
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 80035ea:	6804      	ldr	r4, [r0, #0]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035ec:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80035ee:	1e53      	subs	r3, r2, #1
 80035f0:	2b07      	cmp	r3, #7
 80035f2:	d80d      	bhi.n	8003610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80035f4:	490b      	ldr	r1, [pc, #44]	; (8003624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x3c>)
 80035f6:	4421      	add	r1, r4
 80035f8:	298c      	cmp	r1, #140	; 0x8c
 80035fa:	d80c      	bhi.n	8003616 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x2e>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80035fc:	490a      	ldr	r1, [pc, #40]	; (8003628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035fe:	4411      	add	r1, r2
 8003600:	0089      	lsls	r1, r1, #2
 8003602:	66c1      	str	r1, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003604:	4a09      	ldr	r2, [pc, #36]	; (800362c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003606:	6702      	str	r2, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 8003608:	2201      	movs	r2, #1
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8003610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003614:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003616:	4906      	ldr	r1, [pc, #24]	; (8003630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003618:	4411      	add	r1, r2
 800361a:	0089      	lsls	r1, r1, #2
 800361c:	66c1      	str	r1, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800361e:	4a05      	ldr	r2, [pc, #20]	; (8003634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4c>)
 8003620:	6702      	str	r2, [r0, #112]	; 0x70
 8003622:	e7f1      	b.n	8003608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>
 8003624:	a7fdabf8 	.word	0xa7fdabf8
 8003628:	1600963f 	.word	0x1600963f
 800362c:	58025940 	.word	0x58025940
 8003630:	1000823f 	.word	0x1000823f
 8003634:	40020940 	.word	0x40020940

08003638 <HAL_DMA_Init>:
{
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800363c:	f7ff f986 	bl	800294c <HAL_GetTick>
  if(hdma == NULL)
 8003640:	2c00      	cmp	r4, #0
 8003642:	f000 80c2 	beq.w	80037ca <HAL_DMA_Init+0x192>
 8003646:	4605      	mov	r5, r0
  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 8003648:	6822      	ldr	r2, [r4, #0]
 800364a:	4b61      	ldr	r3, [pc, #388]	; (80037d0 <HAL_DMA_Init+0x198>)
 800364c:	4413      	add	r3, r2
 800364e:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 8003652:	d855      	bhi.n	8003700 <HAL_DMA_Init+0xc8>
    __HAL_UNLOCK(hdma);
 8003654:	2300      	movs	r3, #0
 8003656:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003660:	6813      	ldr	r3, [r2, #0]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6013      	str	r3, [r2, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f012 0f01 	tst.w	r2, #1
 8003670:	d00b      	beq.n	800368a <HAL_DMA_Init+0x52>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003672:	f7ff f96b 	bl	800294c <HAL_GetTick>
 8003676:	1b40      	subs	r0, r0, r5
 8003678:	2805      	cmp	r0, #5
 800367a:	d9f5      	bls.n	8003668 <HAL_DMA_Init+0x30>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800367c:	2320      	movs	r3, #32
 800367e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003680:	2303      	movs	r3, #3
 8003682:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8003686:	2001      	movs	r0, #1
 8003688:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800368a:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800368c:	4951      	ldr	r1, [pc, #324]	; (80037d4 <HAL_DMA_Init+0x19c>)
 800368e:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 8003690:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8003694:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003696:	6920      	ldr	r0, [r4, #16]
 8003698:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369a:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369c:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	69a0      	ldr	r0, [r4, #24]
 80036a0:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80036a2:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a4:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80036a6:	6a20      	ldr	r0, [r4, #32]
 80036a8:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 80036aa:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80036ae:	2904      	cmp	r1, #4
 80036b0:	d011      	beq.n	80036d6 <HAL_DMA_Init+0x9e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80036b2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036b4:	6826      	ldr	r6, [r4, #0]
 80036b6:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036b8:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80036bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036be:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d00d      	beq.n	80036e0 <HAL_DMA_Init+0xa8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036c4:	6175      	str	r5, [r6, #20]
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff feec 	bl	80034a4 <DMA_CalcBaseAndBitshift>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80036ce:	233f      	movs	r3, #63	; 0x3f
 80036d0:	4093      	lsls	r3, r2
 80036d2:	6083      	str	r3, [r0, #8]
 80036d4:	e046      	b.n	8003764 <HAL_DMA_Init+0x12c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80036d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80036da:	4301      	orrs	r1, r0
 80036dc:	430a      	orrs	r2, r1
 80036de:	e7e8      	b.n	80036b2 <HAL_DMA_Init+0x7a>
      registerValue |= hdma->Init.FIFOThreshold;
 80036e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036e2:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ec      	beq.n	80036c4 <HAL_DMA_Init+0x8c>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7ff fef6 	bl	80034dc <DMA_CheckFifoParam>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d0e7      	beq.n	80036c4 <HAL_DMA_Init+0x8c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036f4:	2340      	movs	r3, #64	; 0x40
 80036f6:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80036f8:	2001      	movs	r0, #1
 80036fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 8003700:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_DMA_Init+0x1a0>)
 8003702:	4413      	add	r3, r2
 8003704:	2b8c      	cmp	r3, #140	; 0x8c
 8003706:	d84c      	bhi.n	80037a2 <HAL_DMA_Init+0x16a>
    __HAL_UNLOCK(hdma);
 8003708:	2300      	movs	r3, #0
 800370a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003714:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 8003716:	4931      	ldr	r1, [pc, #196]	; (80037dc <HAL_DMA_Init+0x1a4>)
 8003718:	4019      	ands	r1, r3
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d03e      	beq.n	800379e <HAL_DMA_Init+0x166>
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d039      	beq.n	8003798 <HAL_DMA_Init+0x160>
 8003724:	2300      	movs	r3, #0
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003726:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8003728:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 800372c:	6920      	ldr	r0, [r4, #16]
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800372e:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003732:	6960      	ldr	r0, [r4, #20]
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003734:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003738:	69a0      	ldr	r0, [r4, #24]
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800373a:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 800373e:	69e0      	ldr	r0, [r4, #28]
 8003740:	08c0      	lsrs	r0, r0, #3
 8003742:	f000 0020 	and.w	r0, r0, #32
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003746:	4303      	orrs	r3, r0
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 8003748:	6a20      	ldr	r0, [r4, #32]
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 800374a:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800374e:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003750:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_DMA_Init+0x1a0>)
 8003756:	4413      	add	r3, r2
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <HAL_DMA_Init+0x1a8>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	65e3      	str	r3, [r4, #92]	; 0x5c
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003764:	4620      	mov	r0, r4
 8003766:	f7ff ff03 	bl	8003570 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800376a:	68a3      	ldr	r3, [r4, #8]
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d01f      	beq.n	80037b0 <HAL_DMA_Init+0x178>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003770:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003772:	7922      	ldrb	r2, [r4, #4]
 8003774:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003778:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800377a:	605a      	str	r2, [r3, #4]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	2b07      	cmp	r3, #7
 8003782:	d918      	bls.n	80037b6 <HAL_DMA_Init+0x17e>
    hdma->DMAmuxRequestGen = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	66e3      	str	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8003788:	6723      	str	r3, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800378a:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378c:	2000      	movs	r0, #0
 800378e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003790:	2301      	movs	r3, #1
 8003792:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003796:	bd70      	pop	{r4, r5, r6, pc}
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8003798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800379c:	e7c3      	b.n	8003726 <HAL_DMA_Init+0xee>
 800379e:	2310      	movs	r3, #16
 80037a0:	e7c1      	b.n	8003726 <HAL_DMA_Init+0xee>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a2:	2340      	movs	r3, #64	; 0x40
 80037a4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037a6:	2303      	movs	r3, #3
 80037a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80037ac:	2001      	movs	r0, #1
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037b0:	2300      	movs	r3, #0
 80037b2:	6063      	str	r3, [r4, #4]
 80037b4:	e7dc      	b.n	8003770 <HAL_DMA_Init+0x138>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7ff ff16 	bl	80035e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
     hdma->DMAmuxRequestGen->RGCR = 0U;
 80037bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80037c4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	e7e0      	b.n	800378c <HAL_DMA_Init+0x154>
    return HAL_ERROR;
 80037ca:	2001      	movs	r0, #1
}
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
 80037ce:	bf00      	nop
 80037d0:	bffdfff0 	.word	0xbffdfff0
 80037d4:	fe10803f 	.word	0xfe10803f
 80037d8:	a7fdabf8 	.word	0xa7fdabf8
 80037dc:	ffff800f 	.word	0xffff800f
 80037e0:	cccccccd 	.word	0xcccccccd

080037e4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d04e      	beq.n	8003886 <HAL_DMA_Abort_IT+0xa2>
{
 80037e8:	b508      	push	{r3, lr}
 80037ea:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ec:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	2a02      	cmp	r2, #2
 80037f4:	d003      	beq.n	80037fe <HAL_DMA_Abort_IT+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	6542      	str	r2, [r0, #84]	; 0x54
    return HAL_ERROR;
 80037fa:	2001      	movs	r0, #1
 80037fc:	bd08      	pop	{r3, pc}
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 80037fe:	6802      	ldr	r2, [r0, #0]
 8003800:	4923      	ldr	r1, [pc, #140]	; (8003890 <HAL_DMA_Abort_IT+0xac>)
 8003802:	4411      	add	r1, r2
 8003804:	f5b1 6f95 	cmp.w	r1, #1192	; 0x4a8
 8003808:	d92f      	bls.n	800386a <HAL_DMA_Abort_IT+0x86>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800380a:	6811      	ldr	r1, [r2, #0]
 800380c:	f021 010e 	bic.w	r1, r1, #14
 8003810:	6011      	str	r1, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8003812:	6801      	ldr	r1, [r0, #0]
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <HAL_DMA_Abort_IT+0xac>)
 8003816:	440a      	add	r2, r1
 8003818:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 800381c:	d82e      	bhi.n	800387c <HAL_DMA_Abort_IT+0x98>
 800381e:	680a      	ldr	r2, [r1, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	600a      	str	r2, [r1, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003826:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003828:	680a      	ldr	r2, [r1, #0]
 800382a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800382e:	600a      	str	r2, [r1, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8003830:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003832:	2201      	movs	r2, #1
 8003834:	408a      	lsls	r2, r1
 8003836:	4917      	ldr	r1, [pc, #92]	; (8003894 <HAL_DMA_Abort_IT+0xb0>)
 8003838:	604a      	str	r2, [r1, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800383c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800383e:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003840:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003842:	b132      	cbz	r2, 8003852 <HAL_DMA_Abort_IT+0x6e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003844:	6811      	ldr	r1, [r2, #0]
 8003846:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800384a:	6011      	str	r1, [r2, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800384c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800384e:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8003850:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800385e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003860:	b19a      	cbz	r2, 800388a <HAL_DMA_Abort_IT+0xa6>
 8003862:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8003864:	4790      	blx	r2
  return HAL_OK;
 8003866:	2000      	movs	r0, #0
 8003868:	bd08      	pop	{r3, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 800386a:	2104      	movs	r1, #4
 800386c:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003870:	6813      	ldr	r3, [r2, #0]
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003878:	2000      	movs	r0, #0
 800387a:	bd08      	pop	{r3, pc}
      __HAL_DMA_DISABLE(hdma);
 800387c:	680a      	ldr	r2, [r1, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	600a      	str	r2, [r1, #0]
 8003884:	e7cf      	b.n	8003826 <HAL_DMA_Abort_IT+0x42>
    return HAL_ERROR;
 8003886:	2001      	movs	r0, #1
 8003888:	4770      	bx	lr
  return HAL_OK;
 800388a:	2000      	movs	r0, #0
}
 800388c:	bd08      	pop	{r3, pc}
 800388e:	bf00      	nop
 8003890:	bffdfff0 	.word	0xbffdfff0
 8003894:	58025400 	.word	0x58025400

08003898 <HAL_DMA_IRQHandler>:
{
 8003898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389a:	b083      	sub	sp, #12
 800389c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038a2:	4b90      	ldr	r3, [pc, #576]	; (8003ae4 <HAL_DMA_IRQHandler+0x24c>)
 80038a4:	681d      	ldr	r5, [r3, #0]
 80038a6:	4b90      	ldr	r3, [pc, #576]	; (8003ae8 <HAL_DMA_IRQHandler+0x250>)
 80038a8:	fba3 3505 	umull	r3, r5, r3, r5
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ac:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80038ae:	683e      	ldr	r6, [r7, #0]
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 80038b0:	6802      	ldr	r2, [r0, #0]
 80038b2:	4b8e      	ldr	r3, [pc, #568]	; (8003aec <HAL_DMA_IRQHandler+0x254>)
 80038b4:	4413      	add	r3, r2
 80038b6:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 80038ba:	f200 811d 	bhi.w	8003af8 <HAL_DMA_IRQHandler+0x260>
 80038be:	0aad      	lsrs	r5, r5, #10
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038c0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80038c2:	2308      	movs	r3, #8
 80038c4:	408b      	lsls	r3, r1
 80038c6:	421e      	tst	r6, r3
 80038c8:	d00f      	beq.n	80038ea <HAL_DMA_IRQHandler+0x52>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	f013 0f04 	tst.w	r3, #4
 80038d0:	d00b      	beq.n	80038ea <HAL_DMA_IRQHandler+0x52>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038d2:	6813      	ldr	r3, [r2, #0]
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	6013      	str	r3, [r2, #0]
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038da:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80038dc:	2308      	movs	r3, #8
 80038de:	4093      	lsls	r3, r2
 80038e0:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80038ec:	4b80      	ldr	r3, [pc, #512]	; (8003af0 <HAL_DMA_IRQHandler+0x258>)
 80038ee:	4093      	lsls	r3, r2
 80038f0:	421e      	tst	r6, r3
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_IRQHandler+0x7a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038f4:	6821      	ldr	r1, [r4, #0]
 80038f6:	4a7d      	ldr	r2, [pc, #500]	; (8003aec <HAL_DMA_IRQHandler+0x254>)
 80038f8:	440a      	add	r2, r1
 80038fa:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 80038fe:	d83a      	bhi.n	8003976 <HAL_DMA_IRQHandler+0xde>
 8003900:	694a      	ldr	r2, [r1, #20]
 8003902:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8003906:	b122      	cbz	r2, 8003912 <HAL_DMA_IRQHandler+0x7a>
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003908:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800390a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003912:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003914:	4b77      	ldr	r3, [pc, #476]	; (8003af4 <HAL_DMA_IRQHandler+0x25c>)
 8003916:	4093      	lsls	r3, r2
 8003918:	421e      	tst	r6, r3
 800391a:	d00e      	beq.n	800393a <HAL_DMA_IRQHandler+0xa2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800391c:	6821      	ldr	r1, [r4, #0]
 800391e:	4a73      	ldr	r2, [pc, #460]	; (8003aec <HAL_DMA_IRQHandler+0x254>)
 8003920:	440a      	add	r2, r1
 8003922:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8003926:	d829      	bhi.n	800397c <HAL_DMA_IRQHandler+0xe4>
 8003928:	680a      	ldr	r2, [r1, #0]
 800392a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800392e:	b122      	cbz	r2, 800393a <HAL_DMA_IRQHandler+0xa2>
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003930:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003932:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800393a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800393c:	2310      	movs	r3, #16
 800393e:	4093      	lsls	r3, r2
 8003940:	421e      	tst	r6, r3
 8003942:	d033      	beq.n	80039ac <HAL_DMA_IRQHandler+0x114>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003944:	6821      	ldr	r1, [r4, #0]
 8003946:	4a69      	ldr	r2, [pc, #420]	; (8003aec <HAL_DMA_IRQHandler+0x254>)
 8003948:	440a      	add	r2, r1
 800394a:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 800394e:	d818      	bhi.n	8003982 <HAL_DMA_IRQHandler+0xea>
 8003950:	680a      	ldr	r2, [r1, #0]
 8003952:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8003956:	b34a      	cbz	r2, 80039ac <HAL_DMA_IRQHandler+0x114>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003958:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003962:	d017      	beq.n	8003994 <HAL_DMA_IRQHandler+0xfc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800396a:	d10e      	bne.n	800398a <HAL_DMA_IRQHandler+0xf2>
            if(hdma->XferHalfCpltCallback != NULL)
 800396c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800396e:	b1eb      	cbz	r3, 80039ac <HAL_DMA_IRQHandler+0x114>
              hdma->XferHalfCpltCallback(hdma);
 8003970:	4620      	mov	r0, r4
 8003972:	4798      	blx	r3
 8003974:	e01a      	b.n	80039ac <HAL_DMA_IRQHandler+0x114>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003976:	680a      	ldr	r2, [r1, #0]
 8003978:	2200      	movs	r2, #0
 800397a:	e7c4      	b.n	8003906 <HAL_DMA_IRQHandler+0x6e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800397c:	680a      	ldr	r2, [r1, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	e7d5      	b.n	800392e <HAL_DMA_IRQHandler+0x96>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003982:	680a      	ldr	r2, [r1, #0]
 8003984:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003988:	e7e5      	b.n	8003956 <HAL_DMA_IRQHandler+0xbe>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800398a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800398c:	b173      	cbz	r3, 80039ac <HAL_DMA_IRQHandler+0x114>
              hdma->XferM1HalfCpltCallback(hdma);
 800398e:	4620      	mov	r0, r4
 8003990:	4798      	blx	r3
 8003992:	e00b      	b.n	80039ac <HAL_DMA_IRQHandler+0x114>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	f412 7f80 	tst.w	r2, #256	; 0x100
 800399a:	d103      	bne.n	80039a4 <HAL_DMA_IRQHandler+0x10c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	f022 0208 	bic.w	r2, r2, #8
 80039a2:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80039a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039a6:	b10b      	cbz	r3, 80039ac <HAL_DMA_IRQHandler+0x114>
            hdma->XferHalfCpltCallback(hdma);
 80039a8:	4620      	mov	r0, r4
 80039aa:	4798      	blx	r3
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039ac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80039ae:	2320      	movs	r3, #32
 80039b0:	4093      	lsls	r3, r2
 80039b2:	421e      	tst	r6, r3
 80039b4:	d05f      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x1de>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039b6:	6821      	ldr	r1, [r4, #0]
 80039b8:	4a4c      	ldr	r2, [pc, #304]	; (8003aec <HAL_DMA_IRQHandler+0x254>)
 80039ba:	440a      	add	r2, r1
 80039bc:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 80039c0:	d819      	bhi.n	80039f6 <HAL_DMA_IRQHandler+0x15e>
 80039c2:	680a      	ldr	r2, [r1, #0]
 80039c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	d054      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x1de>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039cc:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d012      	beq.n	80039fe <HAL_DMA_IRQHandler+0x166>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80039e0:	d037      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x1ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80039e8:	d12e      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x1b0>
            if(hdma->XferM1CpltCallback != NULL)
 80039ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d042      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x1de>
              hdma->XferM1CpltCallback(hdma);
 80039f0:	4620      	mov	r0, r4
 80039f2:	4798      	blx	r3
 80039f4:	e03f      	b.n	8003a76 <HAL_DMA_IRQHandler+0x1de>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039f6:	680a      	ldr	r2, [r1, #0]
 80039f8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80039fc:	e7e4      	b.n	80039c8 <HAL_DMA_IRQHandler+0x130>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	f023 0316 	bic.w	r3, r3, #22
 8003a06:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	6953      	ldr	r3, [r2, #20]
 8003a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a10:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a14:	b1a3      	cbz	r3, 8003a40 <HAL_DMA_IRQHandler+0x1a8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	f023 0308 	bic.w	r3, r3, #8
 8003a1e:	6013      	str	r3, [r2, #0]
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a22:	233f      	movs	r3, #63	; 0x3f
 8003a24:	4093      	lsls	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8003a34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d049      	beq.n	8003ace <HAL_DMA_IRQHandler+0x236>
            hdma->XferAbortCallback(hdma);
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4798      	blx	r3
 8003a3e:	e046      	b.n	8003ace <HAL_DMA_IRQHandler+0x236>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e7      	bne.n	8003a16 <HAL_DMA_IRQHandler+0x17e>
 8003a46:	e7eb      	b.n	8003a20 <HAL_DMA_IRQHandler+0x188>
            if(hdma->XferCpltCallback != NULL)
 8003a48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a4a:	b1a3      	cbz	r3, 8003a76 <HAL_DMA_IRQHandler+0x1de>
              hdma->XferCpltCallback(hdma);
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	4798      	blx	r3
 8003a50:	e011      	b.n	8003a76 <HAL_DMA_IRQHandler+0x1de>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003a58:	d109      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x1d6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f022 0210 	bic.w	r2, r2, #16
 8003a60:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 8003a62:	2300      	movs	r3, #0
 8003a64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8003a6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a70:	b10b      	cbz	r3, 8003a76 <HAL_DMA_IRQHandler+0x1de>
            hdma->XferCpltCallback(hdma);
 8003a72:	4620      	mov	r0, r4
 8003a74:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a78:	b34b      	cbz	r3, 8003ace <HAL_DMA_IRQHandler+0x236>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a7c:	f013 0f01 	tst.w	r3, #1
 8003a80:	d021      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x22e>
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a82:	2304      	movs	r3, #4
 8003a84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	4a18      	ldr	r2, [pc, #96]	; (8003aec <HAL_DMA_IRQHandler+0x254>)
 8003a8c:	441a      	add	r2, r3
 8003a8e:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8003a92:	d81e      	bhi.n	8003ad2 <HAL_DMA_IRQHandler+0x23a>
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8003a9c:	9b01      	ldr	r3, [sp, #4]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	429d      	cmp	r5, r3
 8003aa4:	d304      	bcc.n	8003ab0 <HAL_DMA_IRQHandler+0x218>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET);
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f013 0f01 	tst.w	r3, #1
 8003aae:	d1f5      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x204>
        __HAL_UNLOCK(hdma);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f013 0f01 	tst.w	r3, #1
 8003abe:	d00d      	beq.n	8003adc <HAL_DMA_IRQHandler+0x244>
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8003ac6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003ac8:	b10b      	cbz	r3, 8003ace <HAL_DMA_IRQHandler+0x236>
        hdma->XferErrorCallback(hdma);
 8003aca:	4620      	mov	r0, r4
 8003acc:	4798      	blx	r3
}
 8003ace:	b003      	add	sp, #12
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_DMA_DISABLE(hdma);
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e7df      	b.n	8003a9c <HAL_DMA_IRQHandler+0x204>
          hdma->State = HAL_DMA_STATE_READY;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8003ae2:	e7f0      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x22e>
 8003ae4:	20000090 	.word	0x20000090
 8003ae8:	1b4e81b5 	.word	0x1b4e81b5
 8003aec:	bffdfff0 	.word	0xbffdfff0
 8003af0:	00800001 	.word	0x00800001
 8003af4:	00800004 	.word	0x00800004
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET)  /*D3 domain BDMA */
 8003af8:	4b35      	ldr	r3, [pc, #212]	; (8003bd0 <HAL_DMA_IRQHandler+0x338>)
 8003afa:	4413      	add	r3, r2
 8003afc:	2b8c      	cmp	r3, #140	; 0x8c
 8003afe:	d8e6      	bhi.n	8003ace <HAL_DMA_IRQHandler+0x236>
    if ((RESET != (BDMA->ISR & (BDMA_FLAG_HT0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_HTIE)))
 8003b00:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <HAL_DMA_IRQHandler+0x33c>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003b06:	2304      	movs	r3, #4
 8003b08:	408b      	lsls	r3, r1
 8003b0a:	4218      	tst	r0, r3
 8003b0c:	d018      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x2a8>
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	f013 0f04 	tst.w	r3, #4
 8003b14:	d014      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x2a8>
        if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	f013 0f20 	tst.w	r3, #32
 8003b1c:	d103      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x28e>
          (*ccr_reg) &= ~BDMA_CCR_HTIE;
 8003b1e:	6813      	ldr	r3, [r2, #0]
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	6013      	str	r3, [r2, #0]
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 8003b26:	492b      	ldr	r1, [pc, #172]	; (8003bd4 <HAL_DMA_IRQHandler+0x33c>)
 8003b28:	684b      	ldr	r3, [r1, #4]
 8003b2a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	4082      	lsls	r2, r0
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
       if(hdma->XferHalfCpltCallback != NULL)
 8003b34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0c9      	beq.n	8003ace <HAL_DMA_IRQHandler+0x236>
          hdma->XferHalfCpltCallback(hdma);
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	4798      	blx	r3
 8003b3e:	e7c6      	b.n	8003ace <HAL_DMA_IRQHandler+0x236>
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 8003b40:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_DMA_IRQHandler+0x33c>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	2302      	movs	r3, #2
 8003b46:	408b      	lsls	r3, r1
 8003b48:	4218      	tst	r0, r3
 8003b4a:	d01e      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x2f2>
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	f013 0f02 	tst.w	r3, #2
 8003b52:	d01a      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x2f2>
      if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	f013 0f20 	tst.w	r3, #32
 8003b5a:	d109      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x2d8>
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	f023 030a 	bic.w	r3, r3, #10
 8003b62:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8003b64:	2300      	movs	r3, #0
 8003b66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 8003b70:	4918      	ldr	r1, [pc, #96]	; (8003bd4 <HAL_DMA_IRQHandler+0x33c>)
 8003b72:	684b      	ldr	r3, [r1, #4]
 8003b74:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003b76:	2202      	movs	r2, #2
 8003b78:	4082      	lsls	r2, r0
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
      if(hdma->XferCpltCallback != NULL)
 8003b7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0a4      	beq.n	8003ace <HAL_DMA_IRQHandler+0x236>
        hdma->XferCpltCallback(hdma);
 8003b84:	4620      	mov	r0, r4
 8003b86:	4798      	blx	r3
 8003b88:	e7a1      	b.n	8003ace <HAL_DMA_IRQHandler+0x236>
    else if (( RESET != (BDMA->ISR & (BDMA_FLAG_TE0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TEIE)))
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_DMA_IRQHandler+0x33c>)
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	2308      	movs	r3, #8
 8003b90:	fa03 f101 	lsl.w	r1, r3, r1
 8003b94:	4208      	tst	r0, r1
 8003b96:	d09a      	beq.n	8003ace <HAL_DMA_IRQHandler+0x236>
 8003b98:	6813      	ldr	r3, [r2, #0]
 8003b9a:	f013 0f08 	tst.w	r3, #8
 8003b9e:	d096      	beq.n	8003ace <HAL_DMA_IRQHandler+0x236>
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 8003ba0:	6813      	ldr	r3, [r2, #0]
 8003ba2:	f023 030e 	bic.w	r3, r3, #14
 8003ba6:	6013      	str	r3, [r2, #0]
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 8003ba8:	480a      	ldr	r0, [pc, #40]	; (8003bd4 <HAL_DMA_IRQHandler+0x33c>)
 8003baa:	6842      	ldr	r2, [r0, #4]
 8003bac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003bae:	2301      	movs	r3, #1
 8003bb0:	fa03 f101 	lsl.w	r1, r3, r1
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	6042      	str	r2, [r0, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bb8:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003bc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003bc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d081      	beq.n	8003ace <HAL_DMA_IRQHandler+0x236>
        hdma->XferErrorCallback(hdma);
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4798      	blx	r3
 8003bce:	e77e      	b.n	8003ace <HAL_DMA_IRQHandler+0x236>
 8003bd0:	a7fdabf8 	.word	0xa7fdabf8
 8003bd4:	58025400 	.word	0x58025400

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bda:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bdc:	2400      	movs	r4, #0
 8003bde:	e03b      	b.n	8003c58 <HAL_GPIO_Init+0x80>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003be0:	2609      	movs	r6, #9
 8003be2:	e000      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003be4:	2600      	movs	r6, #0
 8003be6:	fa06 f60e 	lsl.w	r6, r6, lr
 8003bea:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003bec:	3302      	adds	r3, #2
 8003bee:	4e70      	ldr	r6, [pc, #448]	; (8003db0 <HAL_GPIO_Init+0x1d8>)
 8003bf0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8003bf4:	4b6f      	ldr	r3, [pc, #444]	; (8003db4 <HAL_GPIO_Init+0x1dc>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	43eb      	mvns	r3, r5
 8003bfa:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bfe:	684f      	ldr	r7, [r1, #4]
 8003c00:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003c04:	d001      	beq.n	8003c0a <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8003c06:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI_Ptr->IMR1 = temp;
 8003c0a:	4a6a      	ldr	r2, [pc, #424]	; (8003db4 <HAL_GPIO_Init+0x1dc>)
 8003c0c:	6016      	str	r6, [r2, #0]

        temp = EXTI_Ptr->EMR1;
 8003c0e:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003c10:	ea03 0206 	and.w	r2, r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c14:	684f      	ldr	r7, [r1, #4]
 8003c16:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003c1a:	d001      	beq.n	8003c20 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8003c1c:	ea45 0206 	orr.w	r2, r5, r6
        }
        EXTI_Ptr->EMR1 = temp;
 8003c20:	4e64      	ldr	r6, [pc, #400]	; (8003db4 <HAL_GPIO_Init+0x1dc>)
 8003c22:	6072      	str	r2, [r6, #4]
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c28:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003c2a:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c2e:	684f      	ldr	r7, [r1, #4]
 8003c30:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003c34:	d001      	beq.n	8003c3a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003c36:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR1 = temp;
 8003c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3e:	6016      	str	r6, [r2, #0]

        temp = EXTI->FTSR1;
 8003c40:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c44:	684e      	ldr	r6, [r1, #4]
 8003c46:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003c4a:	d001      	beq.n	8003c50 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8003c4c:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR1 = temp;
 8003c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c54:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c56:	3401      	adds	r4, #1
 8003c58:	2c0f      	cmp	r4, #15
 8003c5a:	f200 80a6 	bhi.w	8003daa <HAL_GPIO_Init+0x1d2>
    ioposition = ((uint32_t)0x01) << position;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c62:	680a      	ldr	r2, [r1, #0]
 8003c64:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8003c68:	42ab      	cmp	r3, r5
 8003c6a:	d1f4      	bne.n	8003c56 <HAL_GPIO_Init+0x7e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c6c:	684a      	ldr	r2, [r1, #4]
 8003c6e:	2a12      	cmp	r2, #18
 8003c70:	bf18      	it	ne
 8003c72:	2a02      	cmpne	r2, #2
 8003c74:	d112      	bne.n	8003c9c <HAL_GPIO_Init+0xc4>
        temp = GPIOx->AFR[position >> 3];
 8003c76:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8003c7a:	f10e 0e08 	add.w	lr, lr, #8
 8003c7e:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c82:	f004 0607 	and.w	r6, r4, #7
 8003c86:	00b6      	lsls	r6, r6, #2
 8003c88:	270f      	movs	r7, #15
 8003c8a:	40b7      	lsls	r7, r6
 8003c8c:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c90:	690f      	ldr	r7, [r1, #16]
 8003c92:	fa07 f606 	lsl.w	r6, r7, r6
 8003c96:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8003c98:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8003c9c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c9e:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f20e 	lsl.w	r2, r2, lr
 8003ca8:	43d2      	mvns	r2, r2
 8003caa:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cac:	684f      	ldr	r7, [r1, #4]
 8003cae:	f007 0703 	and.w	r7, r7, #3
 8003cb2:	fa07 f70e 	lsl.w	r7, r7, lr
 8003cb6:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8003cb8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cba:	684e      	ldr	r6, [r1, #4]
 8003cbc:	1e77      	subs	r7, r6, #1
 8003cbe:	2e11      	cmp	r6, #17
 8003cc0:	bf18      	it	ne
 8003cc2:	2f01      	cmpne	r7, #1
 8003cc4:	d901      	bls.n	8003cca <HAL_GPIO_Init+0xf2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc6:	2e12      	cmp	r6, #18
 8003cc8:	d10f      	bne.n	8003cea <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8003cca:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ccc:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cce:	68cf      	ldr	r7, [r1, #12]
 8003cd0:	fa07 f70e 	lsl.w	r7, r7, lr
 8003cd4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8003cd6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003cd8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cda:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003cde:	684e      	ldr	r6, [r1, #4]
 8003ce0:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8003ce4:	40a6      	lsls	r6, r4
 8003ce6:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8003ce8:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8003cea:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003cec:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003cee:	688b      	ldr	r3, [r1, #8]
 8003cf0:	fa03 f30e 	lsl.w	r3, r3, lr
 8003cf4:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8003cf6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cf8:	684b      	ldr	r3, [r1, #4]
 8003cfa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003cfe:	d0aa      	beq.n	8003c56 <HAL_GPIO_Init+0x7e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d00:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <HAL_GPIO_Init+0x1e0>)
 8003d02:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003d06:	f042 0202 	orr.w	r2, r2, #2
 8003d0a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003d1a:	08a3      	lsrs	r3, r4, #2
 8003d1c:	1c9e      	adds	r6, r3, #2
 8003d1e:	4a24      	ldr	r2, [pc, #144]	; (8003db0 <HAL_GPIO_Init+0x1d8>)
 8003d20:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d24:	f004 0603 	and.w	r6, r4, #3
 8003d28:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8003d2c:	260f      	movs	r6, #15
 8003d2e:	fa06 f60e 	lsl.w	r6, r6, lr
 8003d32:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d36:	4f21      	ldr	r7, [pc, #132]	; (8003dbc <HAL_GPIO_Init+0x1e4>)
 8003d38:	42b8      	cmp	r0, r7
 8003d3a:	f43f af53 	beq.w	8003be4 <HAL_GPIO_Init+0xc>
 8003d3e:	4e20      	ldr	r6, [pc, #128]	; (8003dc0 <HAL_GPIO_Init+0x1e8>)
 8003d40:	42b0      	cmp	r0, r6
 8003d42:	d022      	beq.n	8003d8a <HAL_GPIO_Init+0x1b2>
 8003d44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d48:	42b0      	cmp	r0, r6
 8003d4a:	d020      	beq.n	8003d8e <HAL_GPIO_Init+0x1b6>
 8003d4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d50:	42b0      	cmp	r0, r6
 8003d52:	d01e      	beq.n	8003d92 <HAL_GPIO_Init+0x1ba>
 8003d54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d58:	42b0      	cmp	r0, r6
 8003d5a:	d01c      	beq.n	8003d96 <HAL_GPIO_Init+0x1be>
 8003d5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d60:	42b0      	cmp	r0, r6
 8003d62:	d01a      	beq.n	8003d9a <HAL_GPIO_Init+0x1c2>
 8003d64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d68:	42b0      	cmp	r0, r6
 8003d6a:	d018      	beq.n	8003d9e <HAL_GPIO_Init+0x1c6>
 8003d6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d70:	42b0      	cmp	r0, r6
 8003d72:	d016      	beq.n	8003da2 <HAL_GPIO_Init+0x1ca>
 8003d74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d78:	42b0      	cmp	r0, r6
 8003d7a:	d014      	beq.n	8003da6 <HAL_GPIO_Init+0x1ce>
 8003d7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d80:	42b0      	cmp	r0, r6
 8003d82:	f43f af2d 	beq.w	8003be0 <HAL_GPIO_Init+0x8>
 8003d86:	260a      	movs	r6, #10
 8003d88:	e72d      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003d8a:	2601      	movs	r6, #1
 8003d8c:	e72b      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003d8e:	2602      	movs	r6, #2
 8003d90:	e729      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003d92:	2603      	movs	r6, #3
 8003d94:	e727      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003d96:	2604      	movs	r6, #4
 8003d98:	e725      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003d9a:	2605      	movs	r6, #5
 8003d9c:	e723      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003d9e:	2606      	movs	r6, #6
 8003da0:	e721      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003da2:	2607      	movs	r6, #7
 8003da4:	e71f      	b.n	8003be6 <HAL_GPIO_Init+0xe>
 8003da6:	2608      	movs	r6, #8
 8003da8:	e71d      	b.n	8003be6 <HAL_GPIO_Init+0xe>
      }      
    }
  }
}
 8003daa:	b003      	add	sp, #12
 8003dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dae:	bf00      	nop
 8003db0:	58000400 	.word	0x58000400
 8003db4:	58000080 	.word	0x58000080
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	58020000 	.word	0x58020000
 8003dc0:	58020400 	.word	0x58020400

08003dc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc4:	b90a      	cbnz	r2, 8003dca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8003dc6:	8341      	strh	r1, [r0, #26]
 8003dc8:	4770      	bx	lr
    GPIOx->BSRRL = GPIO_Pin;
 8003dca:	8301      	strh	r1, [r0, #24]
 8003dcc:	4770      	bx	lr

08003dce <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003dce:	6943      	ldr	r3, [r0, #20]
 8003dd0:	4059      	eors	r1, r3
 8003dd2:	6141      	str	r1, [r0, #20]
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ddc:	6803      	ldr	r3, [r0, #0]
 8003dde:	f013 0f01 	tst.w	r3, #1
 8003de2:	d03b      	beq.n	8003e5c <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003de4:	4bad      	ldr	r3, [pc, #692]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d02c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x72>
 8003df0:	4baa      	ldr	r3, [pc, #680]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df8:	2b18      	cmp	r3, #24
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e02:	d055      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xd8>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d159      	bne.n	8003ebc <HAL_RCC_OscConfig+0xe4>
 8003e08:	4ba4      	ldr	r3, [pc, #656]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e18:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e1a:	6863      	ldr	r3, [r4, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d064      	beq.n	8003eea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fd94 	bl	800294c <HAL_GetTick>
 8003e24:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b9d      	ldr	r3, [pc, #628]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e2e:	d115      	bne.n	8003e5c <HAL_RCC_OscConfig+0x84>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe fd8c 	bl	800294c <HAL_GetTick>
 8003e34:	1b40      	subs	r0, r0, r5
 8003e36:	2864      	cmp	r0, #100	; 0x64
 8003e38:	d9f5      	bls.n	8003e26 <HAL_RCC_OscConfig+0x4e>
          {
            return HAL_TIMEOUT;
 8003e3a:	2003      	movs	r0, #3
 8003e3c:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e3e:	4b97      	ldr	r3, [pc, #604]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d1d8      	bne.n	8003dfc <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4a:	4b94      	ldr	r3, [pc, #592]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e52:	d003      	beq.n	8003e5c <HAL_RCC_OscConfig+0x84>
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8274 	beq.w	8004344 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	f013 0f02 	tst.w	r3, #2
 8003e62:	f000 8084 	beq.w	8003f6e <HAL_RCC_OscConfig+0x196>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e66:	4b8d      	ldr	r3, [pc, #564]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f013 0f38 	tst.w	r3, #56	; 0x38
 8003e6e:	d050      	beq.n	8003f12 <HAL_RCC_OscConfig+0x13a>
 8003e70:	4b8a      	ldr	r3, [pc, #552]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e78:	2b18      	cmp	r3, #24
 8003e7a:	d045      	beq.n	8003f08 <HAL_RCC_OscConfig+0x130>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e7c:	68e3      	ldr	r3, [r4, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80ad 	beq.w	8003fde <HAL_RCC_OscConfig+0x206>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e84:	4985      	ldr	r1, [pc, #532]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003e86:	680a      	ldr	r2, [r1, #0]
 8003e88:	f022 0219 	bic.w	r2, r2, #25
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe fd5c 	bl	800294c <HAL_GetTick>
 8003e94:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e96:	4b81      	ldr	r3, [pc, #516]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f013 0f04 	tst.w	r3, #4
 8003e9e:	f040 808e 	bne.w	8003fbe <HAL_RCC_OscConfig+0x1e6>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fe fd53 	bl	800294c <HAL_GetTick>
 8003ea6:	1b40      	subs	r0, r0, r5
 8003ea8:	2802      	cmp	r0, #2
 8003eaa:	d9f4      	bls.n	8003e96 <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 8003eac:	2003      	movs	r0, #3
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb0:	4a7a      	ldr	r2, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003eb2:	6813      	ldr	r3, [r2, #0]
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e7ae      	b.n	8003e1a <HAL_RCC_OscConfig+0x42>
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_OscConfig+0xfe>
 8003ec2:	4b76      	ldr	r3, [pc, #472]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e7a1      	b.n	8003e1a <HAL_RCC_OscConfig+0x42>
 8003ed6:	4b71      	ldr	r3, [pc, #452]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e797      	b.n	8003e1a <HAL_RCC_OscConfig+0x42>
        tickstart = HAL_GetTick();
 8003eea:	f7fe fd2f 	bl	800294c <HAL_GetTick>
 8003eee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ef8:	d0b0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x84>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003efa:	f7fe fd27 	bl	800294c <HAL_GetTick>
 8003efe:	1b40      	subs	r0, r0, r5
 8003f00:	2864      	cmp	r0, #100	; 0x64
 8003f02:	d9f5      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8003f04:	2003      	movs	r0, #3
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f08:	4b64      	ldr	r3, [pc, #400]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f013 0f03 	tst.w	r3, #3
 8003f10:	d1b4      	bne.n	8003e7c <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f12:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f013 0f04 	tst.w	r3, #4
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCC_OscConfig+0x14c>
 8003f1c:	68e3      	ldr	r3, [r4, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8212 	beq.w	8004348 <HAL_RCC_OscConfig+0x570>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f24:	4a5d      	ldr	r2, [pc, #372]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	f023 0319 	bic.w	r3, r3, #25
 8003f2c:	68e1      	ldr	r1, [r4, #12]
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f32:	f7fe fd0b 	bl	800294c <HAL_GetTick>
 8003f36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f38:	4b58      	ldr	r3, [pc, #352]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f013 0f04 	tst.w	r3, #4
 8003f40:	d106      	bne.n	8003f50 <HAL_RCC_OscConfig+0x178>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fe fd03 	bl	800294c <HAL_GetTick>
 8003f46:	1b40      	subs	r0, r0, r5
 8003f48:	2802      	cmp	r0, #2
 8003f4a:	d9f5      	bls.n	8003f38 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4852      	ldr	r0, [pc, #328]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003f52:	6843      	ldr	r3, [r0, #4]
 8003f54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f58:	6921      	ldr	r1, [r4, #16]
 8003f5a:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 8003f5e:	fa92 f2a2 	rbit	r2, r2
 8003f62:	fab2 f282 	clz	r2, r2
 8003f66:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	6043      	str	r3, [r0, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	f013 0f10 	tst.w	r3, #16
 8003f74:	d066      	beq.n	8004044 <HAL_RCC_OscConfig+0x26c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d047      	beq.n	8004012 <HAL_RCC_OscConfig+0x23a>
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f8a:	2b18      	cmp	r3, #24
 8003f8c:	d03b      	beq.n	8004006 <HAL_RCC_OscConfig+0x22e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003f8e:	69e3      	ldr	r3, [r4, #28]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8085 	beq.w	80040a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f96:	4a41      	ldr	r2, [pc, #260]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003f98:	6813      	ldr	r3, [r2, #0]
 8003f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fcd4 	bl	800294c <HAL_GetTick>
 8003fa4:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fae:	d164      	bne.n	800407a <HAL_RCC_OscConfig+0x2a2>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fb0:	f7fe fccc 	bl	800294c <HAL_GetTick>
 8003fb4:	1b40      	subs	r0, r0, r5
 8003fb6:	2802      	cmp	r0, #2
 8003fb8:	d9f5      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8003fba:	2003      	movs	r0, #3
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbe:	4837      	ldr	r0, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003fc0:	6843      	ldr	r3, [r0, #4]
 8003fc2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fc6:	6921      	ldr	r1, [r4, #16]
 8003fc8:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 8003fcc:	fa92 f2a2 	rbit	r2, r2
 8003fd0:	fab2 f282 	clz	r2, r2
 8003fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	6043      	str	r3, [r0, #4]
 8003fdc:	e7c7      	b.n	8003f6e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_DISABLE();
 8003fde:	4a2f      	ldr	r2, [pc, #188]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003fe0:	6813      	ldr	r3, [r2, #0]
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fcb0 	bl	800294c <HAL_GetTick>
 8003fec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f013 0f04 	tst.w	r3, #4
 8003ff6:	d0ba      	beq.n	8003f6e <HAL_RCC_OscConfig+0x196>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fe fca8 	bl	800294c <HAL_GetTick>
 8003ffc:	1b40      	subs	r0, r0, r5
 8003ffe:	2802      	cmp	r0, #2
 8004000:	d9f5      	bls.n	8003fee <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004002:	2003      	movs	r0, #3
 8004004:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004006:	4b25      	ldr	r3, [pc, #148]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b01      	cmp	r3, #1
 8004010:	d1bd      	bne.n	8003f8e <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004012:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f413 7f80 	tst.w	r3, #256	; 0x100
 800401a:	d004      	beq.n	8004026 <HAL_RCC_OscConfig+0x24e>
 800401c:	69e3      	ldr	r3, [r4, #28]
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d001      	beq.n	8004026 <HAL_RCC_OscConfig+0x24e>
        return HAL_ERROR;
 8004022:	2001      	movs	r0, #1
 8004024:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004026:	481d      	ldr	r0, [pc, #116]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8004028:	6843      	ldr	r3, [r0, #4]
 800402a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800402e:	6a21      	ldr	r1, [r4, #32]
 8004030:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8004034:	fa92 f2a2 	rbit	r2, r2
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	fa01 f202 	lsl.w	r2, r1, r2
 8004040:	4313      	orrs	r3, r2
 8004042:	6043      	str	r3, [r0, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	f013 0f08 	tst.w	r3, #8
 800404a:	d051      	beq.n	80040f0 <HAL_RCC_OscConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800404c:	6963      	ldr	r3, [r4, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d03a      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8004054:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fe fc76 	bl	800294c <HAL_GetTick>
 8004060:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	f013 0f02 	tst.w	r3, #2
 800406a:	d141      	bne.n	80040f0 <HAL_RCC_OscConfig+0x318>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406c:	f7fe fc6e 	bl	800294c <HAL_GetTick>
 8004070:	1b40      	subs	r0, r0, r5
 8004072:	2802      	cmp	r0, #2
 8004074:	d9f5      	bls.n	8004062 <HAL_RCC_OscConfig+0x28a>
        {
          return HAL_TIMEOUT;
 8004076:	2003      	movs	r0, #3
 8004078:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800407a:	4808      	ldr	r0, [pc, #32]	; (800409c <HAL_RCC_OscConfig+0x2c4>)
 800407c:	6843      	ldr	r3, [r0, #4]
 800407e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004082:	6a21      	ldr	r1, [r4, #32]
 8004084:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8004088:	fa92 f2a2 	rbit	r2, r2
 800408c:	fab2 f282 	clz	r2, r2
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	4313      	orrs	r3, r2
 8004096:	6043      	str	r3, [r0, #4]
 8004098:	e7d4      	b.n	8004044 <HAL_RCC_OscConfig+0x26c>
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 80040a0:	4aac      	ldr	r2, [pc, #688]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040aa:	f7fe fc4f 	bl	800294c <HAL_GetTick>
 80040ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 80040b0:	4ba8      	ldr	r3, [pc, #672]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040b8:	d0c4      	beq.n	8004044 <HAL_RCC_OscConfig+0x26c>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040ba:	f7fe fc47 	bl	800294c <HAL_GetTick>
 80040be:	1b40      	subs	r0, r0, r5
 80040c0:	2802      	cmp	r0, #2
 80040c2:	d9f5      	bls.n	80040b0 <HAL_RCC_OscConfig+0x2d8>
            return HAL_TIMEOUT;
 80040c4:	2003      	movs	r0, #3
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c8:	4aa2      	ldr	r2, [pc, #648]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 80040ca:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fe fc3b 	bl	800294c <HAL_GetTick>
 80040d6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b9e      	ldr	r3, [pc, #632]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 80040da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040dc:	f013 0f02 	tst.w	r3, #2
 80040e0:	d006      	beq.n	80040f0 <HAL_RCC_OscConfig+0x318>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e2:	f7fe fc33 	bl	800294c <HAL_GetTick>
 80040e6:	1b40      	subs	r0, r0, r5
 80040e8:	2802      	cmp	r0, #2
 80040ea:	d9f5      	bls.n	80040d8 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 80040ec:	2003      	movs	r0, #3
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	f013 0f20 	tst.w	r3, #32
 80040f6:	d029      	beq.n	800414c <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80040f8:	69a3      	ldr	r3, [r4, #24]
 80040fa:	b19b      	cbz	r3, 8004124 <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040fc:	4a95      	ldr	r2, [pc, #596]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 80040fe:	6813      	ldr	r3, [r2, #0]
 8004100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004104:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8004106:	f7fe fc21 	bl	800294c <HAL_GetTick>
 800410a:	4605      	mov	r5, r0
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800410c:	4b91      	ldr	r3, [pc, #580]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004114:	d11a      	bne.n	800414c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004116:	f7fe fc19 	bl	800294c <HAL_GetTick>
 800411a:	1b40      	subs	r0, r0, r5
 800411c:	2802      	cmp	r0, #2
 800411e:	d9f5      	bls.n	800410c <HAL_RCC_OscConfig+0x334>
        {
          return HAL_TIMEOUT;
 8004120:	2003      	movs	r0, #3
 8004122:	bd38      	pop	{r3, r4, r5, pc}
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004124:	4a8b      	ldr	r2, [pc, #556]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800412c:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 800412e:	f7fe fc0d 	bl	800294c <HAL_GetTick>
 8004132:	4605      	mov	r5, r0
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004134:	4b87      	ldr	r3, [pc, #540]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800413c:	d006      	beq.n	800414c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800413e:	f7fe fc05 	bl	800294c <HAL_GetTick>
 8004142:	1b40      	subs	r0, r0, r5
 8004144:	2802      	cmp	r0, #2
 8004146:	d9f5      	bls.n	8004134 <HAL_RCC_OscConfig+0x35c>
        {
          return HAL_TIMEOUT;
 8004148:	2003      	movs	r0, #3
 800414a:	bd38      	pop	{r3, r4, r5, pc}
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	f013 0f04 	tst.w	r3, #4
 8004152:	d121      	bne.n	8004198 <HAL_RCC_OscConfig+0x3c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80f8 	beq.w	800434c <HAL_RCC_OscConfig+0x574>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800415c:	4a7d      	ldr	r2, [pc, #500]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 800415e:	6912      	ldr	r2, [r2, #16]
 8004160:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004164:	2a18      	cmp	r2, #24
 8004166:	f000 80f3 	beq.w	8004350 <HAL_RCC_OscConfig+0x578>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416a:	2b02      	cmp	r3, #2
 800416c:	d075      	beq.n	800425a <HAL_RCC_OscConfig+0x482>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4a79      	ldr	r2, [pc, #484]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004170:	6813      	ldr	r3, [r2, #0]
 8004172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fe fbe8 	bl	800294c <HAL_GetTick>
 800417c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b75      	ldr	r3, [pc, #468]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004186:	f000 80db 	beq.w	8004340 <HAL_RCC_OscConfig+0x568>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418a:	f7fe fbdf 	bl	800294c <HAL_GetTick>
 800418e:	1b00      	subs	r0, r0, r4
 8004190:	2802      	cmp	r0, #2
 8004192:	d9f4      	bls.n	800417e <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8004194:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8004196:	bd38      	pop	{r3, r4, r5, pc}
    PWR->CR1 |= PWR_CR1_DBP;
 8004198:	4a6f      	ldr	r2, [pc, #444]	; (8004358 <HAL_RCC_OscConfig+0x580>)
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80041a2:	f7fe fbd3 	bl	800294c <HAL_GetTick>
 80041a6:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041a8:	4b6b      	ldr	r3, [pc, #428]	; (8004358 <HAL_RCC_OscConfig+0x580>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041b0:	d106      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3e8>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041b2:	f7fe fbcb 	bl	800294c <HAL_GetTick>
 80041b6:	1b40      	subs	r0, r0, r5
 80041b8:	2864      	cmp	r0, #100	; 0x64
 80041ba:	d9f5      	bls.n	80041a8 <HAL_RCC_OscConfig+0x3d0>
        return HAL_TIMEOUT;
 80041bc:	2003      	movs	r0, #3
 80041be:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c0:	68a3      	ldr	r3, [r4, #8]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d01c      	beq.n	8004200 <HAL_RCC_OscConfig+0x428>
 80041c6:	bb0b      	cbnz	r3, 800420c <HAL_RCC_OscConfig+0x434>
 80041c8:	4b62      	ldr	r3, [pc, #392]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 80041ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	671a      	str	r2, [r3, #112]	; 0x70
 80041d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041d4:	f022 0204 	bic.w	r2, r2, #4
 80041d8:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041da:	68a3      	ldr	r3, [r4, #8]
 80041dc:	b363      	cbz	r3, 8004238 <HAL_RCC_OscConfig+0x460>
      tickstart = HAL_GetTick();
 80041de:	f7fe fbb5 	bl	800294c <HAL_GetTick>
 80041e2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	f013 0f02 	tst.w	r3, #2
 80041ec:	d1b2      	bne.n	8004154 <HAL_RCC_OscConfig+0x37c>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fe fbad 	bl	800294c <HAL_GetTick>
 80041f2:	1b40      	subs	r0, r0, r5
 80041f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80041f8:	4298      	cmp	r0, r3
 80041fa:	d9f3      	bls.n	80041e4 <HAL_RCC_OscConfig+0x40c>
          return HAL_TIMEOUT;
 80041fc:	2003      	movs	r0, #3
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004200:	4a54      	ldr	r2, [pc, #336]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004202:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
 800420a:	e7e6      	b.n	80041da <HAL_RCC_OscConfig+0x402>
 800420c:	2b05      	cmp	r3, #5
 800420e:	d009      	beq.n	8004224 <HAL_RCC_OscConfig+0x44c>
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004212:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	671a      	str	r2, [r3, #112]	; 0x70
 800421a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800421c:	f022 0204 	bic.w	r2, r2, #4
 8004220:	671a      	str	r2, [r3, #112]	; 0x70
 8004222:	e7da      	b.n	80041da <HAL_RCC_OscConfig+0x402>
 8004224:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004226:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004228:	f042 0204 	orr.w	r2, r2, #4
 800422c:	671a      	str	r2, [r3, #112]	; 0x70
 800422e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	671a      	str	r2, [r3, #112]	; 0x70
 8004236:	e7d0      	b.n	80041da <HAL_RCC_OscConfig+0x402>
      tickstart = HAL_GetTick();
 8004238:	f7fe fb88 	bl	800294c <HAL_GetTick>
 800423c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	4b45      	ldr	r3, [pc, #276]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f013 0f02 	tst.w	r3, #2
 8004246:	d085      	beq.n	8004154 <HAL_RCC_OscConfig+0x37c>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fe fb80 	bl	800294c <HAL_GetTick>
 800424c:	1b40      	subs	r0, r0, r5
 800424e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004252:	4298      	cmp	r0, r3
 8004254:	d9f3      	bls.n	800423e <HAL_RCC_OscConfig+0x466>
          return HAL_TIMEOUT;
 8004256:	2003      	movs	r0, #3
 8004258:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_PLL_DISABLE();
 800425a:	4a3e      	ldr	r2, [pc, #248]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 800425c:	6813      	ldr	r3, [r2, #0]
 800425e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004262:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004264:	f7fe fb72 	bl	800294c <HAL_GetTick>
 8004268:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004272:	d006      	beq.n	8004282 <HAL_RCC_OscConfig+0x4aa>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004274:	f7fe fb6a 	bl	800294c <HAL_GetTick>
 8004278:	1b40      	subs	r0, r0, r5
 800427a:	2802      	cmp	r0, #2
 800427c:	d9f5      	bls.n	800426a <HAL_RCC_OscConfig+0x492>
            return HAL_TIMEOUT;
 800427e:	2003      	movs	r0, #3
 8004280:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004282:	4b34      	ldr	r3, [pc, #208]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004284:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004286:	4a35      	ldr	r2, [pc, #212]	; (800435c <HAL_RCC_OscConfig+0x584>)
 8004288:	400a      	ands	r2, r1
 800428a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800428c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800428e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8004292:	430a      	orrs	r2, r1
 8004294:	629a      	str	r2, [r3, #40]	; 0x28
 8004296:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004298:	3a01      	subs	r2, #1
 800429a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800429e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042a0:	3901      	subs	r1, #1
 80042a2:	0249      	lsls	r1, r1, #9
 80042a4:	b289      	uxth	r1, r1
 80042a6:	430a      	orrs	r2, r1
 80042a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042aa:	3901      	subs	r1, #1
 80042ac:	0409      	lsls	r1, r1, #16
 80042ae:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80042b2:	430a      	orrs	r2, r1
 80042b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80042b6:	3901      	subs	r1, #1
 80042b8:	0609      	lsls	r1, r1, #24
 80042ba:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80042be:	430a      	orrs	r2, r1
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042c4:	4a26      	ldr	r2, [pc, #152]	; (8004360 <HAL_RCC_OscConfig+0x588>)
 80042c6:	400a      	ands	r2, r1
 80042c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80042ca:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80042ce:	fa91 f1a1 	rbit	r1, r1
 80042d2:	fab1 f181 	clz	r1, r1
 80042d6:	fa00 f101 	lsl.w	r1, r0, r1
 80042da:	430a      	orrs	r2, r1
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	f022 020c 	bic.w	r2, r2, #12
 80042e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80042e6:	430a      	orrs	r2, r1
 80042e8:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ec:	f022 0202 	bic.w	r2, r2, #2
 80042f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80042f2:	430a      	orrs	r2, r1
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042fc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004304:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800430c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800431c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800431e:	f7fe fb15 	bl	800294c <HAL_GetTick>
 8004322:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_OscConfig+0x57c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800432c:	d106      	bne.n	800433c <HAL_RCC_OscConfig+0x564>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432e:	f7fe fb0d 	bl	800294c <HAL_GetTick>
 8004332:	1b00      	subs	r0, r0, r4
 8004334:	2802      	cmp	r0, #2
 8004336:	d9f5      	bls.n	8004324 <HAL_RCC_OscConfig+0x54c>
            return HAL_TIMEOUT;
 8004338:	2003      	movs	r0, #3
 800433a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800433c:	2000      	movs	r0, #0
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	2000      	movs	r0, #0
 8004342:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8004344:	2001      	movs	r0, #1
 8004346:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8004348:	2001      	movs	r0, #1
 800434a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800434c:	2000      	movs	r0, #0
 800434e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004350:	2001      	movs	r0, #1
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	58024400 	.word	0x58024400
 8004358:	58024800 	.word	0x58024800
 800435c:	fffffc0c 	.word	0xfffffc0c
 8004360:	ffff0007 	.word	0xffff0007

08004364 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004364:	4b6d      	ldr	r3, [pc, #436]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436c:	2b10      	cmp	r3, #16
 800436e:	f000 80d2 	beq.w	8004516 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004372:	2b18      	cmp	r3, #24
 8004374:	d010      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x34>
 8004376:	b10b      	cbz	r3, 800437c <HAL_RCC_GetSysClockFreq+0x18>
      }
      
    break;

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004378:	4869      	ldr	r0, [pc, #420]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800437a:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437c:	4b67      	ldr	r3, [pc, #412]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f013 0f20 	tst.w	r3, #32
 8004384:	d101      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x26>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004386:	4867      	ldr	r0, [pc, #412]	; (8004524 <HAL_RCC_GetSysClockFreq+0x1c0>)
  default:
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
 8004388:	4770      	bx	lr
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800438a:	4b64      	ldr	r3, [pc, #400]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004392:	4864      	ldr	r0, [pc, #400]	; (8004524 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004394:	40d8      	lsrs	r0, r3
 8004396:	4770      	bx	lr
{
 8004398:	b4f0      	push	{r4, r5, r6, r7}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800439a:	4d60      	ldr	r5, [pc, #384]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800439c:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800439e:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80043a2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80043a4:	f3c7 1705 	ubfx	r7, r7, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80043a8:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 80043aa:	f006 0601 	and.w	r6, r6, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80043ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80043b0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80043b4:	fb03 f306 	mul.w	r3, r3, r6
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80043c0:	2c01      	cmp	r4, #1
 80043c2:	d060      	beq.n	8004486 <HAL_RCC_GetSysClockFreq+0x122>
 80043c4:	b1f4      	cbz	r4, 8004404 <HAL_RCC_GetSysClockFreq+0xa0>
 80043c6:	2c02      	cmp	r4, #2
 80043c8:	f000 8089 	beq.w	80044de <HAL_RCC_GetSysClockFreq+0x17a>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80043cc:	4b54      	ldr	r3, [pc, #336]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043ce:	fbb3 f3f7 	udiv	r3, r3, r7
 80043d2:	ee07 3a10 	vmov	s14, r3
 80043d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80043da:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	eddf 6a51 	vldr	s13, [pc, #324]	; 8004528 <HAL_RCC_GetSysClockFreq+0x1c4>
 80043e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80043ea:	ee06 3a90 	vmov	s13, r3
 80043ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80043f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fe:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8004402:	e05b      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x158>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004404:	4b45      	ldr	r3, [pc, #276]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f013 0f20 	tst.w	r3, #32
 800440c:	d01f      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0xea>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800440e:	4a43      	ldr	r2, [pc, #268]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004410:	6813      	ldr	r3, [r2, #0]
 8004412:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004416:	4843      	ldr	r0, [pc, #268]	; (8004524 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004418:	40d8      	lsrs	r0, r3
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800441a:	fbb0 f3f7 	udiv	r3, r0, r7
 800441e:	ee07 3a10 	vmov	s14, r3
 8004422:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004426:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004528 <HAL_RCC_GetSysClockFreq+0x1c4>
 8004430:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004434:	ee06 3a90 	vmov	s13, r3
 8004438:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800443c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800444c:	e036      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x158>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800444e:	4835      	ldr	r0, [pc, #212]	; (8004524 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004450:	fbb0 f3f7 	udiv	r3, r0, r7
 8004454:	ee07 3a10 	vmov	s14, r3
 8004458:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800445c:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004464:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004528 <HAL_RCC_GetSysClockFreq+0x1c4>
 8004468:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800446c:	ee06 3a90 	vmov	s13, r3
 8004470:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004484:	e01a      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x158>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8004486:	4926      	ldr	r1, [pc, #152]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004488:	fbb1 f3f7 	udiv	r3, r1, r7
 800448c:	ee07 3a10 	vmov	s14, r3
 8004490:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004528 <HAL_RCC_GetSysClockFreq+0x1c4>
 80044a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044a4:	ee06 3a90 	vmov	s13, r3
 80044a8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80044ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b8:	ee27 7a27 	vmul.f32	s14, s14, s15
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80044c4:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d6:	ee17 0a90 	vmov	r0, s15
}
 80044da:	bcf0      	pop	{r4, r5, r6, r7}
 80044dc:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80044de:	4a13      	ldr	r2, [pc, #76]	; (800452c <HAL_RCC_GetSysClockFreq+0x1c8>)
 80044e0:	fbb2 f3f7 	udiv	r3, r2, r7
 80044e4:	ee07 3a10 	vmov	s14, r3
 80044e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8004528 <HAL_RCC_GetSysClockFreq+0x1c4>
 80044f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044fc:	ee06 3a90 	vmov	s13, r3
 8004500:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004510:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8004514:	e7d2      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x158>
    sysclockfreq = HSE_VALUE;
 8004516:	4805      	ldr	r0, [pc, #20]	; (800452c <HAL_RCC_GetSysClockFreq+0x1c8>)
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
 8004520:	003d0900 	.word	0x003d0900
 8004524:	03d09000 	.word	0x03d09000
 8004528:	39000000 	.word	0x39000000
 800452c:	007a1200 	.word	0x007a1200

08004530 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004530:	4b77      	ldr	r3, [pc, #476]	; (8004710 <HAL_RCC_ClockConfig+0x1e0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	428b      	cmp	r3, r1
 800453a:	d20c      	bcs.n	8004556 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453c:	4a74      	ldr	r2, [pc, #464]	; (8004710 <HAL_RCC_ClockConfig+0x1e0>)
 800453e:	6813      	ldr	r3, [r2, #0]
 8004540:	f023 0307 	bic.w	r3, r3, #7
 8004544:	430b      	orrs	r3, r1
 8004546:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004548:	6813      	ldr	r3, [r2, #0]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	4299      	cmp	r1, r3
 8004550:	d001      	beq.n	8004556 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8004552:	2001      	movs	r0, #1
 8004554:	4770      	bx	lr
{
 8004556:	b570      	push	{r4, r5, r6, lr}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004558:	6803      	ldr	r3, [r0, #0]
 800455a:	f013 0f02 	tst.w	r3, #2
 800455e:	d006      	beq.n	800456e <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4a6c      	ldr	r2, [pc, #432]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 8004562:	6993      	ldr	r3, [r2, #24]
 8004564:	f023 030f 	bic.w	r3, r3, #15
 8004568:	68c4      	ldr	r4, [r0, #12]
 800456a:	4323      	orrs	r3, r4
 800456c:	6193      	str	r3, [r2, #24]
 800456e:	460d      	mov	r5, r1
 8004570:	4604      	mov	r4, r0
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	6803      	ldr	r3, [r0, #0]
 8004574:	f013 0f01 	tst.w	r3, #1
 8004578:	d072      	beq.n	8004660 <HAL_RCC_ClockConfig+0x130>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800457a:	4a66      	ldr	r2, [pc, #408]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 800457c:	6993      	ldr	r3, [r2, #24]
 800457e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004582:	6881      	ldr	r1, [r0, #8]
 8004584:	430b      	orrs	r3, r1
 8004586:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004588:	6843      	ldr	r3, [r0, #4]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d027      	beq.n	80045de <HAL_RCC_ClockConfig+0xae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458e:	2b03      	cmp	r3, #3
 8004590:	d02b      	beq.n	80045ea <HAL_RCC_ClockConfig+0xba>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004592:	2b01      	cmp	r3, #1
 8004594:	d030      	beq.n	80045f8 <HAL_RCC_ClockConfig+0xc8>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004596:	4a5f      	ldr	r2, [pc, #380]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	f012 0f04 	tst.w	r2, #4
 800459e:	f000 80b5 	beq.w	800470c <HAL_RCC_ClockConfig+0x1dc>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	495c      	ldr	r1, [pc, #368]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 80045a4:	690a      	ldr	r2, [r1, #16]
 80045a6:	f022 0207 	bic.w	r2, r2, #7
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80045ae:	f7fe f9cd 	bl	800294c <HAL_GetTick>
 80045b2:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d025      	beq.n	8004606 <HAL_RCC_ClockConfig+0xd6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d032      	beq.n	8004624 <HAL_RCC_ClockConfig+0xf4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d03f      	beq.n	8004642 <HAL_RCC_ClockConfig+0x112>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80045c2:	4b54      	ldr	r3, [pc, #336]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f013 0f38 	tst.w	r3, #56	; 0x38
 80045ca:	d049      	beq.n	8004660 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045cc:	f7fe f9be 	bl	800294c <HAL_GetTick>
 80045d0:	1b80      	subs	r0, r0, r6
 80045d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80045d6:	4298      	cmp	r0, r3
 80045d8:	d9f3      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x92>
            return HAL_TIMEOUT;
 80045da:	2003      	movs	r0, #3
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80045e4:	d1dd      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80045e6:	2001      	movs	r0, #1
 80045e8:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4a4a      	ldr	r2, [pc, #296]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80045f2:	d1d6      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80045f4:	2001      	movs	r0, #1
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80045f8:	4a46      	ldr	r2, [pc, #280]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004600:	d1cf      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8004602:	2001      	movs	r0, #1
 8004604:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8004606:	4b43      	ldr	r3, [pc, #268]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460e:	2b10      	cmp	r3, #16
 8004610:	d026      	beq.n	8004660 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004612:	f7fe f99b 	bl	800294c <HAL_GetTick>
 8004616:	1b80      	subs	r0, r0, r6
 8004618:	f241 3388 	movw	r3, #5000	; 0x1388
 800461c:	4298      	cmp	r0, r3
 800461e:	d9f2      	bls.n	8004606 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8004620:	2003      	movs	r0, #3
 8004622:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004624:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800462c:	2b18      	cmp	r3, #24
 800462e:	d017      	beq.n	8004660 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fe f98c 	bl	800294c <HAL_GetTick>
 8004634:	1b80      	subs	r0, r0, r6
 8004636:	f241 3388 	movw	r3, #5000	; 0x1388
 800463a:	4298      	cmp	r0, r3
 800463c:	d9f2      	bls.n	8004624 <HAL_RCC_ClockConfig+0xf4>
            return HAL_TIMEOUT;
 800463e:	2003      	movs	r0, #3
 8004640:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8004642:	4b34      	ldr	r3, [pc, #208]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800464a:	2b08      	cmp	r3, #8
 800464c:	d008      	beq.n	8004660 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fe f97d 	bl	800294c <HAL_GetTick>
 8004652:	1b80      	subs	r0, r0, r6
 8004654:	f241 3388 	movw	r3, #5000	; 0x1388
 8004658:	4298      	cmp	r0, r3
 800465a:	d9f2      	bls.n	8004642 <HAL_RCC_ClockConfig+0x112>
            return HAL_TIMEOUT;
 800465c:	2003      	movs	r0, #3
 800465e:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004660:	4b2b      	ldr	r3, [pc, #172]	; (8004710 <HAL_RCC_ClockConfig+0x1e0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	429d      	cmp	r5, r3
 800466a:	d20c      	bcs.n	8004686 <HAL_RCC_ClockConfig+0x156>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466c:	4a28      	ldr	r2, [pc, #160]	; (8004710 <HAL_RCC_ClockConfig+0x1e0>)
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	f023 0307 	bic.w	r3, r3, #7
 8004674:	432b      	orrs	r3, r5
 8004676:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004678:	6813      	ldr	r3, [r2, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	429d      	cmp	r5, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCC_ClockConfig+0x156>
      return HAL_ERROR;
 8004682:	2001      	movs	r0, #1
}
 8004684:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	f013 0f04 	tst.w	r3, #4
 800468c:	d006      	beq.n	800469c <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800468e:	4a21      	ldr	r2, [pc, #132]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 8004690:	6993      	ldr	r3, [r2, #24]
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	6921      	ldr	r1, [r4, #16]
 8004698:	430b      	orrs	r3, r1
 800469a:	6193      	str	r3, [r2, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f013 0f08 	tst.w	r3, #8
 80046a2:	d006      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x182>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046a4:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 80046a6:	69d3      	ldr	r3, [r2, #28]
 80046a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ac:	6961      	ldr	r1, [r4, #20]
 80046ae:	430b      	orrs	r3, r1
 80046b0:	61d3      	str	r3, [r2, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	f013 0f10 	tst.w	r3, #16
 80046b8:	d006      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x198>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046ba:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 80046bc:	69d3      	ldr	r3, [r2, #28]
 80046be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046c2:	69a1      	ldr	r1, [r4, #24]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	61d3      	str	r3, [r2, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f013 0f20 	tst.w	r3, #32
 80046ce:	d006      	beq.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046d0:	4a10      	ldr	r2, [pc, #64]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 80046d2:	6a13      	ldr	r3, [r2, #32]
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	69e1      	ldr	r1, [r4, #28]
 80046da:	430b      	orrs	r3, r1
 80046dc:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80046de:	f7ff fe41 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <HAL_RCC_ClockConfig+0x1e4>)
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ee:	fa92 f2a2 	rbit	r2, r2
 80046f2:	fab2 f282 	clz	r2, r2
 80046f6:	40d3      	lsrs	r3, r2
 80046f8:	4a07      	ldr	r2, [pc, #28]	; (8004718 <HAL_RCC_ClockConfig+0x1e8>)
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	40d8      	lsrs	r0, r3
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <HAL_RCC_ClockConfig+0x1ec>)
 8004700:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004702:	2000      	movs	r0, #0
 8004704:	f7fd fad2 	bl	8001cac <HAL_InitTick>
  return HAL_OK;
 8004708:	2000      	movs	r0, #0
 800470a:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 800470c:	2001      	movs	r0, #1
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	52002000 	.word	0x52002000
 8004714:	58024400 	.word	0x58024400
 8004718:	080083fc 	.word	0x080083fc
 800471c:	20000090 	.word	0x20000090

08004720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004720:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8004722:	f001 f863 	bl	80057ec <HAL_RCCEx_GetD1SysClockFreq>
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_RCC_GetHCLKFreq+0x28>)
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	2201      	movs	r2, #1
 8004730:	fa92 f2a2 	rbit	r2, r2
 8004734:	fab2 f282 	clz	r2, r2
 8004738:	40d3      	lsrs	r3, r2
 800473a:	4a04      	ldr	r2, [pc, #16]	; (800474c <HAL_RCC_GetHCLKFreq+0x2c>)
 800473c:	5cd3      	ldrb	r3, [r2, r3]
 800473e:	40d8      	lsrs	r0, r3
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <HAL_RCC_GetHCLKFreq+0x30>)
 8004742:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8004744:	bd08      	pop	{r3, pc}
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400
 800474c:	080083fc 	.word	0x080083fc
 8004750:	20000094 	.word	0x20000094

08004754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004754:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8004756:	f7ff ffe3 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004762:	2210      	movs	r2, #16
 8004764:	fa92 f2a2 	rbit	r2, r2
 8004768:	fab2 f282 	clz	r2, r2
 800476c:	40d3      	lsrs	r3, r2
 800476e:	4a03      	ldr	r2, [pc, #12]	; (800477c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004770:	5cd3      	ldrb	r3, [r2, r3]
}
 8004772:	40d8      	lsrs	r0, r3
 8004774:	bd08      	pop	{r3, pc}
 8004776:	bf00      	nop
 8004778:	58024400 	.word	0x58024400
 800477c:	080083fc 	.word	0x080083fc

08004780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004780:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8004782:	f7ff ffcd 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8004786:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800478e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004792:	fa92 f2a2 	rbit	r2, r2
 8004796:	fab2 f282 	clz	r2, r2
 800479a:	40d3      	lsrs	r3, r2
 800479c:	4a02      	ldr	r2, [pc, #8]	; (80047a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800479e:	5cd3      	ldrb	r3, [r2, r3]
}
 80047a0:	40d8      	lsrs	r0, r3
 80047a2:	bd08      	pop	{r3, pc}
 80047a4:	58024400 	.word	0x58024400
 80047a8:	080083fc 	.word	0x080083fc

080047ac <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80047ac:	233f      	movs	r3, #63	; 0x3f
 80047ae:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <HAL_RCC_GetClockConfig+0x4c>)
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	f002 0207 	and.w	r2, r2, #7
 80047b8:	6042      	str	r2, [r0, #4]

  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80047c0:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	f002 020f 	and.w	r2, r2, #15
 80047c8:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80047d0:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80047d8:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80047e0:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e8:	61c3      	str	r3, [r0, #28]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_RCC_GetClockConfig+0x50>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	52002000 	.word	0x52002000

08004800 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8004800:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  
  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004802:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <RCCEx_PLL2_Config+0xbc>)
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b03      	cmp	r3, #3
 800480c:	d053      	beq.n	80048b6 <RCCEx_PLL2_Config+0xb6>
 800480e:	4605      	mov	r5, r0
  
  
  else    
  {  
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004810:	4a2a      	ldr	r2, [pc, #168]	; (80048bc <RCCEx_PLL2_Config+0xbc>)
 8004812:	6813      	ldr	r3, [r2, #0]
 8004814:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004818:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481a:	f7fe f897 	bl	800294c <HAL_GetTick>
 800481e:	4604      	mov	r4, r0
    
    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004820:	4b26      	ldr	r3, [pc, #152]	; (80048bc <RCCEx_PLL2_Config+0xbc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004828:	d006      	beq.n	8004838 <RCCEx_PLL2_Config+0x38>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800482a:	f7fe f88f 	bl	800294c <HAL_GetTick>
 800482e:	1b00      	subs	r0, r0, r4
 8004830:	2802      	cmp	r0, #2
 8004832:	d9f5      	bls.n	8004820 <RCCEx_PLL2_Config+0x20>
      {
        return HAL_TIMEOUT;
 8004834:	2003      	movs	r0, #3
 8004836:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    
    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <RCCEx_PLL2_Config+0xbc>)
 800483a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800483c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004840:	6829      	ldr	r1, [r5, #0]
 8004842:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004846:	6293      	str	r3, [r2, #40]	; 0x28
 8004848:	686b      	ldr	r3, [r5, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004850:	68a9      	ldr	r1, [r5, #8]
 8004852:	3901      	subs	r1, #1
 8004854:	0249      	lsls	r1, r1, #9
 8004856:	b289      	uxth	r1, r1
 8004858:	430b      	orrs	r3, r1
 800485a:	68e9      	ldr	r1, [r5, #12]
 800485c:	3901      	subs	r1, #1
 800485e:	0409      	lsls	r1, r1, #16
 8004860:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004864:	430b      	orrs	r3, r1
 8004866:	6929      	ldr	r1, [r5, #16]
 8004868:	3901      	subs	r1, #1
 800486a:	0609      	lsls	r1, r1, #24
 800486c:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004870:	430b      	orrs	r3, r1
 8004872:	6393      	str	r3, [r2, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);
    
    /* Select PLL2 input reference frequency range: VCI */  
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004874:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004876:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800487a:	6969      	ldr	r1, [r5, #20]
 800487c:	430b      	orrs	r3, r1
 800487e:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004880:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004882:	f023 0320 	bic.w	r3, r3, #32
 8004886:	69a9      	ldr	r1, [r5, #24]
 8004888:	430b      	orrs	r3, r1
 800488a:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    
    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800488c:	6813      	ldr	r3, [r2, #0]
 800488e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004892:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004894:	f7fe f85a 	bl	800294c <HAL_GetTick>
 8004898:	4604      	mov	r4, r0
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <RCCEx_PLL2_Config+0xbc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80048a2:	d106      	bne.n	80048b2 <RCCEx_PLL2_Config+0xb2>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048a4:	f7fe f852 	bl	800294c <HAL_GetTick>
 80048a8:	1b00      	subs	r0, r0, r4
 80048aa:	2802      	cmp	r0, #2
 80048ac:	d9f5      	bls.n	800489a <RCCEx_PLL2_Config+0x9a>
      {
        return HAL_TIMEOUT;
 80048ae:	2003      	movs	r0, #3
    
  }
  
  
  return status;
}
 80048b0:	bd38      	pop	{r3, r4, r5, pc}
  return status;
 80048b2:	2000      	movs	r0, #0
 80048b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80048b6:	2001      	movs	r0, #1
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
 80048ba:	bf00      	nop
 80048bc:	58024400 	.word	0x58024400

080048c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80048c0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
  
  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048c2:	4b2e      	ldr	r3, [pc, #184]	; (800497c <RCCEx_PLL3_Config+0xbc>)
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d053      	beq.n	8004976 <RCCEx_PLL3_Config+0xb6>
 80048ce:	4605      	mov	r5, r0
  
  
  else    
  { 
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048d0:	4a2a      	ldr	r2, [pc, #168]	; (800497c <RCCEx_PLL3_Config+0xbc>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048da:	f7fe f837 	bl	800294c <HAL_GetTick>
 80048de:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 80048e0:	4b26      	ldr	r3, [pc, #152]	; (800497c <RCCEx_PLL3_Config+0xbc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80048e8:	d006      	beq.n	80048f8 <RCCEx_PLL3_Config+0x38>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048ea:	f7fe f82f 	bl	800294c <HAL_GetTick>
 80048ee:	1b00      	subs	r0, r0, r4
 80048f0:	2802      	cmp	r0, #2
 80048f2:	d9f5      	bls.n	80048e0 <RCCEx_PLL3_Config+0x20>
      {
        return HAL_TIMEOUT;
 80048f4:	2003      	movs	r0, #3
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    
    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048f8:	4a20      	ldr	r2, [pc, #128]	; (800497c <RCCEx_PLL3_Config+0xbc>)
 80048fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80048fc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004900:	6829      	ldr	r1, [r5, #0]
 8004902:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8004906:	6293      	str	r3, [r2, #40]	; 0x28
 8004908:	686b      	ldr	r3, [r5, #4]
 800490a:	3b01      	subs	r3, #1
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	68a9      	ldr	r1, [r5, #8]
 8004912:	3901      	subs	r1, #1
 8004914:	0249      	lsls	r1, r1, #9
 8004916:	b289      	uxth	r1, r1
 8004918:	430b      	orrs	r3, r1
 800491a:	68e9      	ldr	r1, [r5, #12]
 800491c:	3901      	subs	r1, #1
 800491e:	0409      	lsls	r1, r1, #16
 8004920:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004924:	430b      	orrs	r3, r1
 8004926:	6929      	ldr	r1, [r5, #16]
 8004928:	3901      	subs	r1, #1
 800492a:	0609      	lsls	r1, r1, #24
 800492c:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004930:	430b      	orrs	r3, r1
 8004932:	6413      	str	r3, [r2, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);
    
    /* Select PLL3 input reference frequency range: VCI */  
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004934:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004936:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800493a:	6969      	ldr	r1, [r5, #20]
 800493c:	430b      	orrs	r3, r1
 800493e:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004940:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004942:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004946:	69a9      	ldr	r1, [r5, #24]
 8004948:	430b      	orrs	r3, r1
 800494a:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    
    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800494c:	6813      	ldr	r3, [r2, #0]
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004954:	f7fd fffa 	bl	800294c <HAL_GetTick>
 8004958:	4604      	mov	r4, r0
    
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <RCCEx_PLL3_Config+0xbc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004962:	d106      	bne.n	8004972 <RCCEx_PLL3_Config+0xb2>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004964:	f7fd fff2 	bl	800294c <HAL_GetTick>
 8004968:	1b00      	subs	r0, r0, r4
 800496a:	2802      	cmp	r0, #2
 800496c:	d9f5      	bls.n	800495a <RCCEx_PLL3_Config+0x9a>
      {
        return HAL_TIMEOUT;
 800496e:	2003      	movs	r0, #3
    
  }
  
  
  return status;
}
 8004970:	bd38      	pop	{r3, r4, r5, pc}
  return status;
 8004972:	2000      	movs	r0, #0
 8004974:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004976:	2001      	movs	r0, #1
 8004978:	bd38      	pop	{r3, r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	58024400 	.word	0x58024400

08004980 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8004984:	6803      	ldr	r3, [r0, #0]
 8004986:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800498a:	d034      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800498c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004992:	d01a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004994:	d911      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800499a:	d020      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800499c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049a0:	d127      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a2:	2600      	movs	r6, #0
    if(ret == HAL_OK)
 80049a4:	2e00      	cmp	r6, #0
 80049a6:	d134      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x92>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049a8:	4aa1      	ldr	r2, [pc, #644]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80049aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80049ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049b0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80049b2:	430b      	orrs	r3, r1
 80049b4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049b6:	4635      	mov	r5, r6
 80049b8:	e01f      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80049ba:	b9d3      	cbnz	r3, 80049f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049bc:	4a9c      	ldr	r2, [pc, #624]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80049be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c6:	2600      	movs	r6, #0
      break;
 80049c8:	e7ec      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x24>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ca:	4a99      	ldr	r2, [pc, #612]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80049cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80049d4:	3004      	adds	r0, #4
 80049d6:	f7ff ff13 	bl	8004800 <RCCEx_PLL2_Config>
 80049da:	4606      	mov	r6, r0
      break;
 80049dc:	e7e2      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x24>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80049de:	4a94      	ldr	r2, [pc, #592]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80049e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80049e8:	3024      	adds	r0, #36	; 0x24
 80049ea:	f7ff ff69 	bl	80048c0 <RCCEx_PLL3_Config>
 80049ee:	4606      	mov	r6, r0
      break;
 80049f0:	e7d8      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x24>
      ret = HAL_ERROR;
 80049f2:	2601      	movs	r6, #1
 80049f4:	e7d6      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x24>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f6:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049f8:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a00:	d017      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d83e      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a08:	e8df f003 	tbb	[pc, r3]
 8004a0c:	0a322805 	.word	0x0a322805
 8004a10:	0a          	.byte	0x0a
 8004a11:	00          	.byte	0x00
      status |= ret;
 8004a12:	4635      	mov	r5, r6
 8004a14:	e7f1      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a16:	4a86      	ldr	r2, [pc, #536]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004a20:	2e00      	cmp	r6, #0
 8004a22:	d132      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a24:	4a82      	ldr	r2, [pc, #520]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a26:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a28:	f023 0307 	bic.w	r3, r3, #7
 8004a2c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23)
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a38:	d03e      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d053      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a40:	d826      	bhi.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a42:	b363      	cbz	r3, 8004a9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d128      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a48:	4a79      	ldr	r2, [pc, #484]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a50:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a52:	1d20      	adds	r0, r4, #4
 8004a54:	f7ff fed4 	bl	8004800 <RCCEx_PLL2_Config>
 8004a58:	4606      	mov	r6, r0
      break;
 8004a5a:	e025      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a5c:	4a74      	ldr	r2, [pc, #464]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a66:	1d20      	adds	r0, r4, #4
 8004a68:	f7ff feca 	bl	8004800 <RCCEx_PLL2_Config>
 8004a6c:	4606      	mov	r6, r0
      break;
 8004a6e:	e7d7      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004a70:	4a6f      	ldr	r2, [pc, #444]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a78:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004a7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a7e:	f7ff ff1f 	bl	80048c0 <RCCEx_PLL3_Config>
 8004a82:	4606      	mov	r6, r0
      break;
 8004a84:	e7cc      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      ret = HAL_ERROR;
 8004a86:	2601      	movs	r6, #1
 8004a88:	e7ca      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      status |= ret;
 8004a8a:	4335      	orrs	r5, r6
 8004a8c:	b2ed      	uxtb	r5, r5
 8004a8e:	e7d0      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a90:	2bc0      	cmp	r3, #192	; 0xc0
 8004a92:	d009      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a98:	d006      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 8004a9a:	2601      	movs	r6, #1
 8004a9c:	e004      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9e:	4a64      	ldr	r2, [pc, #400]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004aa0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004aa8:	bb4e      	cbnz	r6, 8004afe <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004aaa:	4a61      	ldr	r2, [pc, #388]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004aac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004aae:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004ab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A)
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004abe:	d037      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ac0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac8:	d04a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8004aca:	d81b      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004acc:	b313      	cbz	r3, 8004b14 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ad2:	d11d      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ad4:	4a56      	ldr	r2, [pc, #344]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004ad6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004adc:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004ade:	1d20      	adds	r0, r4, #4
 8004ae0:	f7ff fe8e 	bl	8004800 <RCCEx_PLL2_Config>
 8004ae4:	4606      	mov	r6, r0
      break;
 8004ae6:	e01a      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004ae8:	4a51      	ldr	r2, [pc, #324]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004aea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004af0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004af2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004af6:	f7ff fee3 	bl	80048c0 <RCCEx_PLL3_Config>
 8004afa:	4606      	mov	r6, r0
      break;
 8004afc:	e7d4      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x128>
      status |= ret;
 8004afe:	4335      	orrs	r5, r6
 8004b00:	b2ed      	uxtb	r5, r5
 8004b02:	e7d9      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b08:	d009      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004b0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b0e:	d006      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      ret = HAL_ERROR;
 8004b10:	2601      	movs	r6, #1
 8004b12:	e004      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b14:	4a46      	ldr	r2, [pc, #280]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004b1e:	bb56      	cbnz	r6, 8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b20:	4a43      	ldr	r2, [pc, #268]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b22:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004b24:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004b28:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B)
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004b36:	d037      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b38:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b40:	d03f      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004b42:	d81b      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8004b44:	b313      	cbz	r3, 8004b8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b4a:	d11d      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b4c:	4a38      	ldr	r2, [pc, #224]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b54:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004b56:	1d20      	adds	r0, r4, #4
 8004b58:	f7ff fe52 	bl	8004800 <RCCEx_PLL2_Config>
 8004b5c:	4606      	mov	r6, r0
      break;
 8004b5e:	e01a      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004b60:	4a33      	ldr	r2, [pc, #204]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b68:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004b6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b6e:	f7ff fea7 	bl	80048c0 <RCCEx_PLL3_Config>
 8004b72:	4606      	mov	r6, r0
      break;
 8004b74:	e7d3      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      status |= ret;
 8004b76:	4335      	orrs	r5, r6
 8004b78:	b2ed      	uxtb	r5, r5
 8004b7a:	e7d9      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b80:	d009      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b86:	d006      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = HAL_ERROR;
 8004b88:	2601      	movs	r6, #1
 8004b8a:	e004      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b8c:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b8e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004b96:	b9fe      	cbnz	r6, 8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b98:	4a25      	ldr	r2, [pc, #148]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b9a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004b9c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ba0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI)
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004bae:	d026      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch(PeriphClkInit->QspiClockSelection)
 8004bb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d016      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004bb6:	d912      	bls.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d03b      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004bbc:	2b30      	cmp	r3, #48	; 0x30
 8004bbe:	d016      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004bc0:	e00e      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004bc2:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004bc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004bc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bca:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004bcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004bd0:	f7ff fe76 	bl	80048c0 <RCCEx_PLL3_Config>
 8004bd4:	4606      	mov	r6, r0
      break;
 8004bd6:	e7de      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x216>
      status |= ret;
 8004bd8:	4335      	orrs	r5, r6
 8004bda:	b2ed      	uxtb	r5, r5
 8004bdc:	e7e4      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->QspiClockSelection)
 8004bde:	b133      	cbz	r3, 8004bee <HAL_RCCEx_PeriphCLKConfig+0x26e>
      ret = HAL_ERROR;
 8004be0:	2601      	movs	r6, #1
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x26e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be4:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004be6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bec:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004bee:	bb5e      	cbnz	r6, 8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bf0:	4a0f      	ldr	r2, [pc, #60]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004bf2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004bf4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004bf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123)
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004c04:	d039      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0c:	f000 8084 	beq.w	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004c10:	d81d      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004c12:	b323      	cbz	r3, 8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d11f      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c1a:	4a05      	ldr	r2, [pc, #20]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004c1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c22:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004c24:	1d20      	adds	r0, r4, #4
 8004c26:	f7ff fdeb 	bl	8004800 <RCCEx_PLL2_Config>
 8004c2a:	4606      	mov	r6, r0
      break;
 8004c2c:	e01c      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c34:	4a8b      	ldr	r2, [pc, #556]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004c3e:	1d20      	adds	r0, r4, #4
 8004c40:	f7ff fdde 	bl	8004800 <RCCEx_PLL2_Config>
 8004c44:	4606      	mov	r6, r0
      break;
 8004c46:	e7d2      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x26e>
      status |= ret;
 8004c48:	4335      	orrs	r5, r6
 8004c4a:	b2ed      	uxtb	r5, r5
 8004c4c:	e7d7      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c52:	d009      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c58:	d006      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = HAL_ERROR;
 8004c5a:	2601      	movs	r6, #1
 8004c5c:	e004      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5e:	4a81      	ldr	r2, [pc, #516]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c66:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004c68:	2e00      	cmp	r6, #0
 8004c6a:	d160      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c6c:	4a7d      	ldr	r2, [pc, #500]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c6e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45)
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004c80:	d01a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c88:	d05f      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8004c8a:	d853      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8004c8c:	b15b      	cbz	r3, 8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c92:	d158      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c94:	4a73      	ldr	r2, [pc, #460]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004c9e:	1d20      	adds	r0, r4, #4
 8004ca0:	f7ff fdae 	bl	8004800 <RCCEx_PLL2_Config>
 8004ca4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	d15a      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004caa:	4a6e      	ldr	r2, [pc, #440]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004cae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004cb2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6)
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004cbe:	d01c      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004cc0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cc8:	d058      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004cca:	d84c      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004ccc:	b15b      	cbz	r3, 8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8004cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cd2:	d151      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cd4:	4a63      	ldr	r2, [pc, #396]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004cde:	1d20      	adds	r0, r4, #4
 8004ce0:	f7ff fd8e 	bl	8004800 <RCCEx_PLL2_Config>
 8004ce4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	d153      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004cea:	4a5e      	ldr	r2, [pc, #376]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004cee:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004cf2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN)
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004d00:	d057      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch(PeriphClkInit->FdcanClockSelection)
 8004d02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d08:	d046      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0e:	d05b      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d046      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      ret = HAL_ERROR;
 8004d14:	2601      	movs	r6, #1
 8004d16:	e044      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004d18:	4a52      	ldr	r2, [pc, #328]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d20:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004d22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d26:	f7ff fdcb 	bl	80048c0 <RCCEx_PLL3_Config>
 8004d2a:	4606      	mov	r6, r0
      break;
 8004d2c:	e79c      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      status |= ret;
 8004d2e:	4335      	orrs	r5, r6
 8004d30:	b2ed      	uxtb	r5, r5
 8004d32:	e7a2      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d38:	d0b5      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d3e:	d0b2      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d44:	d0af      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = HAL_ERROR;
 8004d46:	2601      	movs	r6, #1
 8004d48:	e7ad      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004d4a:	4a46      	ldr	r2, [pc, #280]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d52:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004d54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d58:	f7ff fdb2 	bl	80048c0 <RCCEx_PLL3_Config>
 8004d5c:	4606      	mov	r6, r0
      break;
 8004d5e:	e7a2      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x326>
      status |= ret;
 8004d60:	4335      	orrs	r5, r6
 8004d62:	b2ed      	uxtb	r5, r5
 8004d64:	e7a8      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6a:	d0bc      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8004d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d70:	d0b9      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8004d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d76:	d0b6      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = HAL_ERROR;
 8004d78:	2601      	movs	r6, #1
 8004d7a:	e7b4      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004d7c:	4a39      	ldr	r2, [pc, #228]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d84:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004d86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d8a:	f7ff fd99 	bl	80048c0 <RCCEx_PLL3_Config>
 8004d8e:	4606      	mov	r6, r0
      break;
 8004d90:	e7a9      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      status |= ret;
 8004d92:	4335      	orrs	r5, r6
 8004d94:	b2ed      	uxtb	r5, r5
 8004d96:	e7b0      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8004d98:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004da2:	b9de      	cbnz	r6, 8004ddc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004da4:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004da8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004dac:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004dae:	430b      	orrs	r3, r1
 8004db0:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC)
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004db8:	d021      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x47e>
    switch(PeriphClkInit->FmcClockSelection)
 8004dba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d84c      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004dc0:	e8df f003 	tbb	[pc, r3]
 8004dc4:	14410f14 	.word	0x14410f14
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dc8:	4a26      	ldr	r2, [pc, #152]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004dd2:	1d20      	adds	r0, r4, #4
 8004dd4:	f7ff fd14 	bl	8004800 <RCCEx_PLL2_Config>
 8004dd8:	4606      	mov	r6, r0
      break;
 8004dda:	e7e2      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      status |= ret;
 8004ddc:	4335      	orrs	r5, r6
 8004dde:	b2ed      	uxtb	r5, r5
 8004de0:	e7e7      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de2:	4a20      	ldr	r2, [pc, #128]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004de4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dea:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004dec:	2e00      	cmp	r6, #0
 8004dee:	d136      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004df0:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004df2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004df4:	f023 0303 	bic.w	r3, r3, #3
 8004df8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004e04:	d130      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16)
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	f013 0f01 	tst.w	r3, #1
 8004e0c:	f000 80a3 	beq.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e10:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004e12:	2b28      	cmp	r3, #40	; 0x28
 8004e14:	f200 80b6 	bhi.w	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e18:	e8df f003 	tbb	[pc, r3]
 8004e1c:	b4b4b495 	.word	0xb4b4b495
 8004e20:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e24:	b4b4b48c 	.word	0xb4b4b48c
 8004e28:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e2c:	b4b4b4a9 	.word	0xb4b4b4a9
 8004e30:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e34:	b4b4b495 	.word	0xb4b4b495
 8004e38:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e3c:	b4b4b495 	.word	0xb4b4b495
 8004e40:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e44:	95          	.byte	0x95
 8004e45:	00          	.byte	0x00
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e46:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e50:	1d20      	adds	r0, r4, #4
 8004e52:	f7ff fcd5 	bl	8004800 <RCCEx_PLL2_Config>
 8004e56:	4606      	mov	r6, r0
      break;
 8004e58:	e7c8      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x46c>
      ret = HAL_ERROR;
 8004e5a:	2601      	movs	r6, #1
 8004e5c:	e7c6      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status |= ret;
 8004e5e:	4335      	orrs	r5, r6
 8004e60:	b2ed      	uxtb	r5, r5
 8004e62:	e7cc      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004e64:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e68:	4a62      	ldr	r2, [pc, #392]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004e6a:	6813      	ldr	r3, [r2, #0]
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e70:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004e72:	f7fd fd6b 	bl	800294c <HAL_GetTick>
 8004e76:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e78:	4b5e      	ldr	r3, [pc, #376]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e80:	d105      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e82:	f7fd fd63 	bl	800294c <HAL_GetTick>
 8004e86:	1bc0      	subs	r0, r0, r7
 8004e88:	2864      	cmp	r0, #100	; 0x64
 8004e8a:	d9f5      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = HAL_TIMEOUT;
 8004e8c:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8004e8e:	2e00      	cmp	r6, #0
 8004e90:	d14d      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e92:	4b59      	ldr	r3, [pc, #356]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004e9a:	4053      	eors	r3, r2
 8004e9c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004ea0:	d00c      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x53c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea2:	4b55      	ldr	r3, [pc, #340]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004ea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ea6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eaa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004eac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004eb0:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004eb4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004eb8:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004eba:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ebc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec4:	d015      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      if(ret == HAL_OK)
 8004ec6:	bb7e      	cbnz	r6, 8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004ecc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004ed0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004ed4:	d01e      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004ed6:	4a48      	ldr	r2, [pc, #288]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004ed8:	6913      	ldr	r3, [r2, #16]
 8004eda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ede:	6113      	str	r3, [r2, #16]
 8004ee0:	4945      	ldr	r1, [pc, #276]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004ee2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004ee4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004ee8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004eec:	4313      	orrs	r3, r2
 8004eee:	670b      	str	r3, [r1, #112]	; 0x70
 8004ef0:	e789      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x486>
        tickstart = HAL_GetTick();
 8004ef2:	f7fd fd2b 	bl	800294c <HAL_GetTick>
 8004ef6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef8:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f013 0f02 	tst.w	r3, #2
 8004f00:	d1e1      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x546>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fd fd23 	bl	800294c <HAL_GetTick>
 8004f06:	1bc0      	subs	r0, r0, r7
 8004f08:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f0c:	4298      	cmp	r0, r3
 8004f0e:	d9f3      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x578>
            ret = HAL_TIMEOUT;
 8004f10:	2603      	movs	r6, #3
 8004f12:	e7d8      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x546>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f14:	4838      	ldr	r0, [pc, #224]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f16:	6902      	ldr	r2, [r0, #16]
 8004f18:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004f1c:	4937      	ldr	r1, [pc, #220]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8004f1e:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8004f22:	4313      	orrs	r3, r2
 8004f24:	6103      	str	r3, [r0, #16]
 8004f26:	e7db      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x560>
        status |= ret;
 8004f28:	4335      	orrs	r5, r6
 8004f2a:	b2ed      	uxtb	r5, r5
 8004f2c:	e76b      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x486>
      status |= ret;
 8004f2e:	4335      	orrs	r5, r6
 8004f30:	b2ed      	uxtb	r5, r5
 8004f32:	e768      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x486>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f34:	4a30      	ldr	r2, [pc, #192]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004f3e:	1d20      	adds	r0, r4, #4
 8004f40:	f7ff fc5e 	bl	8004800 <RCCEx_PLL2_Config>
 8004f44:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004f46:	b9fe      	cbnz	r6, 8004f88 <HAL_RCCEx_PeriphCLKConfig+0x608>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f48:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f4a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004f4c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004f50:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578)
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f013 0f02 	tst.w	r3, #2
 8004f5c:	d028      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004f5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d841      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8004f64:	e8df f003 	tbb	[pc, r3]
 8004f68:	1c35131c 	.word	0x1c35131c
 8004f6c:	1c1c      	.short	0x1c1c
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004f6e:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f76:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f7c:	f7ff fca0 	bl	80048c0 <RCCEx_PLL3_Config>
 8004f80:	4606      	mov	r6, r0
      break;
 8004f82:	e7e0      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = HAL_ERROR;
 8004f84:	2601      	movs	r6, #1
 8004f86:	e7de      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      status |= ret;
 8004f88:	4335      	orrs	r5, r6
 8004f8a:	b2ed      	uxtb	r5, r5
 8004f8c:	e7e3      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004f98:	1d20      	adds	r0, r4, #4
 8004f9a:	f7ff fc31 	bl	8004800 <RCCEx_PLL2_Config>
 8004f9e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004fa0:	bb26      	cbnz	r6, 8004fec <HAL_RCCEx_PeriphCLKConfig+0x66c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004fa4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	f013 0f04 	tst.w	r3, #4
 8004fb6:	d037      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004fb8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	f200 80e0 	bhi.w	8005182 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8004fc2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004fc6:	0026      	.short	0x0026
 8004fc8:	00d3001d 	.word	0x00d3001d
 8004fcc:	00260026 	.word	0x00260026
 8004fd0:	0026      	.short	0x0026
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004fd4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004fd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fda:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004fdc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004fe0:	f7ff fc6e 	bl	80048c0 <RCCEx_PLL3_Config>
 8004fe4:	4606      	mov	r6, r0
      break;
 8004fe6:	e7db      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      ret = HAL_ERROR;
 8004fe8:	2601      	movs	r6, #1
 8004fea:	e7d9      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      status |= ret;
 8004fec:	4335      	orrs	r5, r6
 8004fee:	b2ed      	uxtb	r5, r5
 8004ff0:	e7de      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8004ff2:	bf00      	nop
 8004ff4:	58024800 	.word	0x58024800
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	00ffffcf 	.word	0x00ffffcf
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005000:	4abb      	ldr	r2, [pc, #748]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005002:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005008:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800500a:	1d20      	adds	r0, r4, #4
 800500c:	f7ff fbf8 	bl	8004800 <RCCEx_PLL2_Config>
 8005010:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005012:	2e00      	cmp	r6, #0
 8005014:	f040 80b7 	bne.w	8005186 <HAL_RCCEx_PeriphCLKConfig+0x806>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005018:	4ab5      	ldr	r2, [pc, #724]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800501a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005024:	430b      	orrs	r3, r1
 8005026:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	f013 0f20 	tst.w	r3, #32
 800502e:	d020      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005030:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005038:	f000 80b6 	beq.w	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800503c:	f200 80a6 	bhi.w	800518c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005040:	b163      	cbz	r3, 800505c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8005042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005046:	f040 80ad 	bne.w	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800504a:	4aa9      	ldr	r2, [pc, #676]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800504c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800504e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005052:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8005054:	1d20      	adds	r0, r4, #4
 8005056:	f7ff fbd3 	bl	8004800 <RCCEx_PLL2_Config>
 800505a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800505c:	2e00      	cmp	r6, #0
 800505e:	f040 80ae 	bne.w	80051be <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005062:	4aa3      	ldr	r2, [pc, #652]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005064:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005066:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800506a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800506e:	430b      	orrs	r3, r1
 8005070:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005078:	d020      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x73c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800507a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800507e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005082:	f000 80ad 	beq.w	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005086:	f200 809d 	bhi.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800508a:	b163      	cbz	r3, 80050a6 <HAL_RCCEx_PeriphCLKConfig+0x726>
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005090:	f040 80a4 	bne.w	80051dc <HAL_RCCEx_PeriphCLKConfig+0x85c>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005094:	4a96      	ldr	r2, [pc, #600]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005096:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800509c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800509e:	1d20      	adds	r0, r4, #4
 80050a0:	f7ff fbae 	bl	8004800 <RCCEx_PLL2_Config>
 80050a4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	f040 80a5 	bne.w	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050ac:	4a90      	ldr	r2, [pc, #576]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80050ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050b0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80050b4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345)
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050c2:	d020      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x786>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050c4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80050c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050cc:	f000 80a4 	beq.w	8005218 <HAL_RCCEx_PeriphCLKConfig+0x898>
 80050d0:	f200 8094 	bhi.w	80051fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80050d4:	b163      	cbz	r3, 80050f0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 80050d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050da:	f040 809b 	bne.w	8005214 <HAL_RCCEx_PeriphCLKConfig+0x894>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050de:	4a84      	ldr	r2, [pc, #528]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80050e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050e6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80050e8:	1d20      	adds	r0, r4, #4
 80050ea:	f7ff fb89 	bl	8004800 <RCCEx_PLL2_Config>
 80050ee:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80050f0:	2e00      	cmp	r6, #0
 80050f2:	f040 809c 	bne.w	800522e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050f6:	4a7e      	ldr	r2, [pc, #504]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80050f8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80050fe:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005102:	430b      	orrs	r3, r1
 8005104:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123)
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f013 0f08 	tst.w	r3, #8
 800510c:	d00b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800510e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	f000 808d 	beq.w	8005234 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800511a:	4975      	ldr	r1, [pc, #468]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800511c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800511e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005122:	4313      	orrs	r3, r2
 8005124:	654b      	str	r3, [r1, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f013 0f10 	tst.w	r3, #16
 800512c:	d00b      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800512e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005136:	f000 8087 	beq.w	8005248 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800513a:	496d      	ldr	r1, [pc, #436]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800513c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800513e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005142:	4313      	orrs	r3, r2
 8005144:	658b      	str	r3, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800514c:	f000 8098 	beq.w	8005280 <HAL_RCCEx_PeriphCLKConfig+0x900>
    switch(PeriphClkInit->AdcClockSelection)
 8005150:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	f000 80a3 	beq.w	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x922>
 800515c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005160:	f000 8085 	beq.w	800526e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d079      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
      ret = HAL_ERROR;
 8005168:	2601      	movs	r6, #1
 800516a:	e080      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800516c:	4a60      	ldr	r2, [pc, #384]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800516e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005174:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005176:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800517a:	f7ff fba1 	bl	80048c0 <RCCEx_PLL3_Config>
 800517e:	4606      	mov	r6, r0
      break;
 8005180:	e747      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x692>
      ret = HAL_ERROR;
 8005182:	2601      	movs	r6, #1
 8005184:	e745      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x692>
      status |= ret;
 8005186:	4335      	orrs	r5, r6
 8005188:	b2ed      	uxtb	r5, r5
 800518a:	e74d      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005190:	f43f af64 	beq.w	800505c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8005194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005198:	f43f af60 	beq.w	800505c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800519c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051a0:	f43f af5c 	beq.w	800505c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      ret = HAL_ERROR;
 80051a4:	2601      	movs	r6, #1
 80051a6:	e759      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80051a8:	4a51      	ldr	r2, [pc, #324]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80051aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051b0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80051b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051b6:	f7ff fb83 	bl	80048c0 <RCCEx_PLL3_Config>
 80051ba:	4606      	mov	r6, r0
      break;
 80051bc:	e74e      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      status |= ret;
 80051be:	4335      	orrs	r5, r6
 80051c0:	b2ed      	uxtb	r5, r5
 80051c2:	e756      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80051c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c8:	f43f af6d 	beq.w	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80051cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051d0:	f43f af69 	beq.w	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80051d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051d8:	f43f af65 	beq.w	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x726>
      ret = HAL_ERROR;
 80051dc:	2601      	movs	r6, #1
 80051de:	e762      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x726>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80051e0:	4a43      	ldr	r2, [pc, #268]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80051e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e8:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80051ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051ee:	f7ff fb67 	bl	80048c0 <RCCEx_PLL3_Config>
 80051f2:	4606      	mov	r6, r0
      break;
 80051f4:	e757      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x726>
      status |= ret;
 80051f6:	4335      	orrs	r5, r6
 80051f8:	b2ed      	uxtb	r5, r5
 80051fa:	e75f      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x73c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80051fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005200:	f43f af76 	beq.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8005204:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005208:	f43f af72 	beq.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 800520c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005210:	f43f af6e 	beq.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x770>
      ret = HAL_ERROR;
 8005214:	2601      	movs	r6, #1
 8005216:	e76b      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x770>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8005218:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800521a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800521c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005220:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005222:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005226:	f7ff fb4b 	bl	80048c0 <RCCEx_PLL3_Config>
 800522a:	4606      	mov	r6, r0
      break;
 800522c:	e760      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x770>
      status |= ret;
 800522e:	4335      	orrs	r5, r6
 8005230:	b2ed      	uxtb	r5, r5
 8005232:	e768      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x786>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005234:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005238:	f7ff fb42 	bl	80048c0 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800523c:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800523e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005246:	e76e      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005248:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800524c:	f7ff fb38 	bl	80048c0 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005250:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005252:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005258:	62d3      	str	r3, [r2, #44]	; 0x2c
 800525a:	e774      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800525c:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800525e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005260:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005264:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8005266:	1d20      	adds	r0, r4, #4
 8005268:	f7ff faca 	bl	8004800 <RCCEx_PLL2_Config>
 800526c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800526e:	bb1e      	cbnz	r6, 80052b8 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005270:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005272:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005274:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005278:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800527c:	430b      	orrs	r3, r1
 800527e:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005286:	d028      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x95a>
    switch(PeriphClkInit->UsbClockSelection)
 8005288:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800528c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005290:	d030      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005296:	d017      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8005298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529c:	d00f      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x93e>
      ret = HAL_ERROR;
 800529e:	2601      	movs	r6, #1
 80052a0:	e012      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80052a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052aa:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80052ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052b0:	f7ff fb06 	bl	80048c0 <RCCEx_PLL3_Config>
 80052b4:	4606      	mov	r6, r0
      break;
 80052b6:	e7da      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      status |= ret;
 80052b8:	4335      	orrs	r5, r6
 80052ba:	b2ed      	uxtb	r5, r5
 80052bc:	e7e0      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x900>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052be:	4a0c      	ldr	r2, [pc, #48]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80052c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80052c8:	b9fe      	cbnz	r6, 800530a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80052cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80052ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80052d2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80052d6:	430b      	orrs	r3, r1
 80052d8:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC)
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80052e0:	d023      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    switch(PeriphClkInit->SdmmcClockSelection)
 80052e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80052e4:	b1a3      	cbz	r3, 8005310 <HAL_RCCEx_PeriphCLKConfig+0x990>
 80052e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ea:	d032      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = HAL_ERROR;
 80052ec:	2601      	movs	r6, #1
 80052ee:	e014      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x99a>
 80052f0:	58024400 	.word	0x58024400
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052f4:	4a4d      	ldr	r2, [pc, #308]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80052f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052fc:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80052fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005302:	f7ff fadd 	bl	80048c0 <RCCEx_PLL3_Config>
 8005306:	4606      	mov	r6, r0
      break;
 8005308:	e7de      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x948>
      status |= ret;
 800530a:	4335      	orrs	r5, r6
 800530c:	b2ed      	uxtb	r5, r5
 800530e:	e7e4      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8005310:	4a46      	ldr	r2, [pc, #280]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005312:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800531a:	bb26      	cbnz	r6, 8005366 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800531c:	4a43      	ldr	r2, [pc, #268]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 800531e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005324:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005326:	430b      	orrs	r3, r1
 8005328:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005330:	d11c      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005338:	d035      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xa26>
    switch(PeriphClkInit->RngClockSelection)
 800533a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800533c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005340:	d023      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005342:	d91f      	bls.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005348:	d024      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa14>
 800534a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800534e:	d11a      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005350:	e020      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005352:	4a36      	ldr	r2, [pc, #216]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005354:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800535a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800535c:	1d20      	adds	r0, r4, #4
 800535e:	f7ff fa4f 	bl	8004800 <RCCEx_PLL2_Config>
 8005362:	4606      	mov	r6, r0
      break;
 8005364:	e7d9      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x99a>
      status |= ret;
 8005366:	4335      	orrs	r5, r6
 8005368:	b2ed      	uxtb	r5, r5
 800536a:	e7de      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 800536c:	4a2f      	ldr	r2, [pc, #188]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 800536e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005370:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005374:	62d3      	str	r3, [r2, #44]	; 0x2c
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005376:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800537a:	f7ff faa1 	bl	80048c0 <RCCEx_PLL3_Config>
 800537e:	4305      	orrs	r5, r0
 8005380:	b2ed      	uxtb	r5, r5
 8005382:	e7d6      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
    switch(PeriphClkInit->RngClockSelection)
 8005384:	b133      	cbz	r3, 8005394 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      ret = HAL_ERROR;
 8005386:	2601      	movs	r6, #1
 8005388:	e004      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538a:	4a28      	ldr	r2, [pc, #160]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 800538c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800538e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005392:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005394:	2e00      	cmp	r6, #0
 8005396:	d13d      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xa94>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005398:	4a24      	ldr	r2, [pc, #144]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 800539a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800539c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80053a2:	430b      	orrs	r3, r1
 80053a4:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80053ac:	d006      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053ae:	4a1f      	ldr	r2, [pc, #124]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80053b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80053b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053b6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1)
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80053c2:	d007      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80053c6:	6913      	ldr	r3, [r2, #16]
 80053c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053cc:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6113      	str	r3, [r2, #16]
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80053da:	d006      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053dc:	4a13      	ldr	r2, [pc, #76]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80053de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80053e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_TIM))
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80053f0:	d009      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xa86>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053fa:	611a      	str	r2, [r3, #16]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8005402:	430a      	orrs	r2, r1
 8005404:	611a      	str	r2, [r3, #16]
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_CKPER))
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	db06      	blt.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
  if (status == HAL_OK)
 800540c:	b105      	cbz	r5, 8005410 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  return HAL_ERROR;
 800540e:	2501      	movs	r5, #1
}
 8005410:	4628      	mov	r0, r5
 8005412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      status |= ret;
 8005414:	4335      	orrs	r5, r6
 8005416:	b2ed      	uxtb	r5, r5
 8005418:	e7c5      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xa26>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800541a:	4a04      	ldr	r2, [pc, #16]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 800541c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800541e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005422:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005424:	430b      	orrs	r3, r1
 8005426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005428:	e7f0      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400

08005430 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005430:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8005432:	f7ff f975 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800543e:	2210      	movs	r2, #16
 8005440:	fa92 f2a2 	rbit	r2, r2
 8005444:	fab2 f282 	clz	r2, r2
 8005448:	40d3      	lsrs	r3, r2
 800544a:	4a03      	ldr	r2, [pc, #12]	; (8005458 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800544c:	5cd3      	ldrb	r3, [r2, r3]
}
 800544e:	40d8      	lsrs	r0, r3
 8005450:	bd08      	pop	{r3, pc}
 8005452:	bf00      	nop
 8005454:	58024400 	.word	0x58024400
 8005458:	080083fc 	.word	0x080083fc

0800545c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800545c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800545e:	4c6c      	ldr	r4, [pc, #432]	; (8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8005460:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005462:	f007 0703 	and.w	r7, r7, #3
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8005466:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005468:	f3c1 3e05 	ubfx	lr, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 800546c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800546e:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005472:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8005474:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 8005478:	fb06 f603 	mul.w	r6, r6, r3
 800547c:	ee07 6a90 	vmov	s15, r6
 8005480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  switch (pllsource)
 8005484:	2f01      	cmp	r7, #1
 8005486:	d060      	beq.n	800554a <HAL_RCCEx_GetPLL2ClockFreq+0xee>
 8005488:	b1f7      	cbz	r7, 80054c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800548a:	2f02      	cmp	r7, #2
 800548c:	f000 80a4 	beq.w	80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x17c>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8005490:	4b60      	ldr	r3, [pc, #384]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1b8>)
 8005492:	fbb3 f3fe 	udiv	r3, r3, lr
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	4b5c      	ldr	r3, [pc, #368]	; (8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a6:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 80054aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054ae:	ee06 3a90 	vmov	s13, r3
 80054b2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80054b6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054be:	ee37 7a26 	vadd.f32	s14, s14, s13
 80054c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 80054c6:	e05b      	b.n	8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c8:	4b51      	ldr	r3, [pc, #324]	; (8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f013 0f20 	tst.w	r3, #32
 80054d0:	d01f      	beq.n	8005512 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054d2:	4a4f      	ldr	r2, [pc, #316]	; (8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 80054d4:	6813      	ldr	r3, [r2, #0]
 80054d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054da:	4d50      	ldr	r5, [pc, #320]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x1c0>)
 80054dc:	40dd      	lsrs	r5, r3
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80054de:	fbb5 f3fe 	udiv	r3, r5, lr
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80054ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f0:	eddf 6a49 	vldr	s13, [pc, #292]	; 8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 80054f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054f8:	ee06 3a90 	vmov	s13, r3
 80054fc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005500:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005508:	ee37 7a26 	vadd.f32	s14, s14, s13
 800550c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005510:	e036      	b.n	8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8005512:	4c42      	ldr	r4, [pc, #264]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x1c0>)
 8005514:	fbb4 f3fe 	udiv	r3, r4, lr
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005520:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005528:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 800552c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005530:	ee06 3a90 	vmov	s13, r3
 8005534:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005538:	ee36 7a87 	vadd.f32	s14, s13, s14
 800553c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005540:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005548:	e01a      	b.n	8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800554a:	4932      	ldr	r1, [pc, #200]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1b8>)
 800554c:	fbb1 f3fe 	udiv	r3, r1, lr
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005558:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005560:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8005564:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005568:	ee06 3a90 	vmov	s13, r3
 800556c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005570:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005578:	ee37 7a26 	vadd.f32	s14, s14, s13
 800557c:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8005580:	4a23      	ldr	r2, [pc, #140]	; (8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8005582:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005584:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005588:	3301      	adds	r3, #1
 800558a:	ee07 3a10 	vmov	s14, r3
 800558e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005592:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005596:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800559a:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 800559e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80055a0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80055a4:	3301      	adds	r3, #1
 80055a6:	ee07 3a10 	vmov	s14, r3
 80055aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055b2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80055b6:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 80055ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80055bc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80055c0:	3301      	adds	r3, #1
 80055c2:	ee07 3a10 	vmov	s14, r3
 80055c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055ce:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80055d2:	edc0 6a02 	vstr	s13, [r0, #8]
 80055d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80055d8:	4a11      	ldr	r2, [pc, #68]	; (8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1c4>)
 80055da:	fbb2 f3fe 	udiv	r3, r2, lr
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 80055f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80055f6:	ee06 3a90 	vmov	s13, r3
 80055fa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80055fe:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005606:	ee37 7a26 	vadd.f32	s14, s14, s13
 800560a:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 800560e:	e7b7      	b.n	8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005610:	58024400 	.word	0x58024400
 8005614:	003d0900 	.word	0x003d0900
 8005618:	39000000 	.word	0x39000000
 800561c:	03d09000 	.word	0x03d09000
 8005620:	007a1200 	.word	0x007a1200

08005624 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005626:	4c6c      	ldr	r4, [pc, #432]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 8005628:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800562a:	f007 0703 	and.w	r7, r7, #3
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800562e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005630:	f3c1 5e05 	ubfx	lr, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800563a:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800563c:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 8005640:	fb06 f603 	mul.w	r6, r6, r3
 8005644:	ee07 6a90 	vmov	s15, r6
 8005648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  switch (pllsource)
 800564c:	2f01      	cmp	r7, #1
 800564e:	d060      	beq.n	8005712 <HAL_RCCEx_GetPLL3ClockFreq+0xee>
 8005650:	b1f7      	cbz	r7, 8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005652:	2f02      	cmp	r7, #2
 8005654:	f000 80a4 	beq.w	80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x17c>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005658:	4b60      	ldr	r3, [pc, #384]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x1b8>)
 800565a:	fbb3 f3fe 	udiv	r3, r3, lr
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	4b5c      	ldr	r3, [pc, #368]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 8005672:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005676:	ee06 3a90 	vmov	s13, r3
 800567a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800567e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005686:	ee37 7a26 	vadd.f32	s14, s14, s13
 800568a:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 800568e:	e05b      	b.n	8005748 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005690:	4b51      	ldr	r3, [pc, #324]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f013 0f20 	tst.w	r3, #32
 8005698:	d01f      	beq.n	80056da <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800569a:	4a4f      	ldr	r2, [pc, #316]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 800569c:	6813      	ldr	r3, [r2, #0]
 800569e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80056a2:	4d50      	ldr	r5, [pc, #320]	; (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1c0>)
 80056a4:	40dd      	lsrs	r5, r3
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80056a6:	fbb5 f3fe 	udiv	r3, r5, lr
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	eddf 6a49 	vldr	s13, [pc, #292]	; 80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 80056bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80056c0:	ee06 3a90 	vmov	s13, r3
 80056c4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80056c8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80056cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80056d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056d8:	e036      	b.n	8005748 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80056da:	4c42      	ldr	r4, [pc, #264]	; (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1c0>)
 80056dc:	fbb4 f3fe 	udiv	r3, r4, lr
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e8:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 80056f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80056f8:	ee06 3a90 	vmov	s13, r3
 80056fc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005700:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005708:	ee37 7a26 	vadd.f32	s14, s14, s13
 800570c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005710:	e01a      	b.n	8005748 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005712:	4932      	ldr	r1, [pc, #200]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x1b8>)
 8005714:	fbb1 f3fe 	udiv	r3, r1, lr
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005720:	4b2d      	ldr	r3, [pc, #180]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005728:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 800572c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005730:	ee06 3a90 	vmov	s13, r3
 8005734:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005738:	ee36 7a87 	vadd.f32	s14, s13, s14
 800573c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005740:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005744:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8005748:	4a23      	ldr	r2, [pc, #140]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 800574a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800574c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005750:	3301      	adds	r3, #1
 8005752:	ee07 3a10 	vmov	s14, r3
 8005756:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800575a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800575e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005762:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8005766:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005768:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800576c:	3301      	adds	r3, #1
 800576e:	ee07 3a10 	vmov	s14, r3
 8005772:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005776:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800577a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800577e:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8005782:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005784:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005788:	3301      	adds	r3, #1
 800578a:	ee07 3a10 	vmov	s14, r3
 800578e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005792:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005796:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800579a:	edc0 6a02 	vstr	s13, [r0, #8]
 800579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80057a0:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1c4>)
 80057a2:	fbb2 f3fe 	udiv	r3, r2, lr
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 80057ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80057be:	ee06 3a90 	vmov	s13, r3
 80057c2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80057c6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80057ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ce:	ee37 7a26 	vadd.f32	s14, s14, s13
 80057d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 80057d6:	e7b7      	b.n	8005748 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80057d8:	58024400 	.word	0x58024400
 80057dc:	003d0900 	.word	0x003d0900
 80057e0:	39000000 	.word	0x39000000
 80057e4:	03d09000 	.word	0x03d09000
 80057e8:	007a1200 	.word	0x007a1200

080057ec <HAL_RCCEx_GetD1SysClockFreq>:
{
 80057ec:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80057ee:	f7fe fdb9 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057fe:	fa92 f2a2 	rbit	r2, r2
 8005802:	fab2 f282 	clz	r2, r2
 8005806:	40d3      	lsrs	r3, r2
 8005808:	4a03      	ldr	r2, [pc, #12]	; (8005818 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800580a:	5cd3      	ldrb	r3, [r2, r3]
 800580c:	40d8      	lsrs	r0, r3
 800580e:	4b03      	ldr	r3, [pc, #12]	; (800581c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005810:	6018      	str	r0, [r3, #0]
}
 8005812:	bd08      	pop	{r3, pc}
 8005814:	58024400 	.word	0x58024400
 8005818:	080083fc 	.word	0x080083fc
 800581c:	20000090 	.word	0x20000090

08005820 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 8005820:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005822:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;
 8005824:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 8005826:	3008      	adds	r0, #8
 8005828:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800582a:	fb03 0000 	mla	r0, r3, r0, r0
 800582e:	4770      	bx	lr

08005830 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005830:	2800      	cmp	r0, #0
 8005832:	f000 8099 	beq.w	8005968 <HAL_SPI_Init+0x138>
{
 8005836:	b570      	push	{r4, r5, r6, lr}
 8005838:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800583a:	2300      	movs	r3, #0
 800583c:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800583e:	6805      	ldr	r5, [r0, #0]
 8005840:	4b4c      	ldr	r3, [pc, #304]	; (8005974 <HAL_SPI_Init+0x144>)
 8005842:	4e4d      	ldr	r6, [pc, #308]	; (8005978 <HAL_SPI_Init+0x148>)
 8005844:	429d      	cmp	r5, r3
 8005846:	bf18      	it	ne
 8005848:	42b5      	cmpne	r5, r6
 800584a:	bf14      	ite	ne
 800584c:	2601      	movne	r6, #1
 800584e:	2600      	moveq	r6, #0
 8005850:	d007      	beq.n	8005862 <HAL_SPI_Init+0x32>
 8005852:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8005856:	429d      	cmp	r5, r3
 8005858:	d003      	beq.n	8005862 <HAL_SPI_Init+0x32>
 800585a:	68c3      	ldr	r3, [r0, #12]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	f200 8085 	bhi.w	800596c <HAL_SPI_Init+0x13c>
  packet_length = SPI_GetPacketSize(hspi);
 8005862:	4620      	mov	r0, r4
 8005864:	f7ff ffdc 	bl	8005820 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 8005868:	b126      	cbz	r6, 8005874 <HAL_SPI_Init+0x44>
 800586a:	4b44      	ldr	r3, [pc, #272]	; (800597c <HAL_SPI_Init+0x14c>)
 800586c:	429d      	cmp	r5, r3
 800586e:	d001      	beq.n	8005874 <HAL_SPI_Init+0x44>
 8005870:	2808      	cmp	r0, #8
 8005872:	d87d      	bhi.n	8005970 <HAL_SPI_Init+0x140>
 8005874:	4b40      	ldr	r3, [pc, #256]	; (8005978 <HAL_SPI_Init+0x148>)
 8005876:	4a3f      	ldr	r2, [pc, #252]	; (8005974 <HAL_SPI_Init+0x144>)
 8005878:	429d      	cmp	r5, r3
 800587a:	bf18      	it	ne
 800587c:	4295      	cmpne	r5, r2
 800587e:	d05c      	beq.n	800593a <HAL_SPI_Init+0x10a>
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 8005880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005884:	429d      	cmp	r5, r3
 8005886:	d058      	beq.n	800593a <HAL_SPI_Init+0x10a>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005888:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800588c:	2b00      	cmp	r3, #0
 800588e:	d058      	beq.n	8005942 <HAL_SPI_Init+0x112>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005890:	2302      	movs	r3, #2
 8005892:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80058a0:	69a3      	ldr	r3, [r4, #24]
 80058a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a6:	d052      	beq.n	800594e <HAL_SPI_Init+0x11e>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	69e3      	ldr	r3, [r4, #28]
 80058ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80058ae:	430b      	orrs	r3, r1
 80058b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80058b2:	430b      	orrs	r3, r1
 80058b4:	68e1      	ldr	r1, [r4, #12]
 80058b6:	430b      	orrs	r3, r1
 80058b8:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80058c4:	430b      	orrs	r3, r1
 80058c6:	69a1      	ldr	r1, [r4, #24]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6921      	ldr	r1, [r4, #16]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6961      	ldr	r1, [r4, #20]
 80058d0:	430b      	orrs	r3, r1
 80058d2:	6a21      	ldr	r1, [r4, #32]
 80058d4:	430b      	orrs	r3, r1
 80058d6:	6861      	ldr	r1, [r4, #4]
 80058d8:	430b      	orrs	r3, r1
 80058da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80058dc:	430b      	orrs	r3, r1
 80058de:	68a1      	ldr	r1, [r4, #8]
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80058e8:	430b      	orrs	r3, r1
 80058ea:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	b96b      	cbnz	r3, 800590c <HAL_SPI_Init+0xdc>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	6893      	ldr	r3, [r2, #8]
 80058f4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80058f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058fc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	6893      	ldr	r3, [r2, #8]
 8005902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800590a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800591c:	d006      	beq.n	800592c <HAL_SPI_Init+0xfc>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800591e:	6822      	ldr	r2, [r4, #0]
 8005920:	68d3      	ldr	r3, [r2, #12]
 8005922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005926:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005928:	430b      	orrs	r3, r1
 800592a:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800592c:	2000      	movs	r0, #0
 800592e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005932:	2301      	movs	r3, #1
 8005934:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 8005938:	bd70      	pop	{r4, r5, r6, pc}
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800593a:	2810      	cmp	r0, #16
 800593c:	d9a4      	bls.n	8005888 <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 800593e:	2001      	movs	r0, #1
}
 8005940:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005942:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005946:	4620      	mov	r0, r4
 8005948:	f7fc f942 	bl	8001bd0 <HAL_SPI_MspInit>
 800594c:	e7a0      	b.n	8005890 <HAL_SPI_Init+0x60>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800594e:	6863      	ldr	r3, [r4, #4]
 8005950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005954:	d1a8      	bne.n	80058a8 <HAL_SPI_Init+0x78>
 8005956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1a5      	bne.n	80058a8 <HAL_SPI_Init+0x78>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	6813      	ldr	r3, [r2, #0]
 8005960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e79f      	b.n	80058a8 <HAL_SPI_Init+0x78>
    return HAL_ERROR;
 8005968:	2001      	movs	r0, #1
 800596a:	4770      	bx	lr
    return HAL_ERROR;
 800596c:	2001      	movs	r0, #1
 800596e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005970:	2001      	movs	r0, #1
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	40013000 	.word	0x40013000
 8005978:	40003800 	.word	0x40003800
 800597c:	40003c00 	.word	0x40003c00

08005980 <HAL_TIM_Base_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005980:	4770      	bx	lr

08005982 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005982:	6802      	ldr	r2, [r0, #0]
 8005984:	68d3      	ldr	r3, [r2, #12]
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	60d3      	str	r3, [r2, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800598c:	6802      	ldr	r2, [r0, #0]
 800598e:	8813      	ldrh	r3, [r2, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	8013      	strh	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8005998:	2000      	movs	r0, #0
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	4770      	bx	lr

0800599e <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800599e:	4770      	bx	lr

080059a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	4770      	bx	lr

080059a2 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_IRQHandler>:
{
 80059a4:	b510      	push	{r4, lr}
 80059a6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059a8:	6803      	ldr	r3, [r0, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	f012 0f02 	tst.w	r2, #2
 80059b0:	d011      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	f012 0f02 	tst.w	r2, #2
 80059b8:	d00d      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ba:	f06f 0202 	mvn.w	r2, #2
 80059be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c0:	2301      	movs	r3, #1
 80059c2:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80059c4:	6803      	ldr	r3, [r0, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f013 0f03 	tst.w	r3, #3
 80059cc:	d079      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	f7ff ffe6 	bl	800599e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d2:	2300      	movs	r3, #0
 80059d4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	f012 0f04 	tst.w	r2, #4
 80059de:	d012      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	f012 0f04 	tst.w	r2, #4
 80059e6:	d00e      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059e8:	f06f 0204 	mvn.w	r2, #4
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ee:	2302      	movs	r3, #2
 80059f0:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80059fa:	d068      	beq.n	8005ace <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80059fc:	4620      	mov	r0, r4
 80059fe:	f7ff ffce 	bl	800599e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a02:	2300      	movs	r3, #0
 8005a04:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	f012 0f08 	tst.w	r2, #8
 8005a0e:	d012      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	f012 0f08 	tst.w	r2, #8
 8005a16:	d00e      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a18:	f06f 0208 	mvn.w	r2, #8
 8005a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a1e:	2304      	movs	r3, #4
 8005a20:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f013 0f03 	tst.w	r3, #3
 8005a2a:	d057      	beq.n	8005adc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f7ff ffb6 	bl	800599e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	2300      	movs	r3, #0
 8005a34:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	f012 0f10 	tst.w	r2, #16
 8005a3e:	d012      	beq.n	8005a66 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	f012 0f10 	tst.w	r2, #16
 8005a46:	d00e      	beq.n	8005a66 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a48:	f06f 0210 	mvn.w	r2, #16
 8005a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a4e:	2308      	movs	r3, #8
 8005a50:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a5a:	d046      	beq.n	8005aea <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff ff9e 	bl	800599e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	2300      	movs	r3, #0
 8005a64:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	f012 0f01 	tst.w	r2, #1
 8005a6e:	d003      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	f012 0f01 	tst.w	r2, #1
 8005a76:	d13f      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a88:	d13d      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a92:	d003      	beq.n	8005a9c <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a9a:	d13b      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005aac:	d139      	bne.n	8005b22 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	f012 0f20 	tst.w	r2, #32
 8005ab6:	d003      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	f012 0f20 	tst.w	r2, #32
 8005abe:	d137      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x18c>
 8005ac0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	f7ff ff6b 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f7ff ff6a 	bl	80059a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005acc:	e781      	b.n	80059d2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f7ff ff64 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f7ff ff63 	bl	80059a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ada:	e792      	b.n	8005a02 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005adc:	4620      	mov	r0, r4
 8005ade:	f7ff ff5d 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f7ff ff5c 	bl	80059a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ae8:	e7a3      	b.n	8005a32 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aea:	4620      	mov	r0, r4
 8005aec:	f7ff ff56 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7ff ff55 	bl	80059a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005af6:	e7b4      	b.n	8005a62 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005af8:	f06f 0201 	mvn.w	r2, #1
 8005afc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afe:	4620      	mov	r0, r4
 8005b00:	f7fb ff22 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
 8005b04:	e7b8      	b.n	8005a78 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b0a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f8b3 	bl	8005c78 <HAL_TIMEx_BreakCallback>
 8005b12:	e7ba      	b.n	8005a8a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 f8ac 	bl	8005c78 <HAL_TIMEx_BreakCallback>
 8005b20:	e7bc      	b.n	8005a9c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b26:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f7ff ff3a 	bl	80059a2 <HAL_TIM_TriggerCallback>
 8005b2e:	e7be      	b.n	8005aae <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b30:	f06f 0220 	mvn.w	r2, #32
 8005b34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 f89d 	bl	8005c76 <HAL_TIMEx_CommutationCallback>
}
 8005b3c:	e7c0      	b.n	8005ac0 <HAL_TIM_IRQHandler+0x11c>
	...

08005b40 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b40:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8005b42:	8803      	ldrh	r3, [r0, #0]
 8005b44:	b29b      	uxth	r3, r3
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b46:	4d38      	ldr	r5, [pc, #224]	; (8005c28 <TIM_Base_SetConfig+0xe8>)
 8005b48:	42a8      	cmp	r0, r5
 8005b4a:	bf14      	ite	ne
 8005b4c:	2500      	movne	r5, #0
 8005b4e:	2501      	moveq	r5, #1
 8005b50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b54:	bf14      	ite	ne
 8005b56:	462a      	movne	r2, r5
 8005b58:	f045 0201 	orreq.w	r2, r5, #1
 8005b5c:	b9aa      	cbnz	r2, 8005b8a <TIM_Base_SetConfig+0x4a>
 8005b5e:	4c33      	ldr	r4, [pc, #204]	; (8005c2c <TIM_Base_SetConfig+0xec>)
 8005b60:	42a0      	cmp	r0, r4
 8005b62:	bf14      	ite	ne
 8005b64:	2400      	movne	r4, #0
 8005b66:	2401      	moveq	r4, #1
 8005b68:	4e31      	ldr	r6, [pc, #196]	; (8005c30 <TIM_Base_SetConfig+0xf0>)
 8005b6a:	42b0      	cmp	r0, r6
 8005b6c:	d00d      	beq.n	8005b8a <TIM_Base_SetConfig+0x4a>
 8005b6e:	b964      	cbnz	r4, 8005b8a <TIM_Base_SetConfig+0x4a>
 8005b70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005b74:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	bf14      	ite	ne
 8005b7c:	2400      	movne	r4, #0
 8005b7e:	2401      	moveq	r4, #1
 8005b80:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005b84:	42b0      	cmp	r0, r6
 8005b86:	d000      	beq.n	8005b8a <TIM_Base_SetConfig+0x4a>
 8005b88:	b11c      	cbz	r4, 8005b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b8e:	684c      	ldr	r4, [r1, #4]
 8005b90:	4323      	orrs	r3, r4
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b92:	bb12      	cbnz	r2, 8005bda <TIM_Base_SetConfig+0x9a>
 8005b94:	4a25      	ldr	r2, [pc, #148]	; (8005c2c <TIM_Base_SetConfig+0xec>)
 8005b96:	4290      	cmp	r0, r2
 8005b98:	bf14      	ite	ne
 8005b9a:	2200      	movne	r2, #0
 8005b9c:	2201      	moveq	r2, #1
 8005b9e:	4c24      	ldr	r4, [pc, #144]	; (8005c30 <TIM_Base_SetConfig+0xf0>)
 8005ba0:	42a0      	cmp	r0, r4
 8005ba2:	d01a      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005ba4:	b9ca      	cbnz	r2, 8005bda <TIM_Base_SetConfig+0x9a>
 8005ba6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005baa:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005bae:	4290      	cmp	r0, r2
 8005bb0:	bf14      	ite	ne
 8005bb2:	2200      	movne	r2, #0
 8005bb4:	2201      	moveq	r2, #1
 8005bb6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005bba:	42a0      	cmp	r0, r4
 8005bbc:	d00d      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005bbe:	b962      	cbnz	r2, 8005bda <TIM_Base_SetConfig+0x9a>
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <TIM_Base_SetConfig+0xf4>)
 8005bc2:	4290      	cmp	r0, r2
 8005bc4:	bf14      	ite	ne
 8005bc6:	2200      	movne	r2, #0
 8005bc8:	2201      	moveq	r2, #1
 8005bca:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8005bce:	42a0      	cmp	r0, r4
 8005bd0:	d003      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005bd2:	b912      	cbnz	r2, 8005bda <TIM_Base_SetConfig+0x9a>
 8005bd4:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <TIM_Base_SetConfig+0xf8>)
 8005bd6:	4290      	cmp	r0, r2
 8005bd8:	d103      	bne.n	8005be2 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bde:	68cc      	ldr	r4, [r1, #12]
 8005be0:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be6:	694a      	ldr	r2, [r1, #20]
 8005be8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bee:	688a      	ldr	r2, [r1, #8]
 8005bf0:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005bf2:	880a      	ldrh	r2, [r1, #0]
 8005bf4:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8005bf6:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <TIM_Base_SetConfig+0xfc>)
 8005bf8:	4298      	cmp	r0, r3
 8005bfa:	bf14      	ite	ne
 8005bfc:	462b      	movne	r3, r5
 8005bfe:	f045 0301 	orreq.w	r3, r5, #1
 8005c02:	b95b      	cbnz	r3, 8005c1c <TIM_Base_SetConfig+0xdc>
 8005c04:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <TIM_Base_SetConfig+0xf4>)
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bf14      	ite	ne
 8005c0a:	2300      	movne	r3, #0
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <TIM_Base_SetConfig+0x100>)
 8005c10:	4290      	cmp	r0, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0xdc>
 8005c14:	b913      	cbnz	r3, 8005c1c <TIM_Base_SetConfig+0xdc>
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <TIM_Base_SetConfig+0xf8>)
 8005c18:	4298      	cmp	r0, r3
 8005c1a:	d101      	bne.n	8005c20 <TIM_Base_SetConfig+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c1c:	8a0b      	ldrh	r3, [r1, #16]
 8005c1e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005c20:	2301      	movs	r3, #1
 8005c22:	6143      	str	r3, [r0, #20]
}
 8005c24:	bc70      	pop	{r4, r5, r6}
 8005c26:	4770      	bx	lr
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800
 8005c3c:	40010400 	.word	0x40010400
 8005c40:	40014000 	.word	0x40014000

08005c44 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8005c44:	b1a8      	cbz	r0, 8005c72 <HAL_TIM_Base_Init+0x2e>
{ 
 8005c46:	b510      	push	{r4, lr}
 8005c48:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8005c4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c4e:	b15b      	cbz	r3, 8005c68 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8005c50:	2302      	movs	r3, #2
 8005c52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005c56:	1d21      	adds	r1, r4, #4
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	f7ff ff71 	bl	8005b40 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005c64:	2000      	movs	r0, #0
 8005c66:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005c68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005c6c:	f7ff fe88 	bl	8005980 <HAL_TIM_Base_MspInit>
 8005c70:	e7ee      	b.n	8005c50 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005c72:	2001      	movs	r0, #1
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	4770      	bx	lr

08005c7a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7a:	6802      	ldr	r2, [r0, #0]
 8005c7c:	6813      	ldr	r3, [r2, #0]
 8005c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c82:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c84:	6802      	ldr	r2, [r0, #0]
 8005c86:	6893      	ldr	r3, [r2, #8]
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	2320      	movs	r3, #32
 8005c90:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
 8005c94:	4770      	bx	lr

08005c96 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c96:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b21      	cmp	r3, #33	; 0x21
 8005c9e:	d001      	beq.n	8005ca4 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8005ca0:	2002      	movs	r0, #2
  }
}
 8005ca2:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8005ca4:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	b9a3      	cbnz	r3, 8005cd6 <UART_Transmit_IT+0x40>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8005cac:	6803      	ldr	r3, [r0, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005cb4:	d00a      	beq.n	8005ccc <UART_Transmit_IT+0x36>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005cbc:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cbe:	6802      	ldr	r2, [r0, #0]
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc6:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8005cc8:	2000      	movs	r0, #0
 8005cca:	4770      	bx	lr
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e7f3      	b.n	8005cbe <UART_Transmit_IT+0x28>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd6:	6883      	ldr	r3, [r0, #8]
 8005cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cdc:	d00e      	beq.n	8005cfc <UART_Transmit_IT+0x66>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8005cde:	6802      	ldr	r2, [r0, #0]
 8005ce0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005ce2:	1c59      	adds	r1, r3, #1
 8005ce4:	65c1      	str	r1, [r0, #92]	; 0x5c
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005cea:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
      return HAL_OK;
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	6903      	ldr	r3, [r0, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1ed      	bne.n	8005cde <UART_Transmit_IT+0x48>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8005d02:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005d04:	6802      	ldr	r2, [r0, #0]
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0c:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005d0e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005d10:	3302      	adds	r3, #2
 8005d12:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005d14:	e7e9      	b.n	8005cea <UART_Transmit_IT+0x54>

08005d16 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8005d16:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d001      	beq.n	8005d24 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8005d20:	2002      	movs	r0, #2
 8005d22:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	bf18      	it	ne
 8005d28:	2900      	cmpne	r1, #0
 8005d2a:	d054      	beq.n	8005dd6 <HAL_UART_Receive_IT+0xc0>
    __HAL_LOCK(huart);
 8005d2c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d052      	beq.n	8005dda <HAL_UART_Receive_IT+0xc4>
 8005d34:	2301      	movs	r3, #1
 8005d36:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    huart->pRxBuffPtr = pData;
 8005d3a:	6641      	str	r1, [r0, #100]	; 0x64
    huart->RxXferSize = Size;
 8005d3c:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    huart->RxXferCount = Size;
 8005d40:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    UART_MASK_COMPUTATION(huart);
 8005d44:	6883      	ldr	r3, [r0, #8]
 8005d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4a:	d006      	beq.n	8005d5a <HAL_UART_Receive_IT+0x44>
 8005d4c:	b9a3      	cbnz	r3, 8005d78 <HAL_UART_Receive_IT+0x62>
 8005d4e:	6903      	ldr	r3, [r0, #16]
 8005d50:	b973      	cbnz	r3, 8005d70 <HAL_UART_Receive_IT+0x5a>
 8005d52:	23ff      	movs	r3, #255	; 0xff
 8005d54:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005d58:	e011      	b.n	8005d7e <HAL_UART_Receive_IT+0x68>
 8005d5a:	6903      	ldr	r3, [r0, #16]
 8005d5c:	b923      	cbnz	r3, 8005d68 <HAL_UART_Receive_IT+0x52>
 8005d5e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005d62:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005d66:	e00a      	b.n	8005d7e <HAL_UART_Receive_IT+0x68>
 8005d68:	23ff      	movs	r3, #255	; 0xff
 8005d6a:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005d6e:	e006      	b.n	8005d7e <HAL_UART_Receive_IT+0x68>
 8005d70:	237f      	movs	r3, #127	; 0x7f
 8005d72:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005d76:	e002      	b.n	8005d7e <HAL_UART_Receive_IT+0x68>
 8005d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7c:	d016      	beq.n	8005dac <HAL_UART_Receive_IT+0x96>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d82:	2222      	movs	r2, #34	; 0x22
 8005d84:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
    __HAL_UNLOCK(huart);
 8005d88:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8c:	6802      	ldr	r2, [r0, #0]
 8005d8e:	6893      	ldr	r3, [r2, #8]
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6093      	str	r3, [r2, #8]
    if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8005d96:	6803      	ldr	r3, [r0, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005d9e:	d10f      	bne.n	8005dc0 <HAL_UART_Receive_IT+0xaa>
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005da6:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8005da8:	2000      	movs	r0, #0
 8005daa:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8005dac:	6903      	ldr	r3, [r0, #16]
 8005dae:	b91b      	cbnz	r3, 8005db8 <HAL_UART_Receive_IT+0xa2>
 8005db0:	237f      	movs	r3, #127	; 0x7f
 8005db2:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005db6:	e7e2      	b.n	8005d7e <HAL_UART_Receive_IT+0x68>
 8005db8:	233f      	movs	r3, #63	; 0x3f
 8005dba:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005dbe:	e7de      	b.n	8005d7e <HAL_UART_Receive_IT+0x68>
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dc8:	6802      	ldr	r2, [r0, #0]
 8005dca:	6893      	ldr	r3, [r2, #8]
 8005dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	4770      	bx	lr
      return HAL_ERROR;
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	4770      	bx	lr
    __HAL_LOCK(huart);
 8005dda:	2002      	movs	r0, #2
}
 8005ddc:	4770      	bx	lr

08005dde <HAL_UART_TxCpltCallback>:
{
 8005dde:	4770      	bx	lr

08005de0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005de0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005de2:	6801      	ldr	r1, [r0, #0]
 8005de4:	680b      	ldr	r3, [r1, #0]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dea:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dec:	2320      	movs	r3, #32
 8005dee:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79

  HAL_UART_TxCpltCallback(huart);
 8005df2:	f7ff fff4 	bl	8005dde <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8005df6:	2000      	movs	r0, #0
 8005df8:	bd08      	pop	{r3, pc}

08005dfa <UART_Receive_IT>:
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8005dfa:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dfe:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b22      	cmp	r3, #34	; 0x22
 8005e06:	d007      	beq.n	8005e18 <UART_Receive_IT+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e08:	6802      	ldr	r2, [r0, #0]
 8005e0a:	8b13      	ldrh	r3, [r2, #24]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f043 0308 	orr.w	r3, r3, #8
 8005e12:	8313      	strh	r3, [r2, #24]

    return HAL_BUSY;
 8005e14:	2002      	movs	r0, #2
 8005e16:	4770      	bx	lr
{
 8005e18:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e1a:	6803      	ldr	r3, [r0, #0]
 8005e1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e1e:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e20:	6881      	ldr	r1, [r0, #8]
 8005e22:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005e26:	d00f      	beq.n	8005e48 <UART_Receive_IT+0x4e>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e28:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005e2a:	1c4c      	adds	r4, r1, #1
 8005e2c:	6644      	str	r4, [r0, #100]	; 0x64
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	401a      	ands	r2, r3
 8005e32:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8005e34:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 8005e42:	b15b      	cbz	r3, 8005e5c <UART_Receive_IT+0x62>
    return HAL_OK;
 8005e44:	2000      	movs	r0, #0
  }
}
 8005e46:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e48:	6901      	ldr	r1, [r0, #16]
 8005e4a:	2900      	cmp	r1, #0
 8005e4c:	d1ec      	bne.n	8005e28 <UART_Receive_IT+0x2e>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8005e4e:	6e41      	ldr	r1, [r0, #100]	; 0x64
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e50:	401a      	ands	r2, r3
 8005e52:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8005e54:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005e56:	3302      	adds	r3, #2
 8005e58:	6643      	str	r3, [r0, #100]	; 0x64
 8005e5a:	e7eb      	b.n	8005e34 <UART_Receive_IT+0x3a>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5c:	6802      	ldr	r2, [r0, #0]
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e64:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	6802      	ldr	r2, [r0, #0]
 8005e68:	6893      	ldr	r3, [r2, #8]
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005e70:	2320      	movs	r3, #32
 8005e72:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
      HAL_UART_RxCpltCallback(huart);
 8005e76:	f7fc fa8f 	bl	8002398 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	bd10      	pop	{r4, pc}
	...

08005e80 <HAL_UART_IRQHandler>:
{
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e84:	6802      	ldr	r2, [r0, #0]
 8005e86:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e88:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e8a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == RESET)
 8005e8c:	f013 050f 	ands.w	r5, r3, #15
 8005e90:	d108      	bne.n	8005ea4 <HAL_UART_IRQHandler+0x24>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8005e92:	f013 0f20 	tst.w	r3, #32
 8005e96:	d005      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x24>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e98:	f010 0f20 	tst.w	r0, #32
 8005e9c:	d16c      	bne.n	8005f78 <HAL_UART_IRQHandler+0xf8>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8005e9e:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 8005ea2:	d169      	bne.n	8005f78 <HAL_UART_IRQHandler+0xf8>
  if(   (errorflags != RESET)
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	d079      	beq.n	8005f9c <HAL_UART_IRQHandler+0x11c>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8005ea8:	4d56      	ldr	r5, [pc, #344]	; (8006004 <HAL_UART_IRQHandler+0x184>)
 8005eaa:	400d      	ands	r5, r1
 8005eac:	d102      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x34>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005eae:	f410 7f90 	tst.w	r0, #288	; 0x120
 8005eb2:	d073      	beq.n	8005f9c <HAL_UART_IRQHandler+0x11c>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005eb4:	f013 0f01 	tst.w	r3, #1
 8005eb8:	d007      	beq.n	8005eca <HAL_UART_IRQHandler+0x4a>
 8005eba:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005ebe:	d004      	beq.n	8005eca <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8005ec0:	2601      	movs	r6, #1
 8005ec2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ec4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005ec6:	4332      	orrs	r2, r6
 8005ec8:	67e2      	str	r2, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eca:	f013 0f02 	tst.w	r3, #2
 8005ece:	d009      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x64>
 8005ed0:	f011 0f01 	tst.w	r1, #1
 8005ed4:	d006      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	2602      	movs	r6, #2
 8005eda:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005edc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005ede:	f042 0204 	orr.w	r2, r2, #4
 8005ee2:	67e2      	str	r2, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ee4:	f013 0f04 	tst.w	r3, #4
 8005ee8:	d009      	beq.n	8005efe <HAL_UART_IRQHandler+0x7e>
 8005eea:	f011 0f01 	tst.w	r1, #1
 8005eee:	d006      	beq.n	8005efe <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	2604      	movs	r6, #4
 8005ef4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005ef8:	f042 0202 	orr.w	r2, r2, #2
 8005efc:	67e2      	str	r2, [r4, #124]	; 0x7c
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8005efe:	f013 0f08 	tst.w	r3, #8
 8005f02:	d009      	beq.n	8005f18 <HAL_UART_IRQHandler+0x98>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8005f04:	f010 0f20 	tst.w	r0, #32
 8005f08:	d100      	bne.n	8005f0c <HAL_UART_IRQHandler+0x8c>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8005f0a:	b12d      	cbz	r5, 8005f18 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	2508      	movs	r5, #8
 8005f10:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f12:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005f14:	432a      	orrs	r2, r5
 8005f16:	67e2      	str	r2, [r4, #124]	; 0x7c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f18:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d05d      	beq.n	8005fda <HAL_UART_IRQHandler+0x15a>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8005f1e:	f013 0f20 	tst.w	r3, #32
 8005f22:	d008      	beq.n	8005f36 <HAL_UART_IRQHandler+0xb6>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f24:	f010 0f20 	tst.w	r0, #32
 8005f28:	d102      	bne.n	8005f30 <HAL_UART_IRQHandler+0xb0>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8005f2a:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 8005f2e:	d002      	beq.n	8005f36 <HAL_UART_IRQHandler+0xb6>
        UART_Receive_IT(huart);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff ff62 	bl	8005dfa <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005f36:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005f38:	f013 0f08 	tst.w	r3, #8
 8005f3c:	d104      	bne.n	8005f48 <HAL_UART_IRQHandler+0xc8>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005f42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f46:	d023      	beq.n	8005f90 <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f7ff fe96 	bl	8005c7a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f56:	d017      	beq.n	8005f88 <HAL_UART_IRQHandler+0x108>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f5e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8005f60:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005f62:	b16b      	cbz	r3, 8005f80 <HAL_UART_IRQHandler+0x100>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f64:	4a28      	ldr	r2, [pc, #160]	; (8006008 <HAL_UART_IRQHandler+0x188>)
 8005f66:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f68:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005f6a:	f7fd fc3b 	bl	80037e4 <HAL_DMA_Abort_IT>
 8005f6e:	b3a0      	cbz	r0, 8005fda <HAL_UART_IRQHandler+0x15a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f70:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005f72:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f74:	4798      	blx	r3
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
      UART_Receive_IT(huart);
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff ff3e 	bl	8005dfa <UART_Receive_IT>
      return;
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
            HAL_UART_ErrorCallback(huart);
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7fc fa07 	bl	8002394 <HAL_UART_ErrorCallback>
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
          HAL_UART_ErrorCallback(huart);
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f7fc fa03 	bl	8002394 <HAL_UART_ErrorCallback>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005f90:	4620      	mov	r0, r4
 8005f92:	f7fc f9ff 	bl	8002394 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	67e3      	str	r3, [r4, #124]	; 0x7c
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005f9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005fa0:	d002      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x128>
 8005fa2:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8005fa6:	d119      	bne.n	8005fdc <HAL_UART_IRQHandler+0x15c>
  if(((isrflags & USART_ISR_TXE) != RESET)
 8005fa8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fac:	d005      	beq.n	8005fba <HAL_UART_IRQHandler+0x13a>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 8005fae:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005fb2:	d11f      	bne.n	8005ff4 <HAL_UART_IRQHandler+0x174>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8005fb4:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8005fb8:	d11c      	bne.n	8005ff4 <HAL_UART_IRQHandler+0x174>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x146>
 8005fc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fc4:	d11a      	bne.n	8005ffc <HAL_UART_IRQHandler+0x17c>
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8005fc6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005fca:	d006      	beq.n	8005fda <HAL_UART_IRQHandler+0x15a>
 8005fcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005fd0:	d003      	beq.n	8005fda <HAL_UART_IRQHandler+0x15a>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8005fdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fe0:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8005fe2:	2320      	movs	r3, #32
 8005fe4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    HAL_UARTEx_WakeupCallback(huart);
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 fe04 	bl	8006bfa <HAL_UARTEx_WakeupCallback>
    return;
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7ff fe4e 	bl	8005c96 <UART_Transmit_IT>
    return;
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f7ff feef 	bl	8005de0 <UART_EndTransmit_IT>
    return;
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	10000001 	.word	0x10000001
 8006008:	0800600d 	.word	0x0800600d

0800600c <UART_DMAAbortOnError>:
{
 800600c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800600e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  huart->TxXferCount = 0U;
 8006016:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  HAL_UART_ErrorCallback(huart);
 800601a:	f7fc f9bb 	bl	8002394 <HAL_UART_ErrorCallback>
 800601e:	bd08      	pop	{r3, pc}

08006020 <UART_SetConfig>:
{
 8006020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006024:	b087      	sub	sp, #28
 8006026:	4604      	mov	r4, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8006028:	6801      	ldr	r1, [r0, #0]
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 800602a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800602c:	6883      	ldr	r3, [r0, #8]
 800602e:	6900      	ldr	r0, [r0, #16]
 8006030:	4303      	orrs	r3, r0
 8006032:	6960      	ldr	r0, [r4, #20]
 8006034:	4303      	orrs	r3, r0
 8006036:	69e0      	ldr	r0, [r4, #28]
 8006038:	4303      	orrs	r3, r0
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 800603a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800603c:	6808      	ldr	r0, [r1, #0]
 800603e:	4a8f      	ldr	r2, [pc, #572]	; (800627c <UART_SetConfig+0x25c>)
 8006040:	4002      	ands	r2, r0
 8006042:	4313      	orrs	r3, r2
 8006044:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	6853      	ldr	r3, [r2, #4]
 800604a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800604e:	68e1      	ldr	r1, [r4, #12]
 8006050:	430b      	orrs	r3, r1
 8006052:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006054:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	4989      	ldr	r1, [pc, #548]	; (8006280 <UART_SetConfig+0x260>)
 800605a:	428a      	cmp	r2, r1
 800605c:	d001      	beq.n	8006062 <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 800605e:	6a21      	ldr	r1, [r4, #32]
 8006060:	430b      	orrs	r3, r1
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8006062:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006064:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006068:	d07f      	beq.n	800616a <UART_SetConfig+0x14a>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800606a:	6890      	ldr	r0, [r2, #8]
 800606c:	4985      	ldr	r1, [pc, #532]	; (8006284 <UART_SetConfig+0x264>)
 800606e:	4001      	ands	r1, r0
 8006070:	430b      	orrs	r3, r1
 8006072:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006078:	f023 030f 	bic.w	r3, r3, #15
 800607c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800607e:	430b      	orrs	r3, r1
 8006080:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	4b80      	ldr	r3, [pc, #512]	; (8006288 <UART_SetConfig+0x268>)
 8006086:	429d      	cmp	r5, r3
 8006088:	d074      	beq.n	8006174 <UART_SetConfig+0x154>
 800608a:	4b80      	ldr	r3, [pc, #512]	; (800628c <UART_SetConfig+0x26c>)
 800608c:	429d      	cmp	r5, r3
 800608e:	f000 80ae 	beq.w	80061ee <UART_SetConfig+0x1ce>
 8006092:	4b7f      	ldr	r3, [pc, #508]	; (8006290 <UART_SetConfig+0x270>)
 8006094:	429d      	cmp	r5, r3
 8006096:	f000 80c4 	beq.w	8006222 <UART_SetConfig+0x202>
 800609a:	4b7e      	ldr	r3, [pc, #504]	; (8006294 <UART_SetConfig+0x274>)
 800609c:	429d      	cmp	r5, r3
 800609e:	f000 80d7 	beq.w	8006250 <UART_SetConfig+0x230>
 80060a2:	4b7d      	ldr	r3, [pc, #500]	; (8006298 <UART_SetConfig+0x278>)
 80060a4:	429d      	cmp	r5, r3
 80060a6:	f000 8103 	beq.w	80062b0 <UART_SetConfig+0x290>
 80060aa:	4b7c      	ldr	r3, [pc, #496]	; (800629c <UART_SetConfig+0x27c>)
 80060ac:	429d      	cmp	r5, r3
 80060ae:	f000 8116 	beq.w	80062de <UART_SetConfig+0x2be>
 80060b2:	4b7b      	ldr	r3, [pc, #492]	; (80062a0 <UART_SetConfig+0x280>)
 80060b4:	429d      	cmp	r5, r3
 80060b6:	f000 813b 	beq.w	8006330 <UART_SetConfig+0x310>
 80060ba:	4b7a      	ldr	r3, [pc, #488]	; (80062a4 <UART_SetConfig+0x284>)
 80060bc:	429d      	cmp	r5, r3
 80060be:	f000 814e 	beq.w	800635e <UART_SetConfig+0x33e>
 80060c2:	4b6f      	ldr	r3, [pc, #444]	; (8006280 <UART_SetConfig+0x260>)
 80060c4:	429d      	cmp	r5, r3
 80060c6:	f000 8161 	beq.w	800638c <UART_SetConfig+0x36c>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80060ca:	2680      	movs	r6, #128	; 0x80
  if(UART_INSTANCE_LOWPOWER(huart))
 80060cc:	4b6c      	ldr	r3, [pc, #432]	; (8006280 <UART_SetConfig+0x260>)
 80060ce:	429d      	cmp	r5, r3
 80060d0:	f000 8186 	beq.w	80063e0 <UART_SetConfig+0x3c0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d4:	69e3      	ldr	r3, [r4, #28]
 80060d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060da:	f000 82af 	beq.w	800663c <UART_SetConfig+0x61c>
    switch (clocksource)
 80060de:	2e40      	cmp	r6, #64	; 0x40
 80060e0:	f200 8417 	bhi.w	8006912 <UART_SetConfig+0x8f2>
 80060e4:	e8df f016 	tbh	[pc, r6, lsl #1]
 80060e8:	038b037a 	.word	0x038b037a
 80060ec:	04150415 	.word	0x04150415
 80060f0:	0415039c 	.word	0x0415039c
 80060f4:	04150415 	.word	0x04150415
 80060f8:	041503c4 	.word	0x041503c4
 80060fc:	04150415 	.word	0x04150415
 8006100:	04150415 	.word	0x04150415
 8006104:	04150415 	.word	0x04150415
 8006108:	041503ee 	.word	0x041503ee
 800610c:	04150415 	.word	0x04150415
 8006110:	04150415 	.word	0x04150415
 8006114:	04150415 	.word	0x04150415
 8006118:	04150415 	.word	0x04150415
 800611c:	04150415 	.word	0x04150415
 8006120:	04150415 	.word	0x04150415
 8006124:	04150415 	.word	0x04150415
 8006128:	041503fe 	.word	0x041503fe
 800612c:	04150415 	.word	0x04150415
 8006130:	04150415 	.word	0x04150415
 8006134:	04150415 	.word	0x04150415
 8006138:	04150415 	.word	0x04150415
 800613c:	04150415 	.word	0x04150415
 8006140:	04150415 	.word	0x04150415
 8006144:	04150415 	.word	0x04150415
 8006148:	04150415 	.word	0x04150415
 800614c:	04150415 	.word	0x04150415
 8006150:	04150415 	.word	0x04150415
 8006154:	04150415 	.word	0x04150415
 8006158:	04150415 	.word	0x04150415
 800615c:	04150415 	.word	0x04150415
 8006160:	04150415 	.word	0x04150415
 8006164:	04150415 	.word	0x04150415
 8006168:	03b0      	.short	0x03b0
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 800616a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800616c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800616e:	4301      	orrs	r1, r0
 8006170:	430b      	orrs	r3, r1
 8006172:	e77a      	b.n	800606a <UART_SetConfig+0x4a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006174:	4b4c      	ldr	r3, [pc, #304]	; (80062a8 <UART_SetConfig+0x288>)
 8006176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800617c:	2b28      	cmp	r3, #40	; 0x28
 800617e:	d82a      	bhi.n	80061d6 <UART_SetConfig+0x1b6>
 8006180:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006184:	0029011c 	.word	0x0029011c
 8006188:	00290029 	.word	0x00290029
 800618c:	00290029 	.word	0x00290029
 8006190:	00290029 	.word	0x00290029
 8006194:	0029002b 	.word	0x0029002b
 8006198:	00290029 	.word	0x00290029
 800619c:	00290029 	.word	0x00290029
 80061a0:	00290029 	.word	0x00290029
 80061a4:	0029002d 	.word	0x0029002d
 80061a8:	00290029 	.word	0x00290029
 80061ac:	00290029 	.word	0x00290029
 80061b0:	00290029 	.word	0x00290029
 80061b4:	0029002f 	.word	0x0029002f
 80061b8:	00290029 	.word	0x00290029
 80061bc:	00290029 	.word	0x00290029
 80061c0:	00290029 	.word	0x00290029
 80061c4:	00290031 	.word	0x00290031
 80061c8:	00290029 	.word	0x00290029
 80061cc:	00290029 	.word	0x00290029
 80061d0:	00290029 	.word	0x00290029
 80061d4:	0033      	.short	0x0033
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80061d6:	2680      	movs	r6, #128	; 0x80
 80061d8:	e778      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061da:	2604      	movs	r6, #4
 80061dc:	e776      	b.n	80060cc <UART_SetConfig+0xac>
 80061de:	2640      	movs	r6, #64	; 0x40
 80061e0:	e774      	b.n	80060cc <UART_SetConfig+0xac>
 80061e2:	2608      	movs	r6, #8
 80061e4:	e772      	b.n	80060cc <UART_SetConfig+0xac>
 80061e6:	2610      	movs	r6, #16
 80061e8:	e770      	b.n	80060cc <UART_SetConfig+0xac>
 80061ea:	2620      	movs	r6, #32
 80061ec:	e76e      	b.n	80060cc <UART_SetConfig+0xac>
 80061ee:	4b2e      	ldr	r3, [pc, #184]	; (80062a8 <UART_SetConfig+0x288>)
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d807      	bhi.n	800620a <UART_SetConfig+0x1ea>
 80061fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80061fe:	00e1      	.short	0x00e1
 8006200:	000a0008 	.word	0x000a0008
 8006204:	000e000c 	.word	0x000e000c
 8006208:	0010      	.short	0x0010
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800620a:	2680      	movs	r6, #128	; 0x80
 800620c:	e75e      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800620e:	2604      	movs	r6, #4
 8006210:	e75c      	b.n	80060cc <UART_SetConfig+0xac>
 8006212:	2640      	movs	r6, #64	; 0x40
 8006214:	e75a      	b.n	80060cc <UART_SetConfig+0xac>
 8006216:	2608      	movs	r6, #8
 8006218:	e758      	b.n	80060cc <UART_SetConfig+0xac>
 800621a:	2610      	movs	r6, #16
 800621c:	e756      	b.n	80060cc <UART_SetConfig+0xac>
 800621e:	2620      	movs	r6, #32
 8006220:	e754      	b.n	80060cc <UART_SetConfig+0xac>
 8006222:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <UART_SetConfig+0x288>)
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b05      	cmp	r3, #5
 800622c:	d804      	bhi.n	8006238 <UART_SetConfig+0x218>
 800622e:	e8df f003 	tbb	[pc, r3]
 8006232:	05c9      	.short	0x05c9
 8006234:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006238:	2680      	movs	r6, #128	; 0x80
 800623a:	e747      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800623c:	2604      	movs	r6, #4
 800623e:	e745      	b.n	80060cc <UART_SetConfig+0xac>
 8006240:	2640      	movs	r6, #64	; 0x40
 8006242:	e743      	b.n	80060cc <UART_SetConfig+0xac>
 8006244:	2608      	movs	r6, #8
 8006246:	e741      	b.n	80060cc <UART_SetConfig+0xac>
 8006248:	2610      	movs	r6, #16
 800624a:	e73f      	b.n	80060cc <UART_SetConfig+0xac>
 800624c:	2620      	movs	r6, #32
 800624e:	e73d      	b.n	80060cc <UART_SetConfig+0xac>
 8006250:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <UART_SetConfig+0x288>)
 8006252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	2b05      	cmp	r3, #5
 800625a:	d804      	bhi.n	8006266 <UART_SetConfig+0x246>
 800625c:	e8df f003 	tbb	[pc, r3]
 8006260:	090705b4 	.word	0x090705b4
 8006264:	260b      	.short	0x260b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006266:	2680      	movs	r6, #128	; 0x80
 8006268:	e730      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800626a:	2604      	movs	r6, #4
 800626c:	e72e      	b.n	80060cc <UART_SetConfig+0xac>
 800626e:	2640      	movs	r6, #64	; 0x40
 8006270:	e72c      	b.n	80060cc <UART_SetConfig+0xac>
 8006272:	2608      	movs	r6, #8
 8006274:	e72a      	b.n	80060cc <UART_SetConfig+0xac>
 8006276:	2610      	movs	r6, #16
 8006278:	e728      	b.n	80060cc <UART_SetConfig+0xac>
 800627a:	bf00      	nop
 800627c:	cfff69f3 	.word	0xcfff69f3
 8006280:	58000c00 	.word	0x58000c00
 8006284:	11fff4ff 	.word	0x11fff4ff
 8006288:	40011000 	.word	0x40011000
 800628c:	40004400 	.word	0x40004400
 8006290:	40004800 	.word	0x40004800
 8006294:	40004c00 	.word	0x40004c00
 8006298:	40005000 	.word	0x40005000
 800629c:	40011400 	.word	0x40011400
 80062a0:	40007800 	.word	0x40007800
 80062a4:	40007c00 	.word	0x40007c00
 80062a8:	58024400 	.word	0x58024400
 80062ac:	2620      	movs	r6, #32
 80062ae:	e70d      	b.n	80060cc <UART_SetConfig+0xac>
 80062b0:	4b85      	ldr	r3, [pc, #532]	; (80064c8 <UART_SetConfig+0x4a8>)
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	2b05      	cmp	r3, #5
 80062ba:	d804      	bhi.n	80062c6 <UART_SetConfig+0x2a6>
 80062bc:	e8df f003 	tbb	[pc, r3]
 80062c0:	09070586 	.word	0x09070586
 80062c4:	0d0b      	.short	0x0d0b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80062c6:	2680      	movs	r6, #128	; 0x80
 80062c8:	e700      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ca:	2604      	movs	r6, #4
 80062cc:	e6fe      	b.n	80060cc <UART_SetConfig+0xac>
 80062ce:	2640      	movs	r6, #64	; 0x40
 80062d0:	e6fc      	b.n	80060cc <UART_SetConfig+0xac>
 80062d2:	2608      	movs	r6, #8
 80062d4:	e6fa      	b.n	80060cc <UART_SetConfig+0xac>
 80062d6:	2610      	movs	r6, #16
 80062d8:	e6f8      	b.n	80060cc <UART_SetConfig+0xac>
 80062da:	2620      	movs	r6, #32
 80062dc:	e6f6      	b.n	80060cc <UART_SetConfig+0xac>
 80062de:	4b7a      	ldr	r3, [pc, #488]	; (80064c8 <UART_SetConfig+0x4a8>)
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062e6:	2b28      	cmp	r3, #40	; 0x28
 80062e8:	d816      	bhi.n	8006318 <UART_SetConfig+0x2f8>
 80062ea:	e8df f003 	tbb	[pc, r3]
 80062ee:	1571      	.short	0x1571
 80062f0:	15151515 	.word	0x15151515
 80062f4:	15171515 	.word	0x15171515
 80062f8:	15151515 	.word	0x15151515
 80062fc:	15191515 	.word	0x15191515
 8006300:	15151515 	.word	0x15151515
 8006304:	151b1515 	.word	0x151b1515
 8006308:	15151515 	.word	0x15151515
 800630c:	151d1515 	.word	0x151d1515
 8006310:	15151515 	.word	0x15151515
 8006314:	1515      	.short	0x1515
 8006316:	1f          	.byte	0x1f
 8006317:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006318:	2680      	movs	r6, #128	; 0x80
 800631a:	e6d7      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800631c:	2604      	movs	r6, #4
 800631e:	e6d5      	b.n	80060cc <UART_SetConfig+0xac>
 8006320:	2640      	movs	r6, #64	; 0x40
 8006322:	e6d3      	b.n	80060cc <UART_SetConfig+0xac>
 8006324:	2608      	movs	r6, #8
 8006326:	e6d1      	b.n	80060cc <UART_SetConfig+0xac>
 8006328:	2610      	movs	r6, #16
 800632a:	e6cf      	b.n	80060cc <UART_SetConfig+0xac>
 800632c:	2620      	movs	r6, #32
 800632e:	e6cd      	b.n	80060cc <UART_SetConfig+0xac>
 8006330:	4b65      	ldr	r3, [pc, #404]	; (80064c8 <UART_SetConfig+0x4a8>)
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	2b05      	cmp	r3, #5
 800633a:	d804      	bhi.n	8006346 <UART_SetConfig+0x326>
 800633c:	e8df f003 	tbb	[pc, r3]
 8006340:	0907054a 	.word	0x0907054a
 8006344:	0d0b      	.short	0x0d0b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006346:	2680      	movs	r6, #128	; 0x80
 8006348:	e6c0      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800634a:	2604      	movs	r6, #4
 800634c:	e6be      	b.n	80060cc <UART_SetConfig+0xac>
 800634e:	2640      	movs	r6, #64	; 0x40
 8006350:	e6bc      	b.n	80060cc <UART_SetConfig+0xac>
 8006352:	2608      	movs	r6, #8
 8006354:	e6ba      	b.n	80060cc <UART_SetConfig+0xac>
 8006356:	2610      	movs	r6, #16
 8006358:	e6b8      	b.n	80060cc <UART_SetConfig+0xac>
 800635a:	2620      	movs	r6, #32
 800635c:	e6b6      	b.n	80060cc <UART_SetConfig+0xac>
 800635e:	4b5a      	ldr	r3, [pc, #360]	; (80064c8 <UART_SetConfig+0x4a8>)
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	2b05      	cmp	r3, #5
 8006368:	d804      	bhi.n	8006374 <UART_SetConfig+0x354>
 800636a:	e8df f003 	tbb	[pc, r3]
 800636e:	0535      	.short	0x0535
 8006370:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006374:	2680      	movs	r6, #128	; 0x80
 8006376:	e6a9      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006378:	2604      	movs	r6, #4
 800637a:	e6a7      	b.n	80060cc <UART_SetConfig+0xac>
 800637c:	2640      	movs	r6, #64	; 0x40
 800637e:	e6a5      	b.n	80060cc <UART_SetConfig+0xac>
 8006380:	2608      	movs	r6, #8
 8006382:	e6a3      	b.n	80060cc <UART_SetConfig+0xac>
 8006384:	2610      	movs	r6, #16
 8006386:	e6a1      	b.n	80060cc <UART_SetConfig+0xac>
 8006388:	2620      	movs	r6, #32
 800638a:	e69f      	b.n	80060cc <UART_SetConfig+0xac>
 800638c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b05      	cmp	r3, #5
 8006398:	d804      	bhi.n	80063a4 <UART_SetConfig+0x384>
 800639a:	e8df f003 	tbb	[pc, r3]
 800639e:	051f      	.short	0x051f
 80063a0:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80063a4:	2680      	movs	r6, #128	; 0x80
 80063a6:	e691      	b.n	80060cc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063a8:	2604      	movs	r6, #4
 80063aa:	e68f      	b.n	80060cc <UART_SetConfig+0xac>
 80063ac:	2640      	movs	r6, #64	; 0x40
 80063ae:	e68d      	b.n	80060cc <UART_SetConfig+0xac>
 80063b0:	2608      	movs	r6, #8
 80063b2:	e68b      	b.n	80060cc <UART_SetConfig+0xac>
 80063b4:	2610      	movs	r6, #16
 80063b6:	e689      	b.n	80060cc <UART_SetConfig+0xac>
 80063b8:	2620      	movs	r6, #32
 80063ba:	e687      	b.n	80060cc <UART_SetConfig+0xac>
 80063bc:	2601      	movs	r6, #1
 80063be:	e685      	b.n	80060cc <UART_SetConfig+0xac>
 80063c0:	2600      	movs	r6, #0
 80063c2:	e683      	b.n	80060cc <UART_SetConfig+0xac>
 80063c4:	2600      	movs	r6, #0
 80063c6:	e681      	b.n	80060cc <UART_SetConfig+0xac>
 80063c8:	2600      	movs	r6, #0
 80063ca:	e67f      	b.n	80060cc <UART_SetConfig+0xac>
 80063cc:	2600      	movs	r6, #0
 80063ce:	e67d      	b.n	80060cc <UART_SetConfig+0xac>
 80063d0:	2601      	movs	r6, #1
 80063d2:	e67b      	b.n	80060cc <UART_SetConfig+0xac>
 80063d4:	2600      	movs	r6, #0
 80063d6:	e679      	b.n	80060cc <UART_SetConfig+0xac>
 80063d8:	2600      	movs	r6, #0
 80063da:	e677      	b.n	80060cc <UART_SetConfig+0xac>
 80063dc:	2602      	movs	r6, #2
 80063de:	e675      	b.n	80060cc <UART_SetConfig+0xac>
    switch (clocksource)
 80063e0:	2e08      	cmp	r6, #8
 80063e2:	d03a      	beq.n	800645a <UART_SetConfig+0x43a>
 80063e4:	d908      	bls.n	80063f8 <UART_SetConfig+0x3d8>
 80063e6:	2e20      	cmp	r6, #32
 80063e8:	d044      	beq.n	8006474 <UART_SetConfig+0x454>
 80063ea:	2e40      	cmp	r6, #64	; 0x40
 80063ec:	d02f      	beq.n	800644e <UART_SetConfig+0x42e>
 80063ee:	2e10      	cmp	r6, #16
 80063f0:	d00c      	beq.n	800640c <UART_SetConfig+0x3ec>
        ret = HAL_ERROR;
 80063f2:	2501      	movs	r5, #1
    tmpreg = 0U;
 80063f4:	2000      	movs	r0, #0
      break;
 80063f6:	e00b      	b.n	8006410 <UART_SetConfig+0x3f0>
    switch (clocksource)
 80063f8:	2e02      	cmp	r6, #2
 80063fa:	d024      	beq.n	8006446 <UART_SetConfig+0x426>
 80063fc:	2e04      	cmp	r6, #4
 80063fe:	d1f8      	bne.n	80063f2 <UART_SetConfig+0x3d2>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006400:	a803      	add	r0, sp, #12
 8006402:	f7ff f82b 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8006406:	9804      	ldr	r0, [sp, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006408:	2500      	movs	r5, #0
      break;
 800640a:	e001      	b.n	8006410 <UART_SetConfig+0x3f0>
  HAL_StatusTypeDef ret               = HAL_OK;
 800640c:	2500      	movs	r5, #0
      tmpreg =(uint32_t) CSI_VALUE;
 800640e:	482f      	ldr	r0, [pc, #188]	; (80064cc <UART_SetConfig+0x4ac>)
    if (tmpreg != 0U)
 8006410:	2800      	cmp	r0, #0
 8006412:	f000 8150 	beq.w	80066b6 <UART_SetConfig+0x696>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006416:	6867      	ldr	r7, [r4, #4]
 8006418:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800641c:	4298      	cmp	r0, r3
 800641e:	f0c0 8272 	bcc.w	8006906 <UART_SetConfig+0x8e6>
 8006422:	ebb0 3f07 	cmp.w	r0, r7, lsl #12
 8006426:	f200 8270 	bhi.w	800690a <UART_SetConfig+0x8ea>
        switch (clocksource)
 800642a:	2e08      	cmp	r6, #8
 800642c:	f000 8096 	beq.w	800655c <UART_SetConfig+0x53c>
 8006430:	d927      	bls.n	8006482 <UART_SetConfig+0x462>
 8006432:	2e20      	cmp	r6, #32
 8006434:	f000 80ee 	beq.w	8006614 <UART_SetConfig+0x5f4>
 8006438:	2e40      	cmp	r6, #64	; 0x40
 800643a:	d071      	beq.n	8006520 <UART_SetConfig+0x500>
 800643c:	2e10      	cmp	r6, #16
 800643e:	f000 80ce 	beq.w	80065de <UART_SetConfig+0x5be>
          ret = HAL_ERROR;
 8006442:	2501      	movs	r5, #1
 8006444:	e063      	b.n	800650e <UART_SetConfig+0x4ee>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8006446:	f7fe fff3 	bl	8005430 <HAL_RCCEx_GetD3PCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 800644a:	2500      	movs	r5, #0
      break;
 800644c:	e7e0      	b.n	8006410 <UART_SetConfig+0x3f0>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644e:	4668      	mov	r0, sp
 8006450:	f7ff f8e8 	bl	8005624 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8006454:	9801      	ldr	r0, [sp, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006456:	2500      	movs	r5, #0
      break;
 8006458:	e7da      	b.n	8006410 <UART_SetConfig+0x3f0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <UART_SetConfig+0x4a8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f013 0f20 	tst.w	r3, #32
 8006462:	d00b      	beq.n	800647c <UART_SetConfig+0x45c>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006464:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <UART_SetConfig+0x4a8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800646c:	4818      	ldr	r0, [pc, #96]	; (80064d0 <UART_SetConfig+0x4b0>)
 800646e:	40d8      	lsrs	r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006470:	2500      	movs	r5, #0
 8006472:	e7cd      	b.n	8006410 <UART_SetConfig+0x3f0>
 8006474:	2500      	movs	r5, #0
      tmpreg = (uint32_t) LSE_VALUE;
 8006476:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800647a:	e7c9      	b.n	8006410 <UART_SetConfig+0x3f0>
  HAL_StatusTypeDef ret               = HAL_OK;
 800647c:	2500      	movs	r5, #0
        tmpreg = (uint32_t) HSI_VALUE;
 800647e:	4814      	ldr	r0, [pc, #80]	; (80064d0 <UART_SetConfig+0x4b0>)
 8006480:	e7c6      	b.n	8006410 <UART_SetConfig+0x3f0>
        switch (clocksource)
 8006482:	2e02      	cmp	r6, #2
 8006484:	d028      	beq.n	80064d8 <UART_SetConfig+0x4b8>
 8006486:	2e04      	cmp	r6, #4
 8006488:	d1db      	bne.n	8006442 <UART_SetConfig+0x422>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800648a:	a803      	add	r0, sp, #12
 800648c:	f7fe ffe6 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006490:	f04f 0800 	mov.w	r8, #0
 8006494:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <UART_SetConfig+0x4b4>)
 8006498:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800649c:	2300      	movs	r3, #0
 800649e:	9804      	ldr	r0, [sp, #16]
 80064a0:	4641      	mov	r1, r8
 80064a2:	f7f9 ff1d 	bl	80002e0 <__aeabi_uldivmod>
 80064a6:	020f      	lsls	r7, r1, #8
 80064a8:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80064ac:	0206      	lsls	r6, r0, #8
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	0850      	lsrs	r0, r2, #1
 80064b2:	4643      	mov	r3, r8
 80064b4:	eb16 0800 	adds.w	r8, r6, r0
 80064b8:	f147 0900 	adc.w	r9, r7, #0
 80064bc:	4640      	mov	r0, r8
 80064be:	4649      	mov	r1, r9
 80064c0:	f7f9 ff0e 	bl	80002e0 <__aeabi_uldivmod>
          break;
 80064c4:	e023      	b.n	800650e <UART_SetConfig+0x4ee>
 80064c6:	bf00      	nop
 80064c8:	58024400 	.word	0x58024400
 80064cc:	003d0900 	.word	0x003d0900
 80064d0:	03d09000 	.word	0x03d09000
 80064d4:	08008414 	.word	0x08008414
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80064d8:	f7fe ffaa 	bl	8005430 <HAL_RCCEx_GetD3PCLK1Freq>
 80064dc:	f04f 0800 	mov.w	r8, #0
 80064e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80064e2:	4b9f      	ldr	r3, [pc, #636]	; (8006760 <UART_SetConfig+0x740>)
 80064e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80064e8:	2300      	movs	r3, #0
 80064ea:	4641      	mov	r1, r8
 80064ec:	f7f9 fef8 	bl	80002e0 <__aeabi_uldivmod>
 80064f0:	020f      	lsls	r7, r1, #8
 80064f2:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80064f6:	0206      	lsls	r6, r0, #8
 80064f8:	6862      	ldr	r2, [r4, #4]
 80064fa:	0850      	lsrs	r0, r2, #1
 80064fc:	4643      	mov	r3, r8
 80064fe:	eb16 0800 	adds.w	r8, r6, r0
 8006502:	f147 0900 	adc.w	r9, r7, #0
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7f9 fee9 	bl	80002e0 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800650e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006512:	4b94      	ldr	r3, [pc, #592]	; (8006764 <UART_SetConfig+0x744>)
 8006514:	429a      	cmp	r2, r3
 8006516:	f200 81fa 	bhi.w	800690e <UART_SetConfig+0x8ee>
           huart->Instance->BRR = tmpreg;
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	60d8      	str	r0, [r3, #12]
 800651e:	e0ca      	b.n	80066b6 <UART_SetConfig+0x696>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006520:	4668      	mov	r0, sp
 8006522:	f7ff f87f 	bl	8005624 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800652c:	4b8c      	ldr	r3, [pc, #560]	; (8006760 <UART_SetConfig+0x740>)
 800652e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006532:	2300      	movs	r3, #0
 8006534:	9801      	ldr	r0, [sp, #4]
 8006536:	4641      	mov	r1, r8
 8006538:	f7f9 fed2 	bl	80002e0 <__aeabi_uldivmod>
 800653c:	020f      	lsls	r7, r1, #8
 800653e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006542:	0206      	lsls	r6, r0, #8
 8006544:	6862      	ldr	r2, [r4, #4]
 8006546:	0850      	lsrs	r0, r2, #1
 8006548:	4643      	mov	r3, r8
 800654a:	eb16 0800 	adds.w	r8, r6, r0
 800654e:	f147 0900 	adc.w	r9, r7, #0
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7f9 fec3 	bl	80002e0 <__aeabi_uldivmod>
          break;
 800655a:	e7d8      	b.n	800650e <UART_SetConfig+0x4ee>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800655c:	4b82      	ldr	r3, [pc, #520]	; (8006768 <UART_SetConfig+0x748>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f013 0f20 	tst.w	r3, #32
 8006564:	d020      	beq.n	80065a8 <UART_SetConfig+0x588>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8006566:	4b80      	ldr	r3, [pc, #512]	; (8006768 <UART_SetConfig+0x748>)
 8006568:	6819      	ldr	r1, [r3, #0]
 800656a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800656e:	2600      	movs	r6, #0
 8006570:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006572:	4b7b      	ldr	r3, [pc, #492]	; (8006760 <UART_SetConfig+0x740>)
 8006574:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006578:	2300      	movs	r3, #0
 800657a:	487c      	ldr	r0, [pc, #496]	; (800676c <UART_SetConfig+0x74c>)
 800657c:	40c8      	lsrs	r0, r1
 800657e:	4631      	mov	r1, r6
 8006580:	f7f9 feae 	bl	80002e0 <__aeabi_uldivmod>
 8006584:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8006588:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800658c:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8006590:	0878      	lsrs	r0, r7, #1
 8006592:	463a      	mov	r2, r7
 8006594:	4633      	mov	r3, r6
 8006596:	eb18 0600 	adds.w	r6, r8, r0
 800659a:	f149 0700 	adc.w	r7, r9, #0
 800659e:	4630      	mov	r0, r6
 80065a0:	4639      	mov	r1, r7
 80065a2:	f7f9 fe9d 	bl	80002e0 <__aeabi_uldivmod>
 80065a6:	e7b2      	b.n	800650e <UART_SetConfig+0x4ee>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80065a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065aa:	4b6d      	ldr	r3, [pc, #436]	; (8006760 <UART_SetConfig+0x740>)
 80065ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80065b0:	2300      	movs	r3, #0
 80065b2:	486e      	ldr	r0, [pc, #440]	; (800676c <UART_SetConfig+0x74c>)
 80065b4:	2100      	movs	r1, #0
 80065b6:	f7f9 fe93 	bl	80002e0 <__aeabi_uldivmod>
 80065ba:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80065be:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80065c2:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80065c6:	0878      	lsrs	r0, r7, #1
 80065c8:	463a      	mov	r2, r7
 80065ca:	2300      	movs	r3, #0
 80065cc:	eb18 0600 	adds.w	r6, r8, r0
 80065d0:	f149 0700 	adc.w	r7, r9, #0
 80065d4:	4630      	mov	r0, r6
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7f9 fe82 	bl	80002e0 <__aeabi_uldivmod>
 80065dc:	e797      	b.n	800650e <UART_SetConfig+0x4ee>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80065de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065e0:	4b5f      	ldr	r3, [pc, #380]	; (8006760 <UART_SetConfig+0x740>)
 80065e2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80065e6:	2300      	movs	r3, #0
 80065e8:	4861      	ldr	r0, [pc, #388]	; (8006770 <UART_SetConfig+0x750>)
 80065ea:	2100      	movs	r1, #0
 80065ec:	f7f9 fe78 	bl	80002e0 <__aeabi_uldivmod>
 80065f0:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80065f4:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80065f8:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80065fc:	0878      	lsrs	r0, r7, #1
 80065fe:	463a      	mov	r2, r7
 8006600:	2300      	movs	r3, #0
 8006602:	eb18 0600 	adds.w	r6, r8, r0
 8006606:	f149 0700 	adc.w	r7, r9, #0
 800660a:	4630      	mov	r0, r6
 800660c:	4639      	mov	r1, r7
 800660e:	f7f9 fe67 	bl	80002e0 <__aeabi_uldivmod>
          break;
 8006612:	e77c      	b.n	800650e <UART_SetConfig+0x4ee>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006614:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006616:	4b52      	ldr	r3, [pc, #328]	; (8006760 <UART_SetConfig+0x740>)
 8006618:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800661c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006620:	fbb2 f2f3 	udiv	r2, r2, r3
 8006624:	b292      	uxth	r2, r2
 8006626:	2100      	movs	r1, #0
 8006628:	0210      	lsls	r0, r2, #8
 800662a:	087e      	lsrs	r6, r7, #1
 800662c:	463a      	mov	r2, r7
 800662e:	2300      	movs	r3, #0
 8006630:	1980      	adds	r0, r0, r6
 8006632:	f141 0100 	adc.w	r1, r1, #0
 8006636:	f7f9 fe53 	bl	80002e0 <__aeabi_uldivmod>
          break;
 800663a:	e768      	b.n	800650e <UART_SetConfig+0x4ee>
    switch (clocksource)
 800663c:	2e40      	cmp	r6, #64	; 0x40
 800663e:	f200 80ca 	bhi.w	80067d6 <UART_SetConfig+0x7b6>
 8006642:	e8df f006 	tbb	[pc, r6]
 8006646:	3c21      	.short	0x3c21
 8006648:	c84dc8c8 	.word	0xc84dc8c8
 800664c:	c873c8c8 	.word	0xc873c8c8
 8006650:	c8c8c8c8 	.word	0xc8c8c8c8
 8006654:	c8a7c8c8 	.word	0xc8a7c8c8
 8006658:	c8c8c8c8 	.word	0xc8c8c8c8
 800665c:	c8c8c8c8 	.word	0xc8c8c8c8
 8006660:	c8c8c8c8 	.word	0xc8c8c8c8
 8006664:	c8b7c8c8 	.word	0xc8b7c8c8
 8006668:	c8c8c8c8 	.word	0xc8c8c8c8
 800666c:	c8c8c8c8 	.word	0xc8c8c8c8
 8006670:	c8c8c8c8 	.word	0xc8c8c8c8
 8006674:	c8c8c8c8 	.word	0xc8c8c8c8
 8006678:	c8c8c8c8 	.word	0xc8c8c8c8
 800667c:	c8c8c8c8 	.word	0xc8c8c8c8
 8006680:	c8c8c8c8 	.word	0xc8c8c8c8
 8006684:	c8c8      	.short	0xc8c8
 8006686:	60          	.byte	0x60
 8006687:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006688:	f7fe f864 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 800668c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800668e:	4b34      	ldr	r3, [pc, #208]	; (8006760 <UART_SetConfig+0x740>)
 8006690:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006694:	fbb0 f0f3 	udiv	r0, r0, r3
 8006698:	6862      	ldr	r2, [r4, #4]
 800669a:	0853      	lsrs	r3, r2, #1
 800669c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80066a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80066a6:	2500      	movs	r5, #0
    brrtemp = usartdiv & 0xFFF0U;
 80066a8:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80066b0:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	60d3      	str	r3, [r2, #12]
}
 80066b6:	4628      	mov	r0, r5
 80066b8:	b007      	add	sp, #28
 80066ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80066be:	f7fe f85f 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 80066c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066c4:	4b26      	ldr	r3, [pc, #152]	; (8006760 <UART_SetConfig+0x740>)
 80066c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80066ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80066ce:	6862      	ldr	r2, [r4, #4]
 80066d0:	0853      	lsrs	r3, r2, #1
 80066d2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80066d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80066da:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80066dc:	2500      	movs	r5, #0
      break;
 80066de:	e7e3      	b.n	80066a8 <UART_SetConfig+0x688>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e0:	a803      	add	r0, sp, #12
 80066e2:	f7fe febb 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80066e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066e8:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <UART_SetConfig+0x740>)
 80066ea:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80066ee:	9b04      	ldr	r3, [sp, #16]
 80066f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80066f4:	6861      	ldr	r1, [r4, #4]
 80066f6:	084b      	lsrs	r3, r1, #1
 80066f8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80066fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006700:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006702:	2500      	movs	r5, #0
      break;
 8006704:	e7d0      	b.n	80066a8 <UART_SetConfig+0x688>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006706:	4668      	mov	r0, sp
 8006708:	f7fe ff8c 	bl	8005624 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800670c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800670e:	4b14      	ldr	r3, [pc, #80]	; (8006760 <UART_SetConfig+0x740>)
 8006710:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006714:	9b01      	ldr	r3, [sp, #4]
 8006716:	fbb3 f2f2 	udiv	r2, r3, r2
 800671a:	6861      	ldr	r1, [r4, #4]
 800671c:	084b      	lsrs	r3, r1, #1
 800671e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006722:	fbb3 f3f1 	udiv	r3, r3, r1
 8006726:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006728:	2500      	movs	r5, #0
      break;
 800672a:	e7bd      	b.n	80066a8 <UART_SetConfig+0x688>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800672c:	4b0e      	ldr	r3, [pc, #56]	; (8006768 <UART_SetConfig+0x748>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f013 0f20 	tst.w	r3, #32
 8006734:	d01e      	beq.n	8006774 <UART_SetConfig+0x754>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <UART_SetConfig+0x748>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <UART_SetConfig+0x74c>)
 8006740:	40d3      	lsrs	r3, r2
 8006742:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006744:	4a06      	ldr	r2, [pc, #24]	; (8006760 <UART_SetConfig+0x740>)
 8006746:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800674a:	fbb3 f2f2 	udiv	r2, r3, r2
 800674e:	6861      	ldr	r1, [r4, #4]
 8006750:	084b      	lsrs	r3, r1, #1
 8006752:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006756:	fbb3 f3f1 	udiv	r3, r3, r1
 800675a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800675c:	2500      	movs	r5, #0
 800675e:	e7a3      	b.n	80066a8 <UART_SetConfig+0x688>
 8006760:	08008414 	.word	0x08008414
 8006764:	000ffcff 	.word	0x000ffcff
 8006768:	58024400 	.word	0x58024400
 800676c:	03d09000 	.word	0x03d09000
 8006770:	003d0900 	.word	0x003d0900
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006774:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006776:	4b68      	ldr	r3, [pc, #416]	; (8006918 <UART_SetConfig+0x8f8>)
 8006778:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800677c:	4b67      	ldr	r3, [pc, #412]	; (800691c <UART_SetConfig+0x8fc>)
 800677e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006782:	6861      	ldr	r1, [r4, #4]
 8006784:	084b      	lsrs	r3, r1, #1
 8006786:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800678a:	fbb3 f3f1 	udiv	r3, r3, r1
 800678e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006790:	2500      	movs	r5, #0
 8006792:	e789      	b.n	80066a8 <UART_SetConfig+0x688>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006794:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006796:	4b60      	ldr	r3, [pc, #384]	; (8006918 <UART_SetConfig+0x8f8>)
 8006798:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800679c:	4b60      	ldr	r3, [pc, #384]	; (8006920 <UART_SetConfig+0x900>)
 800679e:	fbb3 f2f2 	udiv	r2, r3, r2
 80067a2:	6861      	ldr	r1, [r4, #4]
 80067a4:	084b      	lsrs	r3, r1, #1
 80067a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80067aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80067ae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80067b0:	2500      	movs	r5, #0
      break;
 80067b2:	e779      	b.n	80066a8 <UART_SetConfig+0x688>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80067b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067b6:	4b58      	ldr	r3, [pc, #352]	; (8006918 <UART_SetConfig+0x8f8>)
 80067b8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80067bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80067c4:	6861      	ldr	r1, [r4, #4]
 80067c6:	084b      	lsrs	r3, r1, #1
 80067c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80067cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80067d2:	2500      	movs	r5, #0
      break;
 80067d4:	e768      	b.n	80066a8 <UART_SetConfig+0x688>
        ret = HAL_ERROR;
 80067d6:	2501      	movs	r5, #1
  uint16_t usartdiv                   = 0x0000U;
 80067d8:	2300      	movs	r3, #0
 80067da:	e765      	b.n	80066a8 <UART_SetConfig+0x688>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80067dc:	f7fd ffba 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 80067e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067e2:	4b4d      	ldr	r3, [pc, #308]	; (8006918 <UART_SetConfig+0x8f8>)
 80067e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ec:	6860      	ldr	r0, [r4, #4]
 80067ee:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80067f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80067fa:	2500      	movs	r5, #0
      break;
 80067fc:	e75b      	b.n	80066b6 <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80067fe:	f7fd ffbf 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 8006802:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006804:	4b44      	ldr	r3, [pc, #272]	; (8006918 <UART_SetConfig+0x8f8>)
 8006806:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800680a:	fbb0 f3f3 	udiv	r3, r0, r3
 800680e:	6860      	ldr	r0, [r4, #4]
 8006810:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8006814:	fbb3 f3f0 	udiv	r3, r3, r0
 8006818:	b29b      	uxth	r3, r3
 800681a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800681c:	2500      	movs	r5, #0
      break;
 800681e:	e74a      	b.n	80066b6 <UART_SetConfig+0x696>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006820:	a803      	add	r0, sp, #12
 8006822:	f7fe fe1b 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006826:	6821      	ldr	r1, [r4, #0]
 8006828:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800682a:	4b3b      	ldr	r3, [pc, #236]	; (8006918 <UART_SetConfig+0x8f8>)
 800682c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006830:	9b04      	ldr	r3, [sp, #16]
 8006832:	fbb3 f3f2 	udiv	r3, r3, r2
 8006836:	6862      	ldr	r2, [r4, #4]
 8006838:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800683c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006840:	b29b      	uxth	r3, r3
 8006842:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006844:	2500      	movs	r5, #0
      break;
 8006846:	e736      	b.n	80066b6 <UART_SetConfig+0x696>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006848:	4668      	mov	r0, sp
 800684a:	f7fe feeb 	bl	8005624 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800684e:	6821      	ldr	r1, [r4, #0]
 8006850:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006852:	4b31      	ldr	r3, [pc, #196]	; (8006918 <UART_SetConfig+0x8f8>)
 8006854:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006858:	9b01      	ldr	r3, [sp, #4]
 800685a:	fbb3 f3f2 	udiv	r3, r3, r2
 800685e:	6862      	ldr	r2, [r4, #4]
 8006860:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006864:	fbb3 f3f2 	udiv	r3, r3, r2
 8006868:	b29b      	uxth	r3, r3
 800686a:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800686c:	2500      	movs	r5, #0
      break;
 800686e:	e722      	b.n	80066b6 <UART_SetConfig+0x696>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006870:	4b2c      	ldr	r3, [pc, #176]	; (8006924 <UART_SetConfig+0x904>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f013 0f20 	tst.w	r3, #32
 8006878:	d014      	beq.n	80068a4 <UART_SetConfig+0x884>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800687a:	4b2a      	ldr	r3, [pc, #168]	; (8006924 <UART_SetConfig+0x904>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006882:	4b26      	ldr	r3, [pc, #152]	; (800691c <UART_SetConfig+0x8fc>)
 8006884:	40d3      	lsrs	r3, r2
 8006886:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006888:	4a23      	ldr	r2, [pc, #140]	; (8006918 <UART_SetConfig+0x8f8>)
 800688a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800688e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006892:	6862      	ldr	r2, [r4, #4]
 8006894:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006898:	fbb3 f3f2 	udiv	r3, r3, r2
 800689c:	b29b      	uxth	r3, r3
 800689e:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068a0:	2500      	movs	r5, #0
 80068a2:	e708      	b.n	80066b6 <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80068a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068a6:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <UART_SetConfig+0x8f8>)
 80068a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068ac:	4b1b      	ldr	r3, [pc, #108]	; (800691c <UART_SetConfig+0x8fc>)
 80068ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80068b2:	6862      	ldr	r2, [r4, #4]
 80068b4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80068b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068bc:	b29b      	uxth	r3, r3
 80068be:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068c0:	2500      	movs	r5, #0
 80068c2:	e6f8      	b.n	80066b6 <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80068c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <UART_SetConfig+0x8f8>)
 80068c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068cc:	4b14      	ldr	r3, [pc, #80]	; (8006920 <UART_SetConfig+0x900>)
 80068ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80068d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068dc:	b29b      	uxth	r3, r3
 80068de:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068e0:	2500      	movs	r5, #0
      break;
 80068e2:	e6e8      	b.n	80066b6 <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80068e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068e6:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <UART_SetConfig+0x8f8>)
 80068e8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f4:	6862      	ldr	r2, [r4, #4]
 80068f6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80068fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80068fe:	b29b      	uxth	r3, r3
 8006900:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006902:	2500      	movs	r5, #0
      break;
 8006904:	e6d7      	b.n	80066b6 <UART_SetConfig+0x696>
        ret = HAL_ERROR;
 8006906:	2501      	movs	r5, #1
 8006908:	e6d5      	b.n	80066b6 <UART_SetConfig+0x696>
 800690a:	2501      	movs	r5, #1
 800690c:	e6d3      	b.n	80066b6 <UART_SetConfig+0x696>
          ret = HAL_ERROR;
 800690e:	2501      	movs	r5, #1
 8006910:	e6d1      	b.n	80066b6 <UART_SetConfig+0x696>
        ret = HAL_ERROR;
 8006912:	2501      	movs	r5, #1
 8006914:	e6cf      	b.n	80066b6 <UART_SetConfig+0x696>
 8006916:	bf00      	nop
 8006918:	08008414 	.word	0x08008414
 800691c:	03d09000 	.word	0x03d09000
 8006920:	003d0900 	.word	0x003d0900
 8006924:	58024400 	.word	0x58024400

08006928 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006928:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800692a:	f013 0f01 	tst.w	r3, #1
 800692e:	d006      	beq.n	800693e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006930:	6802      	ldr	r2, [r0, #0]
 8006932:	6853      	ldr	r3, [r2, #4]
 8006934:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006938:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800693a:	430b      	orrs	r3, r1
 800693c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800693e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006940:	f013 0f02 	tst.w	r3, #2
 8006944:	d006      	beq.n	8006954 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006946:	6802      	ldr	r2, [r0, #0]
 8006948:	6853      	ldr	r3, [r2, #4]
 800694a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800694e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006950:	430b      	orrs	r3, r1
 8006952:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006954:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006956:	f013 0f04 	tst.w	r3, #4
 800695a:	d006      	beq.n	800696a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800695c:	6802      	ldr	r2, [r0, #0]
 800695e:	6853      	ldr	r3, [r2, #4]
 8006960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006964:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006966:	430b      	orrs	r3, r1
 8006968:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800696a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800696c:	f013 0f08 	tst.w	r3, #8
 8006970:	d006      	beq.n	8006980 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006972:	6802      	ldr	r2, [r0, #0]
 8006974:	6853      	ldr	r3, [r2, #4]
 8006976:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800697a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800697c:	430b      	orrs	r3, r1
 800697e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006980:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006982:	f013 0f10 	tst.w	r3, #16
 8006986:	d006      	beq.n	8006996 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006988:	6802      	ldr	r2, [r0, #0]
 800698a:	6893      	ldr	r3, [r2, #8]
 800698c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006990:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006992:	430b      	orrs	r3, r1
 8006994:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006996:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006998:	f013 0f20 	tst.w	r3, #32
 800699c:	d006      	beq.n	80069ac <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800699e:	6802      	ldr	r2, [r0, #0]
 80069a0:	6893      	ldr	r3, [r2, #8]
 80069a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069b2:	d00a      	beq.n	80069ca <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069b4:	6802      	ldr	r2, [r0, #0]
 80069b6:	6853      	ldr	r3, [r2, #4]
 80069b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069bc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80069be:	430b      	orrs	r3, r1
 80069c0:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80069c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c8:	d00b      	beq.n	80069e2 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069d0:	d006      	beq.n	80069e0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069d2:	6802      	ldr	r2, [r0, #0]
 80069d4:	6853      	ldr	r3, [r2, #4]
 80069d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80069da:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80069dc:	430b      	orrs	r3, r1
 80069de:	6053      	str	r3, [r2, #4]
 80069e0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069e2:	6802      	ldr	r2, [r0, #0]
 80069e4:	6853      	ldr	r3, [r2, #4]
 80069e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80069ea:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6053      	str	r3, [r2, #4]
 80069f0:	e7eb      	b.n	80069ca <UART_AdvFeatureConfig+0xa2>

080069f2 <UART_WaitOnFlagUntilTimeout>:
{
 80069f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f6:	4605      	mov	r5, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	4616      	mov	r6, r2
 80069fc:	4698      	mov	r8, r3
 80069fe:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	ea37 0303 	bics.w	r3, r7, r3
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	42b3      	cmp	r3, r6
 8006a10:	d11e      	bne.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8006a12:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a16:	d0f3      	beq.n	8006a00 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006a18:	b12c      	cbz	r4, 8006a26 <UART_WaitOnFlagUntilTimeout+0x34>
 8006a1a:	f7fb ff97 	bl	800294c <HAL_GetTick>
 8006a1e:	eba0 0008 	sub.w	r0, r0, r8
 8006a22:	4284      	cmp	r4, r0
 8006a24:	d2ec      	bcs.n	8006a00 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a26:	682a      	ldr	r2, [r5, #0]
 8006a28:	6813      	ldr	r3, [r2, #0]
 8006a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a2e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a30:	682a      	ldr	r2, [r5, #0]
 8006a32:	6893      	ldr	r3, [r2, #8]
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006a3a:	2320      	movs	r3, #32
 8006a3c:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8006a40:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 8006a44:	2300      	movs	r3, #0
 8006a46:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        return HAL_TIMEOUT;
 8006a4a:	2003      	movs	r0, #3
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8006a50:	2000      	movs	r0, #0
}
 8006a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a56 <HAL_UART_Transmit>:
{
 8006a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8006a5e:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d004      	beq.n	8006a72 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8006a68:	2302      	movs	r3, #2
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	b002      	add	sp, #8
 8006a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a72:	4604      	mov	r4, r0
 8006a74:	460d      	mov	r5, r1
 8006a76:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	bf18      	it	ne
 8006a7c:	2900      	cmpne	r1, #0
 8006a7e:	d04c      	beq.n	8006b1a <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8006a80:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_UART_Transmit+0x36>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e7ee      	b.n	8006a6a <HAL_UART_Transmit+0x14>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a96:	2321      	movs	r3, #33	; 0x21
 8006a98:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    tickstart = HAL_GetTick();
 8006a9c:	f7fb ff56 	bl	800294c <HAL_GetTick>
 8006aa0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8006aa2:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
    huart->TxXferCount = Size;
 8006aa6:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 8006aaa:	e003      	b.n	8006ab4 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	782a      	ldrb	r2, [r5, #0]
 8006ab0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ab2:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8006ab4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	b1e3      	cbz	r3, 8006af6 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8006abc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aca:	9600      	str	r6, [sp, #0]
 8006acc:	463b      	mov	r3, r7
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2180      	movs	r1, #128	; 0x80
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7ff ff8d 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 8006ad8:	bb08      	cbnz	r0, 8006b1e <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ada:	68a3      	ldr	r3, [r4, #8]
 8006adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae0:	d1e4      	bne.n	8006aac <HAL_UART_Transmit+0x56>
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e1      	bne.n	8006aac <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8006af4:	e7de      	b.n	8006ab4 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006af6:	9600      	str	r6, [sp, #0]
 8006af8:	463b      	mov	r3, r7
 8006afa:	2200      	movs	r2, #0
 8006afc:	2140      	movs	r1, #64	; 0x40
 8006afe:	4620      	mov	r0, r4
 8006b00:	f7ff ff77 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	b108      	cbz	r0, 8006b0c <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e7ae      	b.n	8006a6a <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
    __HAL_UNLOCK(huart);
 8006b12:	2200      	movs	r2, #0
 8006b14:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
    return HAL_OK;
 8006b18:	e7a7      	b.n	8006a6a <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e7a5      	b.n	8006a6a <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e7a3      	b.n	8006a6a <HAL_UART_Transmit+0x14>

08006b22 <UART_CheckIdleState>:
{
 8006b22:	b530      	push	{r4, r5, lr}
 8006b24:	b083      	sub	sp, #12
 8006b26:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006b2c:	f7fb ff0e 	bl	800294c <HAL_GetTick>
 8006b30:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f013 0f08 	tst.w	r3, #8
 8006b3a:	d10e      	bne.n	8006b5a <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f013 0f04 	tst.w	r3, #4
 8006b44:	d117      	bne.n	8006b76 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8006b46:	2320      	movs	r3, #32
 8006b48:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  huart->RxState = HAL_UART_STATE_READY;
 8006b4c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  __HAL_UNLOCK(huart);
 8006b50:	2000      	movs	r0, #0
 8006b52:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8006b56:	b003      	add	sp, #12
 8006b58:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4603      	mov	r3, r0
 8006b62:	2200      	movs	r2, #0
 8006b64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7ff ff42 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d0e4      	beq.n	8006b3c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8006b72:	2003      	movs	r0, #3
 8006b74:	e7ef      	b.n	8006b56 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7ff ff34 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d0db      	beq.n	8006b46 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8006b8e:	2003      	movs	r0, #3
 8006b90:	e7e1      	b.n	8006b56 <UART_CheckIdleState+0x34>

08006b92 <HAL_UART_Init>:
  if(huart == NULL)
 8006b92:	b378      	cbz	r0, 8006bf4 <HAL_UART_Init+0x62>
{
 8006b94:	b510      	push	{r4, lr}
 8006b96:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8006b98:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8006b9c:	b30b      	cbz	r3, 8006be2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b9e:	2324      	movs	r3, #36	; 0x24
 8006ba0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 8006ba4:	6822      	ldr	r2, [r4, #0]
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7ff fa36 	bl	8006020 <UART_SetConfig>
 8006bb4:	2801      	cmp	r0, #1
 8006bb6:	d01f      	beq.n	8006bf8 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bba:	b9bb      	cbnz	r3, 8006bec <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bbc:	6822      	ldr	r2, [r4, #0]
 8006bbe:	6853      	ldr	r3, [r2, #4]
 8006bc0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006bc4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	6893      	ldr	r3, [r2, #8]
 8006bca:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006bce:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f7ff ffa1 	bl	8006b22 <UART_CheckIdleState>
 8006be0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006be2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8006be6:	f7fb fa13 	bl	8002010 <HAL_UART_MspInit>
 8006bea:	e7d8      	b.n	8006b9e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006bec:	4620      	mov	r0, r4
 8006bee:	f7ff fe9b 	bl	8006928 <UART_AdvFeatureConfig>
 8006bf2:	e7e3      	b.n	8006bbc <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	4770      	bx	lr
}
 8006bf8:	bd10      	pop	{r4, pc}

08006bfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bfa:	4770      	bx	lr

08006bfc <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8006bfc:	2884      	cmp	r0, #132	; 0x84
 8006bfe:	d001      	beq.n	8006c04 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8006c00:	3003      	adds	r0, #3
 8006c02:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c04:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8006c06:	4770      	bx	lr

08006c08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c08:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006c0a:	f000 fef3 	bl	80079f4 <vTaskStartScheduler>
  
  return osOK;
}
 8006c0e:	2000      	movs	r0, #0
 8006c10:	bd08      	pop	{r3, pc}

08006c12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c14:	b085      	sub	sp, #20
 8006c16:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c18:	6844      	ldr	r4, [r0, #4]
 8006c1a:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c1c:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c1e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006c22:	f7ff ffeb 	bl	8006bfc <makeFreeRtosPriority>
 8006c26:	ab03      	add	r3, sp, #12
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	9000      	str	r0, [sp, #0]
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	b2b2      	uxth	r2, r6
 8006c30:	4629      	mov	r1, r5
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 feac 	bl	8007990 <xTaskCreate>
 8006c38:	2801      	cmp	r0, #1
 8006c3a:	d102      	bne.n	8006c42 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c3c:	9803      	ldr	r0, [sp, #12]
}
 8006c3e:	b005      	add	sp, #20
 8006c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8006c42:	2000      	movs	r0, #0
 8006c44:	e7fb      	b.n	8006c3e <osThreadCreate+0x2c>

08006c46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006c46:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006c48:	4603      	mov	r3, r0
 8006c4a:	b900      	cbnz	r0, 8006c4e <osDelay+0x8>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f82c 	bl	8007cac <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c54:	2000      	movs	r0, #0
 8006c56:	bd08      	pop	{r3, pc}

08006c58 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006c58:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	6841      	ldr	r1, [r0, #4]
 8006c5e:	6800      	ldr	r0, [r0, #0]
 8006c60:	f000 fbde 	bl	8007420 <xQueueGenericCreate>
#endif
}
 8006c64:	bd08      	pop	{r3, pc}

08006c66 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006c66:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006c68:	f001 f9a0 	bl	8007fac <xTaskGetSchedulerState>
 8006c6c:	2801      	cmp	r0, #1
 8006c6e:	d001      	beq.n	8006c74 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8006c70:	f000 fa40 	bl	80070f4 <xPortSysTickHandler>
 8006c74:	bd08      	pop	{r3, pc}
	...

08006c78 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c78:	4a12      	ldr	r2, [pc, #72]	; (8006cc4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c7a:	f012 0f07 	tst.w	r2, #7
 8006c7e:	d01e      	beq.n	8006cbe <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c80:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c82:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c86:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8006c8a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c8c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c8e:	480e      	ldr	r0, [pc, #56]	; (8006cc8 <prvHeapInit+0x50>)
 8006c90:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c92:	2100      	movs	r1, #0
 8006c94:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c96:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006c98:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c9a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006c9e:	480b      	ldr	r0, [pc, #44]	; (8006ccc <prvHeapInit+0x54>)
 8006ca0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006ca2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ca4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ca6:	1a99      	subs	r1, r3, r2
 8006ca8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006caa:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cac:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <prvHeapInit+0x58>)
 8006cae:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cb0:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <prvHeapInit+0x5c>)
 8006cb2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cb8:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <prvHeapInit+0x60>)
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cbe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cc2:	e7e4      	b.n	8006c8e <prvHeapInit+0x16>
 8006cc4:	2000012c 	.word	0x2000012c
 8006cc8:	20003d38 	.word	0x20003d38
 8006ccc:	20000128 	.word	0x20000128
 8006cd0:	20003d34 	.word	0x20003d34
 8006cd4:	20003d30 	.word	0x20003d30
 8006cd8:	20003d2c 	.word	0x20003d2c

08006cdc <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cdc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <prvInsertBlockIntoFreeList+0x50>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4282      	cmp	r2, r0
 8006ce4:	d31b      	bcc.n	8006d1e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ce6:	6859      	ldr	r1, [r3, #4]
 8006ce8:	185c      	adds	r4, r3, r1
 8006cea:	42a0      	cmp	r0, r4
 8006cec:	d103      	bne.n	8006cf6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cee:	6840      	ldr	r0, [r0, #4]
 8006cf0:	4401      	add	r1, r0
 8006cf2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cf4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cf6:	6841      	ldr	r1, [r0, #4]
 8006cf8:	1844      	adds	r4, r0, r1
 8006cfa:	42a2      	cmp	r2, r4
 8006cfc:	d113      	bne.n	8006d26 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cfe:	4c0c      	ldr	r4, [pc, #48]	; (8006d30 <prvInsertBlockIntoFreeList+0x54>)
 8006d00:	6824      	ldr	r4, [r4, #0]
 8006d02:	42a2      	cmp	r2, r4
 8006d04:	d00d      	beq.n	8006d22 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d06:	6852      	ldr	r2, [r2, #4]
 8006d08:	4411      	add	r1, r2
 8006d0a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d12:	4298      	cmp	r0, r3
 8006d14:	d000      	beq.n	8006d18 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d16:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d1c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d1e:	4613      	mov	r3, r2
 8006d20:	e7de      	b.n	8006ce0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d22:	6004      	str	r4, [r0, #0]
 8006d24:	e7f5      	b.n	8006d12 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d26:	6002      	str	r2, [r0, #0]
 8006d28:	e7f3      	b.n	8006d12 <prvInsertBlockIntoFreeList+0x36>
 8006d2a:	bf00      	nop
 8006d2c:	20003d38 	.word	0x20003d38
 8006d30:	20000128 	.word	0x20000128

08006d34 <pvPortMalloc>:
{
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006d38:	f000 fe9e 	bl	8007a78 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006d3c:	4b3d      	ldr	r3, [pc, #244]	; (8006e34 <pvPortMalloc+0x100>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	b1cb      	cbz	r3, 8006d76 <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d42:	4b3d      	ldr	r3, [pc, #244]	; (8006e38 <pvPortMalloc+0x104>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	421c      	tst	r4, r3
 8006d48:	d169      	bne.n	8006e1e <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 8006d4a:	b1bc      	cbz	r4, 8006d7c <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8006d4c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d4e:	f014 0f07 	tst.w	r4, #7
 8006d52:	d013      	beq.n	8006d7c <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d54:	f024 0407 	bic.w	r4, r4, #7
 8006d58:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d5a:	f004 0307 	and.w	r3, r4, #7
 8006d5e:	b16b      	cbz	r3, 8006d7c <pvPortMalloc+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	b672      	cpsid	i
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	b662      	cpsie	i
 8006d74:	e7fe      	b.n	8006d74 <pvPortMalloc+0x40>
			prvHeapInit();
 8006d76:	f7ff ff7f 	bl	8006c78 <prvHeapInit>
 8006d7a:	e7e2      	b.n	8006d42 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d7c:	2c00      	cmp	r4, #0
 8006d7e:	d050      	beq.n	8006e22 <pvPortMalloc+0xee>
 8006d80:	4b2e      	ldr	r3, [pc, #184]	; (8006e3c <pvPortMalloc+0x108>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	429c      	cmp	r4, r3
 8006d86:	d84e      	bhi.n	8006e26 <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 8006d88:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <pvPortMalloc+0x10c>)
 8006d8a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d8c:	e001      	b.n	8006d92 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 8006d8e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d90:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d92:	686a      	ldr	r2, [r5, #4]
 8006d94:	4294      	cmp	r4, r2
 8006d96:	d902      	bls.n	8006d9e <pvPortMalloc+0x6a>
 8006d98:	682a      	ldr	r2, [r5, #0]
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	d1f7      	bne.n	8006d8e <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 8006d9e:	4a25      	ldr	r2, [pc, #148]	; (8006e34 <pvPortMalloc+0x100>)
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	4295      	cmp	r5, r2
 8006da4:	d041      	beq.n	8006e2a <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006da6:	681e      	ldr	r6, [r3, #0]
 8006da8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006daa:	682a      	ldr	r2, [r5, #0]
 8006dac:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dae:	686b      	ldr	r3, [r5, #4]
 8006db0:	1b1b      	subs	r3, r3, r4
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d912      	bls.n	8006ddc <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006db6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006db8:	f010 0f07 	tst.w	r0, #7
 8006dbc:	d00a      	beq.n	8006dd4 <pvPortMalloc+0xa0>
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	b672      	cpsid	i
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	b662      	cpsie	i
 8006dd2:	e7fe      	b.n	8006dd2 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dd4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dd6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dd8:	f7ff ff80 	bl	8006cdc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ddc:	686a      	ldr	r2, [r5, #4]
 8006dde:	4917      	ldr	r1, [pc, #92]	; (8006e3c <pvPortMalloc+0x108>)
 8006de0:	680b      	ldr	r3, [r1, #0]
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006de6:	4917      	ldr	r1, [pc, #92]	; (8006e44 <pvPortMalloc+0x110>)
 8006de8:	6809      	ldr	r1, [r1, #0]
 8006dea:	428b      	cmp	r3, r1
 8006dec:	d201      	bcs.n	8006df2 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dee:	4915      	ldr	r1, [pc, #84]	; (8006e44 <pvPortMalloc+0x110>)
 8006df0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <pvPortMalloc+0x104>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006dfe:	f000 fed5 	bl	8007bac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e02:	f016 0f07 	tst.w	r6, #7
 8006e06:	d012      	beq.n	8006e2e <pvPortMalloc+0xfa>
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	b672      	cpsid	i
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	b662      	cpsie	i
 8006e1c:	e7fe      	b.n	8006e1c <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8006e1e:	2600      	movs	r6, #0
 8006e20:	e7ed      	b.n	8006dfe <pvPortMalloc+0xca>
 8006e22:	2600      	movs	r6, #0
 8006e24:	e7eb      	b.n	8006dfe <pvPortMalloc+0xca>
 8006e26:	2600      	movs	r6, #0
 8006e28:	e7e9      	b.n	8006dfe <pvPortMalloc+0xca>
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	e7e7      	b.n	8006dfe <pvPortMalloc+0xca>
}
 8006e2e:	4630      	mov	r0, r6
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	bf00      	nop
 8006e34:	20000128 	.word	0x20000128
 8006e38:	20003d2c 	.word	0x20003d2c
 8006e3c:	20003d30 	.word	0x20003d30
 8006e40:	20003d38 	.word	0x20003d38
 8006e44:	20003d34 	.word	0x20003d34

08006e48 <vPortFree>:
	if( pv != NULL )
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d034      	beq.n	8006eb6 <vPortFree+0x6e>
{
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006e50:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e54:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006e58:	4917      	ldr	r1, [pc, #92]	; (8006eb8 <vPortFree+0x70>)
 8006e5a:	6809      	ldr	r1, [r1, #0]
 8006e5c:	420a      	tst	r2, r1
 8006e5e:	d10a      	bne.n	8006e76 <vPortFree+0x2e>
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	b672      	cpsid	i
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	b662      	cpsie	i
 8006e74:	e7fe      	b.n	8006e74 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e76:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8006e7a:	b150      	cbz	r0, 8006e92 <vPortFree+0x4a>
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	b672      	cpsid	i
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	b662      	cpsie	i
 8006e90:	e7fe      	b.n	8006e90 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e92:	ea22 0201 	bic.w	r2, r2, r1
 8006e96:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8006e9a:	f000 fded 	bl	8007a78 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e9e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006ea2:	4a06      	ldr	r2, [pc, #24]	; (8006ebc <vPortFree+0x74>)
 8006ea4:	6813      	ldr	r3, [r2, #0]
 8006ea6:	440b      	add	r3, r1
 8006ea8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f7ff ff16 	bl	8006cdc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006eb0:	f000 fe7c 	bl	8007bac <xTaskResumeAll>
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
 8006eb6:	4770      	bx	lr
 8006eb8:	20003d2c 	.word	0x20003d2c
 8006ebc:	20003d30 	.word	0x20003d30

08006ec0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ec0:	f100 0308 	add.w	r3, r0, #8
 8006ec4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eca:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ecc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ece:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6003      	str	r3, [r0, #0]
 8006ed4:	4770      	bx	lr

08006ed6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6103      	str	r3, [r0, #16]
 8006eda:	4770      	bx	lr

08006edc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006edc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ede:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ee8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006eea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006eec:	6803      	ldr	r3, [r0, #0]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	4770      	bx	lr

08006ef4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ef4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ef6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ef8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006efc:	d002      	beq.n	8006f04 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006efe:	f100 0208 	add.w	r2, r0, #8
 8006f02:	e002      	b.n	8006f0a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f04:	6902      	ldr	r2, [r0, #16]
 8006f06:	e004      	b.n	8006f12 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6853      	ldr	r3, [r2, #4]
 8006f0c:	681c      	ldr	r4, [r3, #0]
 8006f0e:	42a5      	cmp	r5, r4
 8006f10:	d2fa      	bcs.n	8006f08 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f12:	6853      	ldr	r3, [r2, #4]
 8006f14:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f16:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f18:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f1a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f1c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006f1e:	6803      	ldr	r3, [r0, #0]
 8006f20:	3301      	adds	r3, #1
 8006f22:	6003      	str	r3, [r0, #0]
}
 8006f24:	bc30      	pop	{r4, r5}
 8006f26:	4770      	bx	lr

08006f28 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006f28:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f2a:	6842      	ldr	r2, [r0, #4]
 8006f2c:	6881      	ldr	r1, [r0, #8]
 8006f2e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f30:	6882      	ldr	r2, [r0, #8]
 8006f32:	6841      	ldr	r1, [r0, #4]
 8006f34:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	4290      	cmp	r0, r2
 8006f3a:	d005      	beq.n	8006f48 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	3801      	subs	r0, #1
 8006f44:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8006f46:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f48:	6882      	ldr	r2, [r0, #8]
 8006f4a:	605a      	str	r2, [r3, #4]
 8006f4c:	e7f6      	b.n	8006f3c <uxListRemove+0x14>
	...

08006f50 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f50:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <prvTaskExitError+0x38>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d00a      	beq.n	8006f70 <prvTaskExitError+0x20>
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	b672      	cpsid	i
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	b662      	cpsie	i
 8006f6e:	e7fe      	b.n	8006f6e <prvTaskExitError+0x1e>
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	b672      	cpsid	i
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	b662      	cpsie	i
 8006f84:	e7fe      	b.n	8006f84 <prvTaskExitError+0x34>
 8006f86:	bf00      	nop
 8006f88:	2000009c 	.word	0x2000009c

08006f8c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f8c:	4806      	ldr	r0, [pc, #24]	; (8006fa8 <prvPortStartFirstTask+0x1c>)
 8006f8e:	6800      	ldr	r0, [r0, #0]
 8006f90:	6800      	ldr	r0, [r0, #0]
 8006f92:	f380 8808 	msr	MSP, r0
 8006f96:	b662      	cpsie	i
 8006f98:	b661      	cpsie	f
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	df00      	svc	0
 8006fa4:	bf00      	nop
 8006fa6:	0000      	.short	0x0000
 8006fa8:	e000ed08 	.word	0xe000ed08

08006fac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fbc <vPortEnableVFP+0x10>
 8006fb0:	6801      	ldr	r1, [r0, #0]
 8006fb2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fb6:	6001      	str	r1, [r0, #0]
 8006fb8:	4770      	bx	lr
 8006fba:	0000      	.short	0x0000
 8006fbc:	e000ed88 	.word	0xe000ed88

08006fc0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fc4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fc8:	f021 0101 	bic.w	r1, r1, #1
 8006fcc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <pxPortInitialiseStack+0x28>)
 8006fd2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fd6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006fda:	f06f 0302 	mvn.w	r3, #2
 8006fde:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006fe2:	3844      	subs	r0, #68	; 0x44
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	08006f51 	.word	0x08006f51
 8006fec:	00000000 	.word	0x00000000

08006ff0 <SVC_Handler>:
	__asm volatile (
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <pxCurrentTCBConst2>)
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	f380 8809 	msr	PSP, r0
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8811 	msr	BASEPRI, r0
 800700a:	4770      	bx	lr
 800700c:	f3af 8000 	nop.w

08007010 <pxCurrentTCBConst2>:
 8007010:	20003d48 	.word	0x20003d48

08007014 <vPortEnterCritical>:
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	b672      	cpsid	i
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	b662      	cpsie	i
	uxCriticalNesting++;
 8007028:	4a0b      	ldr	r2, [pc, #44]	; (8007058 <vPortEnterCritical+0x44>)
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	3301      	adds	r3, #1
 800702e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007030:	2b01      	cmp	r3, #1
 8007032:	d10f      	bne.n	8007054 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007034:	4b09      	ldr	r3, [pc, #36]	; (800705c <vPortEnterCritical+0x48>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f013 0fff 	tst.w	r3, #255	; 0xff
 800703c:	d00a      	beq.n	8007054 <vPortEnterCritical+0x40>
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	b672      	cpsid	i
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	b662      	cpsie	i
 8007052:	e7fe      	b.n	8007052 <vPortEnterCritical+0x3e>
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	2000009c 	.word	0x2000009c
 800705c:	e000ed04 	.word	0xe000ed04

08007060 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <vPortExitCritical+0x2c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	b953      	cbnz	r3, 800707c <vPortExitCritical+0x1c>
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	b672      	cpsid	i
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	b662      	cpsie	i
 800707a:	e7fe      	b.n	800707a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800707c:	3b01      	subs	r3, #1
 800707e:	4a03      	ldr	r2, [pc, #12]	; (800708c <vPortExitCritical+0x2c>)
 8007080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007082:	b90b      	cbnz	r3, 8007088 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	2000009c 	.word	0x2000009c

08007090 <PendSV_Handler>:
	__asm volatile
 8007090:	f3ef 8009 	mrs	r0, PSP
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <pxCurrentTCBConst>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	f01e 0f10 	tst.w	lr, #16
 80070a0:	bf08      	it	eq
 80070a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	6010      	str	r0, [r2, #0]
 80070ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80070b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070b4:	b672      	cpsid	i
 80070b6:	f380 8811 	msr	BASEPRI, r0
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	b662      	cpsie	i
 80070c4:	f000 fe5e 	bl	8007d84 <vTaskSwitchContext>
 80070c8:	f04f 0000 	mov.w	r0, #0
 80070cc:	f380 8811 	msr	BASEPRI, r0
 80070d0:	bc08      	pop	{r3}
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	f01e 0f10 	tst.w	lr, #16
 80070de:	bf08      	it	eq
 80070e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070e4:	f380 8809 	msr	PSP, r0
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop

080070f0 <pxCurrentTCBConst>:
 80070f0:	20003d48 	.word	0x20003d48

080070f4 <xPortSysTickHandler>:
{
 80070f4:	b508      	push	{r3, lr}
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	b672      	cpsid	i
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800710a:	f000 fcbd 	bl	8007a88 <xTaskIncrementTick>
 800710e:	b118      	cbz	r0, 8007118 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007114:	4b02      	ldr	r3, [pc, #8]	; (8007120 <xPortSysTickHandler+0x2c>)
 8007116:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007118:	2300      	movs	r3, #0
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	bd08      	pop	{r3, pc}
 8007120:	e000ed04 	.word	0xe000ed04

08007124 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <vPortSetupTimerInterrupt+0x1c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a06      	ldr	r2, [pc, #24]	; (8007144 <vPortSetupTimerInterrupt+0x20>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	099b      	lsrs	r3, r3, #6
 8007130:	3b01      	subs	r3, #1
 8007132:	4a05      	ldr	r2, [pc, #20]	; (8007148 <vPortSetupTimerInterrupt+0x24>)
 8007134:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007136:	2207      	movs	r2, #7
 8007138:	4b04      	ldr	r3, [pc, #16]	; (800714c <vPortSetupTimerInterrupt+0x28>)
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000090 	.word	0x20000090
 8007144:	10624dd3 	.word	0x10624dd3
 8007148:	e000e014 	.word	0xe000e014
 800714c:	e000e010 	.word	0xe000e010

08007150 <xPortStartScheduler>:
{
 8007150:	b500      	push	{lr}
 8007152:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007154:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <xPortStartScheduler+0x90>)
 8007156:	781a      	ldrb	r2, [r3, #0]
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800715c:	22ff      	movs	r2, #255	; 0xff
 800715e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007168:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800716c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007170:	4a1c      	ldr	r2, [pc, #112]	; (80071e4 <xPortStartScheduler+0x94>)
 8007172:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007174:	2207      	movs	r2, #7
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <xPortStartScheduler+0x98>)
 8007178:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800717a:	e009      	b.n	8007190 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800717c:	4a1a      	ldr	r2, [pc, #104]	; (80071e8 <xPortStartScheduler+0x98>)
 800717e:	6813      	ldr	r3, [r2, #0]
 8007180:	3b01      	subs	r3, #1
 8007182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007184:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007190:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007194:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007198:	d1f0      	bne.n	800717c <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800719a:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <xPortStartScheduler+0x98>)
 800719c:	6813      	ldr	r3, [r2, #0]
 800719e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071a4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	4a0d      	ldr	r2, [pc, #52]	; (80071e0 <xPortStartScheduler+0x90>)
 80071ac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <xPortStartScheduler+0x9c>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80071b6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80071be:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80071c0:	f7ff ffb0 	bl	8007124 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80071c4:	2200      	movs	r2, #0
 80071c6:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <xPortStartScheduler+0xa0>)
 80071c8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80071ca:	f7ff feef 	bl	8006fac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <xPortStartScheduler+0xa4>)
 80071d0:	6813      	ldr	r3, [r2, #0]
 80071d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071d6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80071d8:	f7ff fed8 	bl	8006f8c <prvPortStartFirstTask>
	prvTaskExitError();
 80071dc:	f7ff feb8 	bl	8006f50 <prvTaskExitError>
 80071e0:	e000e400 	.word	0xe000e400
 80071e4:	20003d40 	.word	0x20003d40
 80071e8:	20003d44 	.word	0x20003d44
 80071ec:	e000ed20 	.word	0xe000ed20
 80071f0:	2000009c 	.word	0x2000009c
 80071f4:	e000ef34 	.word	0xe000ef34

080071f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80071f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071fc:	2b0f      	cmp	r3, #15
 80071fe:	d911      	bls.n	8007224 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007200:	4a12      	ldr	r2, [pc, #72]	; (800724c <vPortValidateInterruptPriority+0x54>)
 8007202:	5c9b      	ldrb	r3, [r3, r2]
 8007204:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007206:	4a12      	ldr	r2, [pc, #72]	; (8007250 <vPortValidateInterruptPriority+0x58>)
 8007208:	7812      	ldrb	r2, [r2, #0]
 800720a:	4293      	cmp	r3, r2
 800720c:	d20a      	bcs.n	8007224 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	b672      	cpsid	i
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	b662      	cpsie	i
 8007222:	e7fe      	b.n	8007222 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007224:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <vPortValidateInterruptPriority+0x5c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800722c:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <vPortValidateInterruptPriority+0x60>)
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	4293      	cmp	r3, r2
 8007232:	d90a      	bls.n	800724a <vPortValidateInterruptPriority+0x52>
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	b672      	cpsid	i
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	b662      	cpsie	i
 8007248:	e7fe      	b.n	8007248 <vPortValidateInterruptPriority+0x50>
 800724a:	4770      	bx	lr
 800724c:	e000e3f0 	.word	0xe000e3f0
 8007250:	20003d40 	.word	0x20003d40
 8007254:	e000ed0c 	.word	0xe000ed0c
 8007258:	20003d44 	.word	0x20003d44

0800725c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800725c:	b510      	push	{r4, lr}
 800725e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007260:	f7ff fed8 	bl	8007014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007266:	b123      	cbz	r3, 8007272 <prvIsQueueEmpty+0x16>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8007268:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800726a:	f7ff fef9 	bl	8007060 <vPortExitCritical>

	return xReturn;
}
 800726e:	4620      	mov	r0, r4
 8007270:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007272:	2401      	movs	r4, #1
 8007274:	e7f9      	b.n	800726a <prvIsQueueEmpty+0xe>

08007276 <prvCopyDataToQueue>:
{
 8007276:	b570      	push	{r4, r5, r6, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800727c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800727e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007280:	b94a      	cbnz	r2, 8007296 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007282:	6803      	ldr	r3, [r0, #0]
 8007284:	bb53      	cbnz	r3, 80072dc <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007286:	6840      	ldr	r0, [r0, #4]
 8007288:	f000 fef2 	bl	8008070 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800728c:	2300      	movs	r3, #0
 800728e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8007290:	3501      	adds	r5, #1
 8007292:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8007294:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007296:	b96e      	cbnz	r6, 80072b4 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007298:	6880      	ldr	r0, [r0, #8]
 800729a:	f000 ff79 	bl	8008190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800729e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072a0:	68a3      	ldr	r3, [r4, #8]
 80072a2:	4413      	add	r3, r2
 80072a4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072a6:	6862      	ldr	r2, [r4, #4]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d319      	bcc.n	80072e0 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80072b0:	2000      	movs	r0, #0
 80072b2:	e7ed      	b.n	8007290 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b4:	68c0      	ldr	r0, [r0, #12]
 80072b6:	f000 ff6b 	bl	8008190 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80072ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072bc:	425b      	negs	r3, r3
 80072be:	68e2      	ldr	r2, [r4, #12]
 80072c0:	441a      	add	r2, r3
 80072c2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072c4:	6821      	ldr	r1, [r4, #0]
 80072c6:	428a      	cmp	r2, r1
 80072c8:	d202      	bcs.n	80072d0 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80072d0:	2e02      	cmp	r6, #2
 80072d2:	d107      	bne.n	80072e4 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072d4:	b145      	cbz	r5, 80072e8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80072d6:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80072d8:	2000      	movs	r0, #0
 80072da:	e7d9      	b.n	8007290 <prvCopyDataToQueue+0x1a>
 80072dc:	2000      	movs	r0, #0
 80072de:	e7d7      	b.n	8007290 <prvCopyDataToQueue+0x1a>
 80072e0:	2000      	movs	r0, #0
 80072e2:	e7d5      	b.n	8007290 <prvCopyDataToQueue+0x1a>
 80072e4:	2000      	movs	r0, #0
 80072e6:	e7d3      	b.n	8007290 <prvCopyDataToQueue+0x1a>
 80072e8:	2000      	movs	r0, #0
 80072ea:	e7d1      	b.n	8007290 <prvCopyDataToQueue+0x1a>

080072ec <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80072ee:	b172      	cbz	r2, 800730e <prvCopyDataFromQueue+0x22>
{
 80072f0:	b510      	push	{r4, lr}
 80072f2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80072f4:	68c4      	ldr	r4, [r0, #12]
 80072f6:	4414      	add	r4, r2
 80072f8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072fa:	6840      	ldr	r0, [r0, #4]
 80072fc:	4284      	cmp	r4, r0
 80072fe:	d301      	bcc.n	8007304 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	60d8      	str	r0, [r3, #12]
 8007304:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007306:	68d9      	ldr	r1, [r3, #12]
 8007308:	f000 ff42 	bl	8008190 <memcpy>
 800730c:	bd10      	pop	{r4, pc}
 800730e:	4770      	bx	lr

08007310 <prvUnlockQueue>:
{
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007314:	f7ff fe7e 	bl	8007014 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007318:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800731c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800731e:	e001      	b.n	8007324 <prvUnlockQueue+0x14>
			--cTxLock;
 8007320:	3c01      	subs	r4, #1
 8007322:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007324:	2c00      	cmp	r4, #0
 8007326:	dd0a      	ble.n	800733e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007328:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800732a:	b143      	cbz	r3, 800733e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800732c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007330:	f000 fd92 	bl	8007e58 <xTaskRemoveFromEventList>
 8007334:	2800      	cmp	r0, #0
 8007336:	d0f3      	beq.n	8007320 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8007338:	f000 fe32 	bl	8007fa0 <vTaskMissedYield>
 800733c:	e7f0      	b.n	8007320 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800733e:	23ff      	movs	r3, #255	; 0xff
 8007340:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007344:	f7ff fe8c 	bl	8007060 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007348:	f7ff fe64 	bl	8007014 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800734c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007350:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007352:	e001      	b.n	8007358 <prvUnlockQueue+0x48>
				--cRxLock;
 8007354:	3c01      	subs	r4, #1
 8007356:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007358:	2c00      	cmp	r4, #0
 800735a:	dd0a      	ble.n	8007372 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800735c:	692b      	ldr	r3, [r5, #16]
 800735e:	b143      	cbz	r3, 8007372 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007360:	f105 0010 	add.w	r0, r5, #16
 8007364:	f000 fd78 	bl	8007e58 <xTaskRemoveFromEventList>
 8007368:	2800      	cmp	r0, #0
 800736a:	d0f3      	beq.n	8007354 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800736c:	f000 fe18 	bl	8007fa0 <vTaskMissedYield>
 8007370:	e7f0      	b.n	8007354 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8007372:	23ff      	movs	r3, #255	; 0xff
 8007374:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007378:	f7ff fe72 	bl	8007060 <vPortExitCritical>
 800737c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007380 <xQueueGenericReset>:
{
 8007380:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8007382:	b330      	cbz	r0, 80073d2 <xQueueGenericReset+0x52>
 8007384:	4604      	mov	r4, r0
 8007386:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007388:	f7ff fe44 	bl	8007014 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800738c:	6821      	ldr	r1, [r4, #0]
 800738e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007392:	fb03 1002 	mla	r0, r3, r2, r1
 8007396:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007398:	2000      	movs	r0, #0
 800739a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800739c:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800739e:	3a01      	subs	r2, #1
 80073a0:	fb02 1303 	mla	r3, r2, r3, r1
 80073a4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073a6:	23ff      	movs	r3, #255	; 0xff
 80073a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80073b0:	b9d5      	cbnz	r5, 80073e8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b2:	6923      	ldr	r3, [r4, #16]
 80073b4:	b303      	cbz	r3, 80073f8 <xQueueGenericReset+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073b6:	f104 0010 	add.w	r0, r4, #16
 80073ba:	f000 fd4d 	bl	8007e58 <xTaskRemoveFromEventList>
 80073be:	b1d8      	cbz	r0, 80073f8 <xQueueGenericReset+0x78>
					queueYIELD_IF_USING_PREEMPTION();
 80073c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c4:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <xQueueGenericReset+0x80>)
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	e012      	b.n	80073f8 <xQueueGenericReset+0x78>
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	b672      	cpsid	i
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	b662      	cpsie	i
 80073e6:	e7fe      	b.n	80073e6 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073e8:	f104 0010 	add.w	r0, r4, #16
 80073ec:	f7ff fd68 	bl	8006ec0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80073f4:	f7ff fd64 	bl	8006ec0 <vListInitialise>
	taskEXIT_CRITICAL();
 80073f8:	f7ff fe32 	bl	8007060 <vPortExitCritical>
}
 80073fc:	2001      	movs	r0, #1
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	e000ed04 	.word	0xe000ed04

08007404 <prvInitialiseNewQueue>:
{
 8007404:	b510      	push	{r4, lr}
 8007406:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007408:	460c      	mov	r4, r1
 800740a:	b139      	cbz	r1, 800741c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800740c:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800740e:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007410:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007412:	2101      	movs	r1, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff ffb3 	bl	8007380 <xQueueGenericReset>
 800741a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800741c:	601b      	str	r3, [r3, #0]
 800741e:	e7f6      	b.n	800740e <prvInitialiseNewQueue+0xa>

08007420 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007420:	b950      	cbnz	r0, 8007438 <xQueueGenericCreate+0x18>
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	b672      	cpsid	i
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	b662      	cpsie	i
 8007436:	e7fe      	b.n	8007436 <xQueueGenericCreate+0x16>
	{
 8007438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743a:	b083      	sub	sp, #12
 800743c:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800743e:	b111      	cbz	r1, 8007446 <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007440:	fb01 f000 	mul.w	r0, r1, r0
 8007444:	e000      	b.n	8007448 <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 8007446:	2000      	movs	r0, #0
 8007448:	4617      	mov	r7, r2
 800744a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800744c:	3048      	adds	r0, #72	; 0x48
 800744e:	f7ff fc71 	bl	8006d34 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007452:	4606      	mov	r6, r0
 8007454:	b138      	cbz	r0, 8007466 <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007456:	9000      	str	r0, [sp, #0]
 8007458:	463b      	mov	r3, r7
 800745a:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800745e:	4621      	mov	r1, r4
 8007460:	4628      	mov	r0, r5
 8007462:	f7ff ffcf 	bl	8007404 <prvInitialiseNewQueue>
	}
 8007466:	4630      	mov	r0, r6
 8007468:	b003      	add	sp, #12
 800746a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800746c <xQueueGenericSendFromISR>:
{
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007470:	b170      	cbz	r0, 8007490 <xQueueGenericSendFromISR+0x24>
 8007472:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007474:	b1b9      	cbz	r1, 80074a6 <xQueueGenericSendFromISR+0x3a>
 8007476:	2001      	movs	r0, #1
 8007478:	b9d8      	cbnz	r0, 80074b2 <xQueueGenericSendFromISR+0x46>
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	b672      	cpsid	i
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	b662      	cpsie	i
 800748e:	e7fe      	b.n	800748e <xQueueGenericSendFromISR+0x22>
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	b672      	cpsid	i
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	b662      	cpsie	i
 80074a4:	e7fe      	b.n	80074a4 <xQueueGenericSendFromISR+0x38>
 80074a6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80074a8:	b908      	cbnz	r0, 80074ae <xQueueGenericSendFromISR+0x42>
 80074aa:	2001      	movs	r0, #1
 80074ac:	e7e4      	b.n	8007478 <xQueueGenericSendFromISR+0xc>
 80074ae:	2000      	movs	r0, #0
 80074b0:	e7e2      	b.n	8007478 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d00b      	beq.n	80074ce <xQueueGenericSendFromISR+0x62>
 80074b6:	b978      	cbnz	r0, 80074d8 <xQueueGenericSendFromISR+0x6c>
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	b672      	cpsid	i
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	b662      	cpsie	i
 80074cc:	e7fe      	b.n	80074cc <xQueueGenericSendFromISR+0x60>
 80074ce:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80074d0:	2d01      	cmp	r5, #1
 80074d2:	d0f0      	beq.n	80074b6 <xQueueGenericSendFromISR+0x4a>
 80074d4:	2000      	movs	r0, #0
 80074d6:	e7ee      	b.n	80074b6 <xQueueGenericSendFromISR+0x4a>
 80074d8:	461f      	mov	r7, r3
 80074da:	4690      	mov	r8, r2
 80074dc:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074de:	f7ff fe8b 	bl	80071f8 <vPortValidateInterruptPriority>
	__asm volatile
 80074e2:	f3ef 8611 	mrs	r6, BASEPRI
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	b672      	cpsid	i
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80074fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d301      	bcc.n	8007506 <xQueueGenericSendFromISR+0x9a>
 8007502:	2f02      	cmp	r7, #2
 8007504:	d121      	bne.n	800754a <xQueueGenericSendFromISR+0xde>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007506:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800750a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800750c:	463a      	mov	r2, r7
 800750e:	4649      	mov	r1, r9
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff feb0 	bl	8007276 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007516:	f1b5 3fff 	cmp.w	r5, #4294967295
 800751a:	d110      	bne.n	800753e <xQueueGenericSendFromISR+0xd2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800751c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751e:	b1b3      	cbz	r3, 800754e <xQueueGenericSendFromISR+0xe2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007520:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007524:	f000 fc98 	bl	8007e58 <xTaskRemoveFromEventList>
 8007528:	b198      	cbz	r0, 8007552 <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 800752a:	f1b8 0f00 	cmp.w	r8, #0
 800752e:	d012      	beq.n	8007556 <xQueueGenericSendFromISR+0xea>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007530:	2001      	movs	r0, #1
 8007532:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007536:	f386 8811 	msr	BASEPRI, r6
}
 800753a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800753e:	1c6b      	adds	r3, r5, #1
 8007540:	b25b      	sxtb	r3, r3
 8007542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007546:	2001      	movs	r0, #1
 8007548:	e7f5      	b.n	8007536 <xQueueGenericSendFromISR+0xca>
			xReturn = errQUEUE_FULL;
 800754a:	2000      	movs	r0, #0
 800754c:	e7f3      	b.n	8007536 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 800754e:	2001      	movs	r0, #1
 8007550:	e7f1      	b.n	8007536 <xQueueGenericSendFromISR+0xca>
 8007552:	2001      	movs	r0, #1
 8007554:	e7ef      	b.n	8007536 <xQueueGenericSendFromISR+0xca>
 8007556:	2001      	movs	r0, #1
 8007558:	e7ed      	b.n	8007536 <xQueueGenericSendFromISR+0xca>
	...

0800755c <xQueueGenericReceive>:
{
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007564:	b170      	cbz	r0, 8007584 <xQueueGenericReceive+0x28>
 8007566:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007568:	b1b9      	cbz	r1, 800759a <xQueueGenericReceive+0x3e>
 800756a:	2501      	movs	r5, #1
 800756c:	b9dd      	cbnz	r5, 80075a6 <xQueueGenericReceive+0x4a>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	b672      	cpsid	i
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	b662      	cpsie	i
 8007582:	e7fe      	b.n	8007582 <xQueueGenericReceive+0x26>
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	e7fe      	b.n	8007598 <xQueueGenericReceive+0x3c>
 800759a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800759c:	b90a      	cbnz	r2, 80075a2 <xQueueGenericReceive+0x46>
 800759e:	2501      	movs	r5, #1
 80075a0:	e7e4      	b.n	800756c <xQueueGenericReceive+0x10>
 80075a2:	2500      	movs	r5, #0
 80075a4:	e7e2      	b.n	800756c <xQueueGenericReceive+0x10>
 80075a6:	461f      	mov	r7, r3
 80075a8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075aa:	f000 fcff 	bl	8007fac <xTaskGetSchedulerState>
 80075ae:	b910      	cbnz	r0, 80075b6 <xQueueGenericReceive+0x5a>
 80075b0:	9b01      	ldr	r3, [sp, #4]
 80075b2:	b103      	cbz	r3, 80075b6 <xQueueGenericReceive+0x5a>
 80075b4:	2500      	movs	r5, #0
 80075b6:	b955      	cbnz	r5, 80075ce <xQueueGenericReceive+0x72>
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	b672      	cpsid	i
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	b662      	cpsie	i
 80075cc:	e7fe      	b.n	80075cc <xQueueGenericReceive+0x70>
 80075ce:	2600      	movs	r6, #0
 80075d0:	e05d      	b.n	800768e <xQueueGenericReceive+0x132>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80075d2:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075d4:	4641      	mov	r1, r8
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff fe88 	bl	80072ec <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80075dc:	b9df      	cbnz	r7, 8007616 <xQueueGenericReceive+0xba>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80075de:	3d01      	subs	r5, #1
 80075e0:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	b913      	cbnz	r3, 80075ec <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80075e6:	f000 fda1 	bl	800812c <pvTaskIncrementMutexHeldCount>
 80075ea:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	b163      	cbz	r3, 800760a <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075f0:	f104 0010 	add.w	r0, r4, #16
 80075f4:	f000 fc30 	bl	8007e58 <xTaskRemoveFromEventList>
 80075f8:	b138      	cbz	r0, 800760a <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 80075fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fe:	4b45      	ldr	r3, [pc, #276]	; (8007714 <xQueueGenericReceive+0x1b8>)
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800760a:	f7ff fd29 	bl	8007060 <vPortExitCritical>
				return pdPASS;
 800760e:	2001      	movs	r0, #1
}
 8007610:	b004      	add	sp, #16
 8007612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007616:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f5      	beq.n	800760a <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800761e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007622:	f000 fc19 	bl	8007e58 <xTaskRemoveFromEventList>
 8007626:	2800      	cmp	r0, #0
 8007628:	d0ef      	beq.n	800760a <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 800762a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762e:	4b39      	ldr	r3, [pc, #228]	; (8007714 <xQueueGenericReceive+0x1b8>)
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	e7e6      	b.n	800760a <xQueueGenericReceive+0xae>
					taskEXIT_CRITICAL();
 800763c:	f7ff fd10 	bl	8007060 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007640:	2000      	movs	r0, #0
 8007642:	e7e5      	b.n	8007610 <xQueueGenericReceive+0xb4>
					vTaskSetTimeOutState( &xTimeOut );
 8007644:	a802      	add	r0, sp, #8
 8007646:	f000 fc4f 	bl	8007ee8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800764a:	2601      	movs	r6, #1
 800764c:	e029      	b.n	80076a2 <xQueueGenericReceive+0x146>
		prvLockQueue( pxQueue );
 800764e:	2300      	movs	r3, #0
 8007650:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007654:	e031      	b.n	80076ba <xQueueGenericReceive+0x15e>
 8007656:	2300      	movs	r3, #0
 8007658:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800765c:	e033      	b.n	80076c6 <xQueueGenericReceive+0x16a>
						taskENTER_CRITICAL();
 800765e:	f7ff fcd9 	bl	8007014 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007662:	6860      	ldr	r0, [r4, #4]
 8007664:	f000 fcb2 	bl	8007fcc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8007668:	f7ff fcfa 	bl	8007060 <vPortExitCritical>
 800766c:	e03b      	b.n	80076e6 <xQueueGenericReceive+0x18a>
				prvUnlockQueue( pxQueue );
 800766e:	4620      	mov	r0, r4
 8007670:	f7ff fe4e 	bl	8007310 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007674:	f000 fa9a 	bl	8007bac <xTaskResumeAll>
 8007678:	e009      	b.n	800768e <xQueueGenericReceive+0x132>
			prvUnlockQueue( pxQueue );
 800767a:	4620      	mov	r0, r4
 800767c:	f7ff fe48 	bl	8007310 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007680:	f000 fa94 	bl	8007bac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007684:	4620      	mov	r0, r4
 8007686:	f7ff fde9 	bl	800725c <prvIsQueueEmpty>
 800768a:	2800      	cmp	r0, #0
 800768c:	d140      	bne.n	8007710 <xQueueGenericReceive+0x1b4>
		taskENTER_CRITICAL();
 800768e:	f7ff fcc1 	bl	8007014 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007692:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007694:	2d00      	cmp	r5, #0
 8007696:	d19c      	bne.n	80075d2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0ce      	beq.n	800763c <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 800769e:	2e00      	cmp	r6, #0
 80076a0:	d0d0      	beq.n	8007644 <xQueueGenericReceive+0xe8>
		taskEXIT_CRITICAL();
 80076a2:	f7ff fcdd 	bl	8007060 <vPortExitCritical>
		vTaskSuspendAll();
 80076a6:	f000 f9e7 	bl	8007a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076aa:	f7ff fcb3 	bl	8007014 <vPortEnterCritical>
 80076ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d0c9      	beq.n	800764e <xQueueGenericReceive+0xf2>
 80076ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80076be:	b25b      	sxtb	r3, r3
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d0c7      	beq.n	8007656 <xQueueGenericReceive+0xfa>
 80076c6:	f7ff fccb 	bl	8007060 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ca:	a901      	add	r1, sp, #4
 80076cc:	a802      	add	r0, sp, #8
 80076ce:	f000 fc23 	bl	8007f18 <xTaskCheckForTimeOut>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1d1      	bne.n	800767a <xQueueGenericReceive+0x11e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076d6:	4620      	mov	r0, r4
 80076d8:	f7ff fdc0 	bl	800725c <prvIsQueueEmpty>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d0c6      	beq.n	800766e <xQueueGenericReceive+0x112>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0bb      	beq.n	800765e <xQueueGenericReceive+0x102>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076e6:	9901      	ldr	r1, [sp, #4]
 80076e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80076ec:	f000 fb9a 	bl	8007e24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076f0:	4620      	mov	r0, r4
 80076f2:	f7ff fe0d 	bl	8007310 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076f6:	f000 fa59 	bl	8007bac <xTaskResumeAll>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d1c7      	bne.n	800768e <xQueueGenericReceive+0x132>
					portYIELD_WITHIN_API();
 80076fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007702:	4b04      	ldr	r3, [pc, #16]	; (8007714 <xQueueGenericReceive+0x1b8>)
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	e7be      	b.n	800768e <xQueueGenericReceive+0x132>
				return errQUEUE_EMPTY;
 8007710:	2000      	movs	r0, #0
 8007712:	e77d      	b.n	8007610 <xQueueGenericReceive+0xb4>
 8007714:	e000ed04 	.word	0xe000ed04

08007718 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007718:	4b0a      	ldr	r3, [pc, #40]	; (8007744 <prvResetNextTaskUnblockTime+0x2c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	b94b      	cbnz	r3, 8007734 <prvResetNextTaskUnblockTime+0x1c>
 8007720:	2301      	movs	r3, #1
 8007722:	b94b      	cbnz	r3, 8007738 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007724:	4b07      	ldr	r3, [pc, #28]	; (8007744 <prvResetNextTaskUnblockTime+0x2c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <prvResetNextTaskUnblockTime+0x30>)
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007734:	2300      	movs	r3, #0
 8007736:	e7f4      	b.n	8007722 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007738:	f04f 32ff 	mov.w	r2, #4294967295
 800773c:	4b02      	ldr	r3, [pc, #8]	; (8007748 <prvResetNextTaskUnblockTime+0x30>)
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	20003d4c 	.word	0x20003d4c
 8007748:	20003e24 	.word	0x20003e24

0800774c <prvDeleteTCB>:
	{
 800774c:	b510      	push	{r4, lr}
 800774e:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8007750:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007752:	f7ff fb79 	bl	8006e48 <vPortFree>
			vPortFree( pxTCB );
 8007756:	4620      	mov	r0, r4
 8007758:	f7ff fb76 	bl	8006e48 <vPortFree>
 800775c:	bd10      	pop	{r4, pc}

0800775e <prvInitialiseNewTask>:
{
 800775e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007762:	4680      	mov	r8, r0
 8007764:	4699      	mov	r9, r3
 8007766:	9d08      	ldr	r5, [sp, #32]
 8007768:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800776a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800776c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800776e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007772:	4413      	add	r3, r2
 8007774:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007778:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800777c:	2300      	movs	r3, #0
 800777e:	2b0f      	cmp	r3, #15
 8007780:	d807      	bhi.n	8007792 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007782:	5cc8      	ldrb	r0, [r1, r3]
 8007784:	18e2      	adds	r2, r4, r3
 8007786:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800778a:	5cca      	ldrb	r2, [r1, r3]
 800778c:	b10a      	cbz	r2, 8007792 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800778e:	3301      	adds	r3, #1
 8007790:	e7f5      	b.n	800777e <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007792:	2300      	movs	r3, #0
 8007794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007798:	2d06      	cmp	r5, #6
 800779a:	d900      	bls.n	800779e <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800779c:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800779e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80077a0:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077a2:	f04f 0a00 	mov.w	sl, #0
 80077a6:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077aa:	1d20      	adds	r0, r4, #4
 80077ac:	f7ff fb93 	bl	8006ed6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077b0:	f104 0018 	add.w	r0, r4, #24
 80077b4:	f7ff fb8f 	bl	8006ed6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077b8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ba:	f1c5 0507 	rsb	r5, r5, #7
 80077be:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077c0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80077c2:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077c6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077ca:	464a      	mov	r2, r9
 80077cc:	4641      	mov	r1, r8
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7ff fbf6 	bl	8006fc0 <pxPortInitialiseStack>
 80077d4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80077d6:	b107      	cbz	r7, 80077da <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077d8:	603c      	str	r4, [r7, #0]
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080077e0 <prvInitialiseTaskLists>:
{
 80077e0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077e2:	2400      	movs	r4, #0
 80077e4:	e007      	b.n	80077f6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077e6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80077ea:	0093      	lsls	r3, r2, #2
 80077ec:	480e      	ldr	r0, [pc, #56]	; (8007828 <prvInitialiseTaskLists+0x48>)
 80077ee:	4418      	add	r0, r3
 80077f0:	f7ff fb66 	bl	8006ec0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077f4:	3401      	adds	r4, #1
 80077f6:	2c06      	cmp	r4, #6
 80077f8:	d9f5      	bls.n	80077e6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80077fa:	4d0c      	ldr	r5, [pc, #48]	; (800782c <prvInitialiseTaskLists+0x4c>)
 80077fc:	4628      	mov	r0, r5
 80077fe:	f7ff fb5f 	bl	8006ec0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007802:	4c0b      	ldr	r4, [pc, #44]	; (8007830 <prvInitialiseTaskLists+0x50>)
 8007804:	4620      	mov	r0, r4
 8007806:	f7ff fb5b 	bl	8006ec0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800780a:	480a      	ldr	r0, [pc, #40]	; (8007834 <prvInitialiseTaskLists+0x54>)
 800780c:	f7ff fb58 	bl	8006ec0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007810:	4809      	ldr	r0, [pc, #36]	; (8007838 <prvInitialiseTaskLists+0x58>)
 8007812:	f7ff fb55 	bl	8006ec0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007816:	4809      	ldr	r0, [pc, #36]	; (800783c <prvInitialiseTaskLists+0x5c>)
 8007818:	f7ff fb52 	bl	8006ec0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800781c:	4b08      	ldr	r3, [pc, #32]	; (8007840 <prvInitialiseTaskLists+0x60>)
 800781e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007820:	4b08      	ldr	r3, [pc, #32]	; (8007844 <prvInitialiseTaskLists+0x64>)
 8007822:	601c      	str	r4, [r3, #0]
 8007824:	bd38      	pop	{r3, r4, r5, pc}
 8007826:	bf00      	nop
 8007828:	20003d54 	.word	0x20003d54
 800782c:	20003df8 	.word	0x20003df8
 8007830:	20003e0c 	.word	0x20003e0c
 8007834:	20003e2c 	.word	0x20003e2c
 8007838:	20003e58 	.word	0x20003e58
 800783c:	20003e44 	.word	0x20003e44
 8007840:	20003d4c 	.word	0x20003d4c
 8007844:	20003d50 	.word	0x20003d50

08007848 <prvAddNewTaskToReadyList>:
{
 8007848:	b510      	push	{r4, lr}
 800784a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800784c:	f7ff fbe2 	bl	8007014 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007850:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <prvAddNewTaskToReadyList+0x8c>)
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007858:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <prvAddNewTaskToReadyList+0x90>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d031      	beq.n	80078c4 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8007860:	4b1e      	ldr	r3, [pc, #120]	; (80078dc <prvAddNewTaskToReadyList+0x94>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	b93b      	cbnz	r3, 8007876 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007866:	4b1c      	ldr	r3, [pc, #112]	; (80078d8 <prvAddNewTaskToReadyList+0x90>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800786e:	429a      	cmp	r2, r3
 8007870:	d801      	bhi.n	8007876 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8007872:	4b19      	ldr	r3, [pc, #100]	; (80078d8 <prvAddNewTaskToReadyList+0x90>)
 8007874:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8007876:	4a1a      	ldr	r2, [pc, #104]	; (80078e0 <prvAddNewTaskToReadyList+0x98>)
 8007878:	6813      	ldr	r3, [r2, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800787e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007880:	2201      	movs	r2, #1
 8007882:	409a      	lsls	r2, r3
 8007884:	4917      	ldr	r1, [pc, #92]	; (80078e4 <prvAddNewTaskToReadyList+0x9c>)
 8007886:	6808      	ldr	r0, [r1, #0]
 8007888:	4302      	orrs	r2, r0
 800788a:	600a      	str	r2, [r1, #0]
 800788c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007890:	009a      	lsls	r2, r3, #2
 8007892:	1d21      	adds	r1, r4, #4
 8007894:	4814      	ldr	r0, [pc, #80]	; (80078e8 <prvAddNewTaskToReadyList+0xa0>)
 8007896:	4410      	add	r0, r2
 8007898:	f7ff fb20 	bl	8006edc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800789c:	f7ff fbe0 	bl	8007060 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80078a0:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <prvAddNewTaskToReadyList+0x94>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b16b      	cbz	r3, 80078c2 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078a6:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <prvAddNewTaskToReadyList+0x90>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d207      	bcs.n	80078c2 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 80078b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b6:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <prvAddNewTaskToReadyList+0xa4>)
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80078c4:	4b04      	ldr	r3, [pc, #16]	; (80078d8 <prvAddNewTaskToReadyList+0x90>)
 80078c6:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078c8:	6813      	ldr	r3, [r2, #0]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d1d3      	bne.n	8007876 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 80078ce:	f7ff ff87 	bl	80077e0 <prvInitialiseTaskLists>
 80078d2:	e7d0      	b.n	8007876 <prvAddNewTaskToReadyList+0x2e>
 80078d4:	20003de0 	.word	0x20003de0
 80078d8:	20003d48 	.word	0x20003d48
 80078dc:	20003e40 	.word	0x20003e40
 80078e0:	20003df0 	.word	0x20003df0
 80078e4:	20003df4 	.word	0x20003df4
 80078e8:	20003d54 	.word	0x20003d54
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4604      	mov	r4, r0
 80078f4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078f6:	4b1f      	ldr	r3, [pc, #124]	; (8007974 <prvAddCurrentTaskToDelayedList+0x84>)
 80078f8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078fa:	4b1f      	ldr	r3, [pc, #124]	; (8007978 <prvAddCurrentTaskToDelayedList+0x88>)
 80078fc:	6818      	ldr	r0, [r3, #0]
 80078fe:	3004      	adds	r0, #4
 8007900:	f7ff fb12 	bl	8006f28 <uxListRemove>
 8007904:	b950      	cbnz	r0, 800791c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007906:	4b1c      	ldr	r3, [pc, #112]	; (8007978 <prvAddCurrentTaskToDelayedList+0x88>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	2301      	movs	r3, #1
 800790e:	fa03 f202 	lsl.w	r2, r3, r2
 8007912:	491a      	ldr	r1, [pc, #104]	; (800797c <prvAddCurrentTaskToDelayedList+0x8c>)
 8007914:	680b      	ldr	r3, [r1, #0]
 8007916:	ea23 0302 	bic.w	r3, r3, r2
 800791a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800791c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007920:	bf14      	ite	ne
 8007922:	2300      	movne	r3, #0
 8007924:	2301      	moveq	r3, #1
 8007926:	2e00      	cmp	r6, #0
 8007928:	bf08      	it	eq
 800792a:	2300      	moveq	r3, #0
 800792c:	b99b      	cbnz	r3, 8007956 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800792e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007930:	4b11      	ldr	r3, [pc, #68]	; (8007978 <prvAddCurrentTaskToDelayedList+0x88>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007936:	42a5      	cmp	r5, r4
 8007938:	d814      	bhi.n	8007964 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800793a:	4b11      	ldr	r3, [pc, #68]	; (8007980 <prvAddCurrentTaskToDelayedList+0x90>)
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <prvAddCurrentTaskToDelayedList+0x88>)
 8007940:	6819      	ldr	r1, [r3, #0]
 8007942:	3104      	adds	r1, #4
 8007944:	f7ff fad6 	bl	8006ef4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007948:	4b0e      	ldr	r3, [pc, #56]	; (8007984 <prvAddCurrentTaskToDelayedList+0x94>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	429c      	cmp	r4, r3
 800794e:	d201      	bcs.n	8007954 <prvAddCurrentTaskToDelayedList+0x64>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <prvAddCurrentTaskToDelayedList+0x94>)
 8007952:	601c      	str	r4, [r3, #0]
 8007954:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007956:	4b08      	ldr	r3, [pc, #32]	; (8007978 <prvAddCurrentTaskToDelayedList+0x88>)
 8007958:	6819      	ldr	r1, [r3, #0]
 800795a:	3104      	adds	r1, #4
 800795c:	480a      	ldr	r0, [pc, #40]	; (8007988 <prvAddCurrentTaskToDelayedList+0x98>)
 800795e:	f7ff fabd 	bl	8006edc <vListInsertEnd>
 8007962:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007964:	4b09      	ldr	r3, [pc, #36]	; (800798c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	4b03      	ldr	r3, [pc, #12]	; (8007978 <prvAddCurrentTaskToDelayedList+0x88>)
 800796a:	6819      	ldr	r1, [r3, #0]
 800796c:	3104      	adds	r1, #4
 800796e:	f7ff fac1 	bl	8006ef4 <vListInsert>
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	20003e6c 	.word	0x20003e6c
 8007978:	20003d48 	.word	0x20003d48
 800797c:	20003df4 	.word	0x20003df4
 8007980:	20003d4c 	.word	0x20003d4c
 8007984:	20003e24 	.word	0x20003e24
 8007988:	20003e44 	.word	0x20003e44
 800798c:	20003d50 	.word	0x20003d50

08007990 <xTaskCreate>:
	{
 8007990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007994:	b085      	sub	sp, #20
 8007996:	4606      	mov	r6, r0
 8007998:	460f      	mov	r7, r1
 800799a:	4615      	mov	r5, r2
 800799c:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800799e:	0090      	lsls	r0, r2, #2
 80079a0:	f7ff f9c8 	bl	8006d34 <pvPortMalloc>
			if( pxStack != NULL )
 80079a4:	b300      	cbz	r0, 80079e8 <xTaskCreate+0x58>
 80079a6:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80079a8:	2054      	movs	r0, #84	; 0x54
 80079aa:	f7ff f9c3 	bl	8006d34 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80079ae:	4604      	mov	r4, r0
 80079b0:	b1b0      	cbz	r0, 80079e0 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80079b2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80079b6:	b1cc      	cbz	r4, 80079ec <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079b8:	2300      	movs	r3, #0
 80079ba:	9303      	str	r3, [sp, #12]
 80079bc:	9402      	str	r4, [sp, #8]
 80079be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4643      	mov	r3, r8
 80079c8:	462a      	mov	r2, r5
 80079ca:	4639      	mov	r1, r7
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff fec6 	bl	800775e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079d2:	4620      	mov	r0, r4
 80079d4:	f7ff ff38 	bl	8007848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079d8:	2001      	movs	r0, #1
	}
 80079da:	b005      	add	sp, #20
 80079dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80079e0:	4648      	mov	r0, r9
 80079e2:	f7ff fa31 	bl	8006e48 <vPortFree>
 80079e6:	e7e6      	b.n	80079b6 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 80079e8:	2400      	movs	r4, #0
 80079ea:	e7e4      	b.n	80079b6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80079f0:	e7f3      	b.n	80079da <xTaskCreate+0x4a>
	...

080079f4 <vTaskStartScheduler>:
{
 80079f4:	b500      	push	{lr}
 80079f6:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80079f8:	4b19      	ldr	r3, [pc, #100]	; (8007a60 <vTaskStartScheduler+0x6c>)
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	2300      	movs	r3, #0
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2280      	movs	r2, #128	; 0x80
 8007a02:	4918      	ldr	r1, [pc, #96]	; (8007a64 <vTaskStartScheduler+0x70>)
 8007a04:	4818      	ldr	r0, [pc, #96]	; (8007a68 <vTaskStartScheduler+0x74>)
 8007a06:	f7ff ffc3 	bl	8007990 <xTaskCreate>
	if( xReturn == pdPASS )
 8007a0a:	2801      	cmp	r0, #1
 8007a0c:	d005      	beq.n	8007a1a <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a0e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a12:	d019      	beq.n	8007a48 <vTaskStartScheduler+0x54>
}
 8007a14:	b003      	add	sp, #12
 8007a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	b672      	cpsid	i
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a32:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <vTaskStartScheduler+0x78>)
 8007a34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a36:	2201      	movs	r2, #1
 8007a38:	4b0d      	ldr	r3, [pc, #52]	; (8007a70 <vTaskStartScheduler+0x7c>)
 8007a3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <vTaskStartScheduler+0x80>)
 8007a40:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007a42:	f7ff fb85 	bl	8007150 <xPortStartScheduler>
 8007a46:	e7e5      	b.n	8007a14 <vTaskStartScheduler+0x20>
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	b672      	cpsid	i
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	b662      	cpsie	i
 8007a5c:	e7fe      	b.n	8007a5c <vTaskStartScheduler+0x68>
 8007a5e:	bf00      	nop
 8007a60:	20003e20 	.word	0x20003e20
 8007a64:	0800842c 	.word	0x0800842c
 8007a68:	08007d5d 	.word	0x08007d5d
 8007a6c:	20003e24 	.word	0x20003e24
 8007a70:	20003e40 	.word	0x20003e40
 8007a74:	20003e6c 	.word	0x20003e6c

08007a78 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007a78:	4a02      	ldr	r2, [pc, #8]	; (8007a84 <vTaskSuspendAll+0xc>)
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20003dec 	.word	0x20003dec

08007a88 <xTaskIncrementTick>:
{
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a8a:	4b3d      	ldr	r3, [pc, #244]	; (8007b80 <xTaskIncrementTick+0xf8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d16a      	bne.n	8007b68 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + 1;
 8007a92:	4b3c      	ldr	r3, [pc, #240]	; (8007b84 <xTaskIncrementTick+0xfc>)
 8007a94:	681d      	ldr	r5, [r3, #0]
 8007a96:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007a98:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8007a9a:	b9d5      	cbnz	r5, 8007ad2 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007a9c:	4b3a      	ldr	r3, [pc, #232]	; (8007b88 <xTaskIncrementTick+0x100>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	b153      	cbz	r3, 8007aba <xTaskIncrementTick+0x32>
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	b672      	cpsid	i
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	b662      	cpsie	i
 8007ab8:	e7fe      	b.n	8007ab8 <xTaskIncrementTick+0x30>
 8007aba:	4a33      	ldr	r2, [pc, #204]	; (8007b88 <xTaskIncrementTick+0x100>)
 8007abc:	6811      	ldr	r1, [r2, #0]
 8007abe:	4b33      	ldr	r3, [pc, #204]	; (8007b8c <xTaskIncrementTick+0x104>)
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	6010      	str	r0, [r2, #0]
 8007ac4:	6019      	str	r1, [r3, #0]
 8007ac6:	4a32      	ldr	r2, [pc, #200]	; (8007b90 <xTaskIncrementTick+0x108>)
 8007ac8:	6813      	ldr	r3, [r2, #0]
 8007aca:	3301      	adds	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	f7ff fe23 	bl	8007718 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ad2:	4b30      	ldr	r3, [pc, #192]	; (8007b94 <xTaskIncrementTick+0x10c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	d23a      	bcs.n	8007b50 <xTaskIncrementTick+0xc8>
BaseType_t xSwitchRequired = pdFALSE;
 8007ada:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007adc:	4b2e      	ldr	r3, [pc, #184]	; (8007b98 <xTaskIncrementTick+0x110>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ae6:	009a      	lsls	r2, r3, #2
 8007ae8:	4b2c      	ldr	r3, [pc, #176]	; (8007b9c <xTaskIncrementTick+0x114>)
 8007aea:	589b      	ldr	r3, [r3, r2]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d940      	bls.n	8007b72 <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 8007af0:	2401      	movs	r4, #1
 8007af2:	e03e      	b.n	8007b72 <xTaskIncrementTick+0xea>
							xSwitchRequired = pdTRUE;
 8007af4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <xTaskIncrementTick+0x100>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	b353      	cbz	r3, 8007b54 <xTaskIncrementTick+0xcc>
 8007afe:	2300      	movs	r3, #0
 8007b00:	bb53      	cbnz	r3, 8007b58 <xTaskIncrementTick+0xd0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b02:	4b21      	ldr	r3, [pc, #132]	; (8007b88 <xTaskIncrementTick+0x100>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b0a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007b0c:	429d      	cmp	r5, r3
 8007b0e:	d328      	bcc.n	8007b62 <xTaskIncrementTick+0xda>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b10:	1d37      	adds	r7, r6, #4
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff fa08 	bl	8006f28 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b18:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007b1a:	b11b      	cbz	r3, 8007b24 <xTaskIncrementTick+0x9c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b1c:	f106 0018 	add.w	r0, r6, #24
 8007b20:	f7ff fa02 	bl	8006f28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b24:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007b26:	2201      	movs	r2, #1
 8007b28:	409a      	lsls	r2, r3
 8007b2a:	491d      	ldr	r1, [pc, #116]	; (8007ba0 <xTaskIncrementTick+0x118>)
 8007b2c:	6808      	ldr	r0, [r1, #0]
 8007b2e:	4302      	orrs	r2, r0
 8007b30:	600a      	str	r2, [r1, #0]
 8007b32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b36:	009a      	lsls	r2, r3, #2
 8007b38:	4639      	mov	r1, r7
 8007b3a:	4818      	ldr	r0, [pc, #96]	; (8007b9c <xTaskIncrementTick+0x114>)
 8007b3c:	4410      	add	r0, r2
 8007b3e:	f7ff f9cd 	bl	8006edc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b42:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8007b44:	4b14      	ldr	r3, [pc, #80]	; (8007b98 <xTaskIncrementTick+0x110>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d2d2      	bcs.n	8007af4 <xTaskIncrementTick+0x6c>
 8007b4e:	e7d2      	b.n	8007af6 <xTaskIncrementTick+0x6e>
 8007b50:	2400      	movs	r4, #0
 8007b52:	e7d0      	b.n	8007af6 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b54:	2301      	movs	r3, #1
 8007b56:	e7d3      	b.n	8007b00 <xTaskIncrementTick+0x78>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b58:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5c:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <xTaskIncrementTick+0x10c>)
 8007b5e:	601a      	str	r2, [r3, #0]
					break;
 8007b60:	e7bc      	b.n	8007adc <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8007b62:	4a0c      	ldr	r2, [pc, #48]	; (8007b94 <xTaskIncrementTick+0x10c>)
 8007b64:	6013      	str	r3, [r2, #0]
						break;
 8007b66:	e7b9      	b.n	8007adc <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8007b68:	4a0e      	ldr	r2, [pc, #56]	; (8007ba4 <xTaskIncrementTick+0x11c>)
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007b70:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8007b72:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <xTaskIncrementTick+0x120>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 8007b78:	2401      	movs	r4, #1
}
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20003dec 	.word	0x20003dec
 8007b84:	20003e6c 	.word	0x20003e6c
 8007b88:	20003d4c 	.word	0x20003d4c
 8007b8c:	20003d50 	.word	0x20003d50
 8007b90:	20003e28 	.word	0x20003e28
 8007b94:	20003e24 	.word	0x20003e24
 8007b98:	20003d48 	.word	0x20003d48
 8007b9c:	20003d54 	.word	0x20003d54
 8007ba0:	20003df4 	.word	0x20003df4
 8007ba4:	20003de8 	.word	0x20003de8
 8007ba8:	20003e70 	.word	0x20003e70

08007bac <xTaskResumeAll>:
{
 8007bac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007bae:	4b36      	ldr	r3, [pc, #216]	; (8007c88 <xTaskResumeAll+0xdc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	b953      	cbnz	r3, 8007bca <xTaskResumeAll+0x1e>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	b672      	cpsid	i
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	b662      	cpsie	i
 8007bc8:	e7fe      	b.n	8007bc8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8007bca:	f7ff fa23 	bl	8007014 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007bce:	4b2e      	ldr	r3, [pc, #184]	; (8007c88 <xTaskResumeAll+0xdc>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	3a01      	subs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d150      	bne.n	8007c7e <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bdc:	4b2b      	ldr	r3, [pc, #172]	; (8007c8c <xTaskResumeAll+0xe0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	b923      	cbnz	r3, 8007bec <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8007be2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007be4:	f7ff fa3c 	bl	8007060 <vPortExitCritical>
}
 8007be8:	4620      	mov	r0, r4
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bee:	4b28      	ldr	r3, [pc, #160]	; (8007c90 <xTaskResumeAll+0xe4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	b31b      	cbz	r3, 8007c3c <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007bf4:	4b26      	ldr	r3, [pc, #152]	; (8007c90 <xTaskResumeAll+0xe4>)
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bfa:	f104 0018 	add.w	r0, r4, #24
 8007bfe:	f7ff f993 	bl	8006f28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c02:	1d25      	adds	r5, r4, #4
 8007c04:	4628      	mov	r0, r5
 8007c06:	f7ff f98f 	bl	8006f28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	4920      	ldr	r1, [pc, #128]	; (8007c94 <xTaskResumeAll+0xe8>)
 8007c12:	6808      	ldr	r0, [r1, #0]
 8007c14:	4302      	orrs	r2, r0
 8007c16:	600a      	str	r2, [r1, #0]
 8007c18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c1c:	009a      	lsls	r2, r3, #2
 8007c1e:	4629      	mov	r1, r5
 8007c20:	481d      	ldr	r0, [pc, #116]	; (8007c98 <xTaskResumeAll+0xec>)
 8007c22:	4410      	add	r0, r2
 8007c24:	f7ff f95a 	bl	8006edc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007c2a:	4b1c      	ldr	r3, [pc, #112]	; (8007c9c <xTaskResumeAll+0xf0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d3dc      	bcc.n	8007bee <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8007c34:	2201      	movs	r2, #1
 8007c36:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <xTaskResumeAll+0xf4>)
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e7d8      	b.n	8007bee <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8007c3c:	b10c      	cbz	r4, 8007c42 <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8007c3e:	f7ff fd6b 	bl	8007718 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c42:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <xTaskResumeAll+0xf8>)
 8007c44:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c46:	b974      	cbnz	r4, 8007c66 <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8007c48:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <xTaskResumeAll+0xf4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	b1cb      	cbz	r3, 8007c82 <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8007c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <xTaskResumeAll+0xfc>)
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007c5e:	2401      	movs	r4, #1
 8007c60:	e7c0      	b.n	8007be4 <xTaskResumeAll+0x38>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c62:	3c01      	subs	r4, #1
 8007c64:	d007      	beq.n	8007c76 <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 8007c66:	f7ff ff0f 	bl	8007a88 <xTaskIncrementTick>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d0f9      	beq.n	8007c62 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <xTaskResumeAll+0xf4>)
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e7f5      	b.n	8007c62 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8007c76:	2200      	movs	r2, #0
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <xTaskResumeAll+0xf8>)
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e7e4      	b.n	8007c48 <xTaskResumeAll+0x9c>
BaseType_t xAlreadyYielded = pdFALSE;
 8007c7e:	2400      	movs	r4, #0
 8007c80:	e7b0      	b.n	8007be4 <xTaskResumeAll+0x38>
 8007c82:	2400      	movs	r4, #0
 8007c84:	e7ae      	b.n	8007be4 <xTaskResumeAll+0x38>
 8007c86:	bf00      	nop
 8007c88:	20003dec 	.word	0x20003dec
 8007c8c:	20003de0 	.word	0x20003de0
 8007c90:	20003e2c 	.word	0x20003e2c
 8007c94:	20003df4 	.word	0x20003df4
 8007c98:	20003d54 	.word	0x20003d54
 8007c9c:	20003d48 	.word	0x20003d48
 8007ca0:	20003e70 	.word	0x20003e70
 8007ca4:	20003de8 	.word	0x20003de8
 8007ca8:	e000ed04 	.word	0xe000ed04

08007cac <vTaskDelay>:
	{
 8007cac:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cae:	b1b8      	cbz	r0, 8007ce0 <vTaskDelay+0x34>
 8007cb0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007cb2:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <vTaskDelay+0x4c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	b153      	cbz	r3, 8007cce <vTaskDelay+0x22>
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	b672      	cpsid	i
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	b662      	cpsie	i
 8007ccc:	e7fe      	b.n	8007ccc <vTaskDelay+0x20>
			vTaskSuspendAll();
 8007cce:	f7ff fed3 	bl	8007a78 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f7ff fe0b 	bl	80078f0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007cda:	f7ff ff67 	bl	8007bac <xTaskResumeAll>
 8007cde:	e000      	b.n	8007ce2 <vTaskDelay+0x36>
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ce0:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8007ce2:	b938      	cbnz	r0, 8007cf4 <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 8007ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <vTaskDelay+0x50>)
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	bd10      	pop	{r4, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20003dec 	.word	0x20003dec
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d00:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <prvCheckTasksWaitingTermination+0x50>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	b313      	cbz	r3, 8007d4c <prvCheckTasksWaitingTermination+0x4c>
{
 8007d06:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8007d08:	f7ff feb6 	bl	8007a78 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007d0c:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <prvCheckTasksWaitingTermination+0x54>)
 8007d0e:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8007d10:	f7ff ff4c 	bl	8007bac <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8007d14:	b924      	cbnz	r4, 8007d20 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d16:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <prvCheckTasksWaitingTermination+0x50>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1f4      	bne.n	8007d08 <prvCheckTasksWaitingTermination+0x8>
}
 8007d1e:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8007d20:	f7ff f978 	bl	8007014 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007d24:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <prvCheckTasksWaitingTermination+0x54>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d2a:	1d20      	adds	r0, r4, #4
 8007d2c:	f7ff f8fc 	bl	8006f28 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007d30:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <prvCheckTasksWaitingTermination+0x58>)
 8007d32:	6813      	ldr	r3, [r2, #0]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8007d38:	4a05      	ldr	r2, [pc, #20]	; (8007d50 <prvCheckTasksWaitingTermination+0x50>)
 8007d3a:	6813      	ldr	r3, [r2, #0]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8007d40:	f7ff f98e 	bl	8007060 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7ff fd01 	bl	800774c <prvDeleteTCB>
 8007d4a:	e7e4      	b.n	8007d16 <prvCheckTasksWaitingTermination+0x16>
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	20003de4 	.word	0x20003de4
 8007d54:	20003e58 	.word	0x20003e58
 8007d58:	20003de0 	.word	0x20003de0

08007d5c <prvIdleTask>:
{
 8007d5c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007d5e:	f7ff ffcf 	bl	8007d00 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d62:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <prvIdleTask+0x20>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d9f9      	bls.n	8007d5e <prvIdleTask+0x2>
				taskYIELD();
 8007d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d6e:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <prvIdleTask+0x24>)
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	e7f0      	b.n	8007d5e <prvIdleTask+0x2>
 8007d7c:	20003d54 	.word	0x20003d54
 8007d80:	e000ed04 	.word	0xe000ed04

08007d84 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d84:	4b22      	ldr	r3, [pc, #136]	; (8007e10 <vTaskSwitchContext+0x8c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	b9d3      	cbnz	r3, 8007dc0 <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <vTaskSwitchContext+0x90>)
 8007d8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007d90:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <vTaskSwitchContext+0x94>)
 8007d92:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8007d94:	fab3 f383 	clz	r3, r3
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	f1c3 031f 	rsb	r3, r3, #31
 8007d9e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007da2:	008a      	lsls	r2, r1, #2
 8007da4:	491d      	ldr	r1, [pc, #116]	; (8007e1c <vTaskSwitchContext+0x98>)
 8007da6:	588a      	ldr	r2, [r1, r2]
 8007da8:	b972      	cbnz	r2, 8007dc8 <vTaskSwitchContext+0x44>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	b672      	cpsid	i
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	b662      	cpsie	i
 8007dbe:	e7fe      	b.n	8007dbe <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <vTaskSwitchContext+0x90>)
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	4770      	bx	lr
{
 8007dc8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007dca:	4814      	ldr	r0, [pc, #80]	; (8007e1c <vTaskSwitchContext+0x98>)
 8007dcc:	009a      	lsls	r2, r3, #2
 8007dce:	18d4      	adds	r4, r2, r3
 8007dd0:	00a1      	lsls	r1, r4, #2
 8007dd2:	4401      	add	r1, r0
 8007dd4:	684c      	ldr	r4, [r1, #4]
 8007dd6:	6864      	ldr	r4, [r4, #4]
 8007dd8:	604c      	str	r4, [r1, #4]
 8007dda:	441a      	add	r2, r3
 8007ddc:	0091      	lsls	r1, r2, #2
 8007dde:	3108      	adds	r1, #8
 8007de0:	4408      	add	r0, r1
 8007de2:	4284      	cmp	r4, r0
 8007de4:	d00b      	beq.n	8007dfe <vTaskSwitchContext+0x7a>
 8007de6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007dea:	009a      	lsls	r2, r3, #2
 8007dec:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <vTaskSwitchContext+0x98>)
 8007dee:	4413      	add	r3, r2
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <vTaskSwitchContext+0x9c>)
 8007df6:	601a      	str	r2, [r3, #0]
}
 8007df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dfc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007dfe:	6860      	ldr	r0, [r4, #4]
 8007e00:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007e04:	0091      	lsls	r1, r2, #2
 8007e06:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <vTaskSwitchContext+0x98>)
 8007e08:	440a      	add	r2, r1
 8007e0a:	6050      	str	r0, [r2, #4]
 8007e0c:	e7eb      	b.n	8007de6 <vTaskSwitchContext+0x62>
 8007e0e:	bf00      	nop
 8007e10:	20003dec 	.word	0x20003dec
 8007e14:	20003e70 	.word	0x20003e70
 8007e18:	20003df4 	.word	0x20003df4
 8007e1c:	20003d54 	.word	0x20003d54
 8007e20:	20003d48 	.word	0x20003d48

08007e24 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007e24:	b950      	cbnz	r0, 8007e3c <vTaskPlaceOnEventList+0x18>
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	b672      	cpsid	i
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	b662      	cpsie	i
 8007e3a:	e7fe      	b.n	8007e3a <vTaskPlaceOnEventList+0x16>
{
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <vTaskPlaceOnEventList+0x30>)
 8007e42:	6819      	ldr	r1, [r3, #0]
 8007e44:	3118      	adds	r1, #24
 8007e46:	f7ff f855 	bl	8006ef4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f7ff fd4f 	bl	80078f0 <prvAddCurrentTaskToDelayedList>
 8007e52:	bd10      	pop	{r4, pc}
 8007e54:	20003d48 	.word	0x20003d48

08007e58 <xTaskRemoveFromEventList>:
{
 8007e58:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007e5a:	68c3      	ldr	r3, [r0, #12]
 8007e5c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007e5e:	b324      	cbz	r4, 8007eaa <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e60:	f104 0518 	add.w	r5, r4, #24
 8007e64:	4628      	mov	r0, r5
 8007e66:	f7ff f85f 	bl	8006f28 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e6a:	4b19      	ldr	r3, [pc, #100]	; (8007ed0 <xTaskRemoveFromEventList+0x78>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	bb3b      	cbnz	r3, 8007ec0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e70:	1d25      	adds	r5, r4, #4
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7ff f858 	bl	8006f28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	409a      	lsls	r2, r3
 8007e7e:	4915      	ldr	r1, [pc, #84]	; (8007ed4 <xTaskRemoveFromEventList+0x7c>)
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	4302      	orrs	r2, r0
 8007e84:	600a      	str	r2, [r1, #0]
 8007e86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e8a:	009a      	lsls	r2, r3, #2
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4812      	ldr	r0, [pc, #72]	; (8007ed8 <xTaskRemoveFromEventList+0x80>)
 8007e90:	4410      	add	r0, r2
 8007e92:	f7ff f823 	bl	8006edc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007e98:	4b10      	ldr	r3, [pc, #64]	; (8007edc <xTaskRemoveFromEventList+0x84>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d913      	bls.n	8007eca <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8007ea2:	2001      	movs	r0, #1
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <xTaskRemoveFromEventList+0x88>)
 8007ea6:	6018      	str	r0, [r3, #0]
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	b672      	cpsid	i
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	b662      	cpsie	i
 8007ebe:	e7fe      	b.n	8007ebe <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4808      	ldr	r0, [pc, #32]	; (8007ee4 <xTaskRemoveFromEventList+0x8c>)
 8007ec4:	f7ff f80a 	bl	8006edc <vListInsertEnd>
 8007ec8:	e7e5      	b.n	8007e96 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8007eca:	2000      	movs	r0, #0
}
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
 8007ece:	bf00      	nop
 8007ed0:	20003dec 	.word	0x20003dec
 8007ed4:	20003df4 	.word	0x20003df4
 8007ed8:	20003d54 	.word	0x20003d54
 8007edc:	20003d48 	.word	0x20003d48
 8007ee0:	20003e70 	.word	0x20003e70
 8007ee4:	20003e2c 	.word	0x20003e2c

08007ee8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8007ee8:	b130      	cbz	r0, 8007ef8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007eea:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <vTaskSetTimeOutState+0x28>)
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ef0:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <vTaskSetTimeOutState+0x2c>)
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	6042      	str	r2, [r0, #4]
 8007ef6:	4770      	bx	lr
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	b672      	cpsid	i
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	b662      	cpsie	i
 8007f0c:	e7fe      	b.n	8007f0c <vTaskSetTimeOutState+0x24>
 8007f0e:	bf00      	nop
 8007f10:	20003e28 	.word	0x20003e28
 8007f14:	20003e6c 	.word	0x20003e6c

08007f18 <xTaskCheckForTimeOut>:
{
 8007f18:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8007f1a:	b1c0      	cbz	r0, 8007f4e <xTaskCheckForTimeOut+0x36>
 8007f1c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8007f1e:	b309      	cbz	r1, 8007f64 <xTaskCheckForTimeOut+0x4c>
 8007f20:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007f22:	f7ff f877 	bl	8007014 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007f26:	4b1c      	ldr	r3, [pc, #112]	; (8007f98 <xTaskCheckForTimeOut+0x80>)
 8007f28:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d02e      	beq.n	8007f90 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	4a19      	ldr	r2, [pc, #100]	; (8007f9c <xTaskCheckForTimeOut+0x84>)
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	4290      	cmp	r0, r2
 8007f3a:	d002      	beq.n	8007f42 <xTaskCheckForTimeOut+0x2a>
 8007f3c:	6862      	ldr	r2, [r4, #4]
 8007f3e:	4291      	cmp	r1, r2
 8007f40:	d228      	bcs.n	8007f94 <xTaskCheckForTimeOut+0x7c>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f42:	6862      	ldr	r2, [r4, #4]
 8007f44:	1a88      	subs	r0, r1, r2
 8007f46:	4283      	cmp	r3, r0
 8007f48:	d817      	bhi.n	8007f7a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8007f4a:	2401      	movs	r4, #1
 8007f4c:	e01c      	b.n	8007f88 <xTaskCheckForTimeOut+0x70>
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	e7fe      	b.n	8007f62 <xTaskCheckForTimeOut+0x4a>
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	b672      	cpsid	i
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	b662      	cpsie	i
 8007f78:	e7fe      	b.n	8007f78 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007f7a:	1a52      	subs	r2, r2, r1
 8007f7c:	4413      	add	r3, r2
 8007f7e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8007f80:	4620      	mov	r0, r4
 8007f82:	f7ff ffb1 	bl	8007ee8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8007f86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007f88:	f7ff f86a 	bl	8007060 <vPortExitCritical>
}
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 8007f90:	2400      	movs	r4, #0
 8007f92:	e7f9      	b.n	8007f88 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 8007f94:	2401      	movs	r4, #1
 8007f96:	e7f7      	b.n	8007f88 <xTaskCheckForTimeOut+0x70>
 8007f98:	20003e6c 	.word	0x20003e6c
 8007f9c:	20003e28 	.word	0x20003e28

08007fa0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	4b01      	ldr	r3, [pc, #4]	; (8007fa8 <vTaskMissedYield+0x8>)
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	4770      	bx	lr
 8007fa8:	20003e70 	.word	0x20003e70

08007fac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <xTaskGetSchedulerState+0x18>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	b123      	cbz	r3, 8007fbc <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <xTaskGetSchedulerState+0x1c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	b91b      	cbnz	r3, 8007fc0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8007fb8:	2002      	movs	r0, #2
 8007fba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fc0:	2000      	movs	r0, #0
	}
 8007fc2:	4770      	bx	lr
 8007fc4:	20003e40 	.word	0x20003e40
 8007fc8:	20003dec 	.word	0x20003dec

08007fcc <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d047      	beq.n	8008060 <vTaskPriorityInherit+0x94>
	{
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007fd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007fd6:	4923      	ldr	r1, [pc, #140]	; (8008064 <vTaskPriorityInherit+0x98>)
 8007fd8:	6809      	ldr	r1, [r1, #0]
 8007fda:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	d216      	bcs.n	800800e <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fe0:	6981      	ldr	r1, [r0, #24]
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	db05      	blt.n	8007ff2 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe6:	491f      	ldr	r1, [pc, #124]	; (8008064 <vTaskPriorityInherit+0x98>)
 8007fe8:	6809      	ldr	r1, [r1, #0]
 8007fea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007fec:	f1c1 0107 	rsb	r1, r1, #7
 8007ff0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ff2:	6960      	ldr	r0, [r4, #20]
 8007ff4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ff8:	0099      	lsls	r1, r3, #2
 8007ffa:	4b1b      	ldr	r3, [pc, #108]	; (8008068 <vTaskPriorityInherit+0x9c>)
 8007ffc:	440b      	add	r3, r1
 8007ffe:	4298      	cmp	r0, r3
 8008000:	d006      	beq.n	8008010 <vTaskPriorityInherit+0x44>
 8008002:	2300      	movs	r3, #0
 8008004:	b933      	cbnz	r3, 8008014 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008006:	4b17      	ldr	r3, [pc, #92]	; (8008064 <vTaskPriorityInherit+0x98>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800800e:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008010:	2301      	movs	r3, #1
 8008012:	e7f7      	b.n	8008004 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008014:	1d25      	adds	r5, r4, #4
 8008016:	4628      	mov	r0, r5
 8008018:	f7fe ff86 	bl	8006f28 <uxListRemove>
 800801c:	b968      	cbnz	r0, 800803a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800801e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008020:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008024:	008a      	lsls	r2, r1, #2
 8008026:	4910      	ldr	r1, [pc, #64]	; (8008068 <vTaskPriorityInherit+0x9c>)
 8008028:	588a      	ldr	r2, [r1, r2]
 800802a:	b932      	cbnz	r2, 800803a <vTaskPriorityInherit+0x6e>
 800802c:	2201      	movs	r2, #1
 800802e:	409a      	lsls	r2, r3
 8008030:	490e      	ldr	r1, [pc, #56]	; (800806c <vTaskPriorityInherit+0xa0>)
 8008032:	680b      	ldr	r3, [r1, #0]
 8008034:	ea23 0302 	bic.w	r3, r3, r2
 8008038:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800803a:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <vTaskPriorityInherit+0x98>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8008042:	2201      	movs	r2, #1
 8008044:	409a      	lsls	r2, r3
 8008046:	4909      	ldr	r1, [pc, #36]	; (800806c <vTaskPriorityInherit+0xa0>)
 8008048:	6808      	ldr	r0, [r1, #0]
 800804a:	4302      	orrs	r2, r0
 800804c:	600a      	str	r2, [r1, #0]
 800804e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008052:	009a      	lsls	r2, r3, #2
 8008054:	4629      	mov	r1, r5
 8008056:	4804      	ldr	r0, [pc, #16]	; (8008068 <vTaskPriorityInherit+0x9c>)
 8008058:	4410      	add	r0, r2
 800805a:	f7fe ff3f 	bl	8006edc <vListInsertEnd>
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20003d48 	.word	0x20003d48
 8008068:	20003d54 	.word	0x20003d54
 800806c:	20003df4 	.word	0x20003df4

08008070 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008070:	2800      	cmp	r0, #0
 8008072:	d04e      	beq.n	8008112 <xTaskPriorityDisinherit+0xa2>
	{
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008078:	4a29      	ldr	r2, [pc, #164]	; (8008120 <xTaskPriorityDisinherit+0xb0>)
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	4290      	cmp	r0, r2
 800807e:	d00a      	beq.n	8008096 <xTaskPriorityDisinherit+0x26>
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	b672      	cpsid	i
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	b662      	cpsie	i
 8008094:	e7fe      	b.n	8008094 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8008096:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8008098:	b952      	cbnz	r2, 80080b0 <xTaskPriorityDisinherit+0x40>
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	b672      	cpsid	i
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	b662      	cpsie	i
 80080ae:	e7fe      	b.n	80080ae <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 80080b0:	3a01      	subs	r2, #1
 80080b2:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80080b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080b8:	4288      	cmp	r0, r1
 80080ba:	d02c      	beq.n	8008116 <xTaskPriorityDisinherit+0xa6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080bc:	bb6a      	cbnz	r2, 800811a <xTaskPriorityDisinherit+0xaa>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080be:	1d25      	adds	r5, r4, #4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f7fe ff31 	bl	8006f28 <uxListRemove>
 80080c6:	b970      	cbnz	r0, 80080e6 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80080ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80080ce:	008b      	lsls	r3, r1, #2
 80080d0:	4914      	ldr	r1, [pc, #80]	; (8008124 <xTaskPriorityDisinherit+0xb4>)
 80080d2:	58cb      	ldr	r3, [r1, r3]
 80080d4:	b93b      	cbnz	r3, 80080e6 <xTaskPriorityDisinherit+0x76>
 80080d6:	2301      	movs	r3, #1
 80080d8:	fa03 f202 	lsl.w	r2, r3, r2
 80080dc:	4912      	ldr	r1, [pc, #72]	; (8008128 <xTaskPriorityDisinherit+0xb8>)
 80080de:	680b      	ldr	r3, [r1, #0]
 80080e0:	ea23 0302 	bic.w	r3, r3, r2
 80080e4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80080e8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ea:	f1c3 0207 	rsb	r2, r3, #7
 80080ee:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80080f0:	2401      	movs	r4, #1
 80080f2:	fa04 f203 	lsl.w	r2, r4, r3
 80080f6:	490c      	ldr	r1, [pc, #48]	; (8008128 <xTaskPriorityDisinherit+0xb8>)
 80080f8:	6808      	ldr	r0, [r1, #0]
 80080fa:	4302      	orrs	r2, r0
 80080fc:	600a      	str	r2, [r1, #0]
 80080fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008102:	009a      	lsls	r2, r3, #2
 8008104:	4629      	mov	r1, r5
 8008106:	4807      	ldr	r0, [pc, #28]	; (8008124 <xTaskPriorityDisinherit+0xb4>)
 8008108:	4410      	add	r0, r2
 800810a:	f7fe fee7 	bl	8006edc <vListInsertEnd>
					xReturn = pdTRUE;
 800810e:	4620      	mov	r0, r4
 8008110:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008112:	2000      	movs	r0, #0
 8008114:	4770      	bx	lr
 8008116:	2000      	movs	r0, #0
 8008118:	bd38      	pop	{r3, r4, r5, pc}
 800811a:	2000      	movs	r0, #0
	}
 800811c:	bd38      	pop	{r3, r4, r5, pc}
 800811e:	bf00      	nop
 8008120:	20003d48 	.word	0x20003d48
 8008124:	20003d54 	.word	0x20003d54
 8008128:	20003df4 	.word	0x20003df4

0800812c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <pvTaskIncrementMutexHeldCount+0x18>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	b123      	cbz	r3, 800813c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008132:	4b04      	ldr	r3, [pc, #16]	; (8008144 <pvTaskIncrementMutexHeldCount+0x18>)
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008138:	3301      	adds	r3, #1
 800813a:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 800813c:	4b01      	ldr	r3, [pc, #4]	; (8008144 <pvTaskIncrementMutexHeldCount+0x18>)
 800813e:	6818      	ldr	r0, [r3, #0]
	}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20003d48 	.word	0x20003d48

08008148 <__libc_init_array>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4e0d      	ldr	r6, [pc, #52]	; (8008180 <__libc_init_array+0x38>)
 800814c:	4c0d      	ldr	r4, [pc, #52]	; (8008184 <__libc_init_array+0x3c>)
 800814e:	1ba4      	subs	r4, r4, r6
 8008150:	10a4      	asrs	r4, r4, #2
 8008152:	2500      	movs	r5, #0
 8008154:	42a5      	cmp	r5, r4
 8008156:	d109      	bne.n	800816c <__libc_init_array+0x24>
 8008158:	4e0b      	ldr	r6, [pc, #44]	; (8008188 <__libc_init_array+0x40>)
 800815a:	4c0c      	ldr	r4, [pc, #48]	; (800818c <__libc_init_array+0x44>)
 800815c:	f000 f880 	bl	8008260 <_init>
 8008160:	1ba4      	subs	r4, r4, r6
 8008162:	10a4      	asrs	r4, r4, #2
 8008164:	2500      	movs	r5, #0
 8008166:	42a5      	cmp	r5, r4
 8008168:	d105      	bne.n	8008176 <__libc_init_array+0x2e>
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008170:	4798      	blx	r3
 8008172:	3501      	adds	r5, #1
 8008174:	e7ee      	b.n	8008154 <__libc_init_array+0xc>
 8008176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800817a:	4798      	blx	r3
 800817c:	3501      	adds	r5, #1
 800817e:	e7f2      	b.n	8008166 <__libc_init_array+0x1e>
 8008180:	08008544 	.word	0x08008544
 8008184:	08008544 	.word	0x08008544
 8008188:	08008544 	.word	0x08008544
 800818c:	08008548 	.word	0x08008548

08008190 <memcpy>:
 8008190:	b510      	push	{r4, lr}
 8008192:	1e43      	subs	r3, r0, #1
 8008194:	440a      	add	r2, r1
 8008196:	4291      	cmp	r1, r2
 8008198:	d100      	bne.n	800819c <memcpy+0xc>
 800819a:	bd10      	pop	{r4, pc}
 800819c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a4:	e7f7      	b.n	8008196 <memcpy+0x6>

080081a6 <abort>:
 80081a6:	b508      	push	{r3, lr}
 80081a8:	2006      	movs	r0, #6
 80081aa:	f000 f82b 	bl	8008204 <raise>
 80081ae:	2001      	movs	r0, #1
 80081b0:	f000 f854 	bl	800825c <_exit>

080081b4 <_raise_r>:
 80081b4:	291f      	cmp	r1, #31
 80081b6:	b538      	push	{r3, r4, r5, lr}
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
 80081bc:	d904      	bls.n	80081c8 <_raise_r+0x14>
 80081be:	2316      	movs	r3, #22
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	f04f 30ff 	mov.w	r0, #4294967295
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ca:	b112      	cbz	r2, 80081d2 <_raise_r+0x1e>
 80081cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081d0:	b94b      	cbnz	r3, 80081e6 <_raise_r+0x32>
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 f830 	bl	8008238 <_getpid_r>
 80081d8:	462a      	mov	r2, r5
 80081da:	4601      	mov	r1, r0
 80081dc:	4620      	mov	r0, r4
 80081de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e2:	f000 b817 	b.w	8008214 <_kill_r>
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d00a      	beq.n	8008200 <_raise_r+0x4c>
 80081ea:	1c59      	adds	r1, r3, #1
 80081ec:	d103      	bne.n	80081f6 <_raise_r+0x42>
 80081ee:	2316      	movs	r3, #22
 80081f0:	6003      	str	r3, [r0, #0]
 80081f2:	2001      	movs	r0, #1
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	2400      	movs	r4, #0
 80081f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081fc:	4628      	mov	r0, r5
 80081fe:	4798      	blx	r3
 8008200:	2000      	movs	r0, #0
 8008202:	bd38      	pop	{r3, r4, r5, pc}

08008204 <raise>:
 8008204:	4b02      	ldr	r3, [pc, #8]	; (8008210 <raise+0xc>)
 8008206:	4601      	mov	r1, r0
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	f7ff bfd3 	b.w	80081b4 <_raise_r>
 800820e:	bf00      	nop
 8008210:	200000a0 	.word	0x200000a0

08008214 <_kill_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4c07      	ldr	r4, [pc, #28]	; (8008234 <_kill_r+0x20>)
 8008218:	2300      	movs	r3, #0
 800821a:	4605      	mov	r5, r0
 800821c:	4608      	mov	r0, r1
 800821e:	4611      	mov	r1, r2
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	f000 f813 	bl	800824c <_kill>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d102      	bne.n	8008230 <_kill_r+0x1c>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	b103      	cbz	r3, 8008230 <_kill_r+0x1c>
 800822e:	602b      	str	r3, [r5, #0]
 8008230:	bd38      	pop	{r3, r4, r5, pc}
 8008232:	bf00      	nop
 8008234:	20004644 	.word	0x20004644

08008238 <_getpid_r>:
 8008238:	f000 b800 	b.w	800823c <_getpid>

0800823c <_getpid>:
 800823c:	4b02      	ldr	r3, [pc, #8]	; (8008248 <_getpid+0xc>)
 800823e:	2258      	movs	r2, #88	; 0x58
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	4770      	bx	lr
 8008248:	20004644 	.word	0x20004644

0800824c <_kill>:
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <_kill+0xc>)
 800824e:	2258      	movs	r2, #88	; 0x58
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f04f 30ff 	mov.w	r0, #4294967295
 8008256:	4770      	bx	lr
 8008258:	20004644 	.word	0x20004644

0800825c <_exit>:
 800825c:	e7fe      	b.n	800825c <_exit>
	...

08008260 <_init>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

0800826c <_fini>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr
