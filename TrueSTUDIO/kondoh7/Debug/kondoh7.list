
kondoh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08008298  08008298  00018298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e0  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008568  08008568  00018568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000104  20000000  0800856c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000044d4  20000104  08008670  00020104  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200045d8  08008670  000245d8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 11 .debug_line   0000d317  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0003557c  00000000  00000000  0002d449  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000057a6  00000000  00000000  000629c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001838  00000000  00000000  00068170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017d8  00000000  00000000  000699a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00012252  00000000  00000000  0006b180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008e41  00000000  00000000  0007d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00086213  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004144  00000000  00000000  00086290  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  0008a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000104 	.word	0x20000104
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008280 	.word	0x08008280

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000108 	.word	0x20000108
 80002dc:	08008280 	.word	0x08008280

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f001 b8f6 	b.w	80014e4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <selfrel_offset31>:
 80005ec:	6803      	ldr	r3, [r0, #0]
 80005ee:	005a      	lsls	r2, r3, #1
 80005f0:	bf4c      	ite	mi
 80005f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80005f6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80005fa:	4418      	add	r0, r3
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <search_EIT_table>:
 8000600:	b361      	cbz	r1, 800065c <search_EIT_table+0x5c>
 8000602:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000606:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800060a:	4690      	mov	r8, r2
 800060c:	4606      	mov	r6, r0
 800060e:	46d1      	mov	r9, sl
 8000610:	2700      	movs	r7, #0
 8000612:	eb07 0409 	add.w	r4, r7, r9
 8000616:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800061a:	1064      	asrs	r4, r4, #1
 800061c:	00e5      	lsls	r5, r4, #3
 800061e:	1971      	adds	r1, r6, r5
 8000620:	4608      	mov	r0, r1
 8000622:	f7ff ffe3 	bl	80005ec <selfrel_offset31>
 8000626:	45a2      	cmp	sl, r4
 8000628:	4683      	mov	fp, r0
 800062a:	f105 0008 	add.w	r0, r5, #8
 800062e:	4430      	add	r0, r6
 8000630:	d009      	beq.n	8000646 <search_EIT_table+0x46>
 8000632:	f7ff ffdb 	bl	80005ec <selfrel_offset31>
 8000636:	45c3      	cmp	fp, r8
 8000638:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800063c:	d805      	bhi.n	800064a <search_EIT_table+0x4a>
 800063e:	4540      	cmp	r0, r8
 8000640:	d209      	bcs.n	8000656 <search_EIT_table+0x56>
 8000642:	1c67      	adds	r7, r4, #1
 8000644:	e7e5      	b.n	8000612 <search_EIT_table+0x12>
 8000646:	45c3      	cmp	fp, r8
 8000648:	d905      	bls.n	8000656 <search_EIT_table+0x56>
 800064a:	42a7      	cmp	r7, r4
 800064c:	d002      	beq.n	8000654 <search_EIT_table+0x54>
 800064e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8000652:	e7de      	b.n	8000612 <search_EIT_table+0x12>
 8000654:	2100      	movs	r1, #0
 8000656:	4608      	mov	r0, r1
 8000658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800065c:	4608      	mov	r0, r1
 800065e:	4770      	bx	lr

08000660 <__gnu_unwind_get_pr_addr>:
 8000660:	2801      	cmp	r0, #1
 8000662:	d007      	beq.n	8000674 <__gnu_unwind_get_pr_addr+0x14>
 8000664:	2802      	cmp	r0, #2
 8000666:	d007      	beq.n	8000678 <__gnu_unwind_get_pr_addr+0x18>
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__gnu_unwind_get_pr_addr+0x1c>)
 800066a:	2800      	cmp	r0, #0
 800066c:	bf0c      	ite	eq
 800066e:	4618      	moveq	r0, r3
 8000670:	2000      	movne	r0, #0
 8000672:	4770      	bx	lr
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <__gnu_unwind_get_pr_addr+0x20>)
 8000676:	4770      	bx	lr
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <__gnu_unwind_get_pr_addr+0x24>)
 800067a:	4770      	bx	lr
 800067c:	08000d65 	.word	0x08000d65
 8000680:	08000d69 	.word	0x08000d69
 8000684:	08000d6d 	.word	0x08000d6d

08000688 <get_eit_entry>:
 8000688:	b530      	push	{r4, r5, lr}
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <get_eit_entry+0x94>)
 800068c:	b083      	sub	sp, #12
 800068e:	4604      	mov	r4, r0
 8000690:	1e8d      	subs	r5, r1, #2
 8000692:	b37b      	cbz	r3, 80006f4 <get_eit_entry+0x6c>
 8000694:	a901      	add	r1, sp, #4
 8000696:	4628      	mov	r0, r5
 8000698:	f3af 8000 	nop.w
 800069c:	b320      	cbz	r0, 80006e8 <get_eit_entry+0x60>
 800069e:	9901      	ldr	r1, [sp, #4]
 80006a0:	462a      	mov	r2, r5
 80006a2:	f7ff ffad 	bl	8000600 <search_EIT_table>
 80006a6:	4601      	mov	r1, r0
 80006a8:	b1f0      	cbz	r0, 80006e8 <get_eit_entry+0x60>
 80006aa:	f7ff ff9f 	bl	80005ec <selfrel_offset31>
 80006ae:	684b      	ldr	r3, [r1, #4]
 80006b0:	64a0      	str	r0, [r4, #72]	; 0x48
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d012      	beq.n	80006dc <get_eit_entry+0x54>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f101 0004 	add.w	r0, r1, #4
 80006bc:	db20      	blt.n	8000700 <get_eit_entry+0x78>
 80006be:	f7ff ff95 	bl	80005ec <selfrel_offset31>
 80006c2:	2300      	movs	r3, #0
 80006c4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80006c6:	6523      	str	r3, [r4, #80]	; 0x50
 80006c8:	6803      	ldr	r3, [r0, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db1c      	blt.n	8000708 <get_eit_entry+0x80>
 80006ce:	f7ff ff8d 	bl	80005ec <selfrel_offset31>
 80006d2:	2300      	movs	r3, #0
 80006d4:	6120      	str	r0, [r4, #16]
 80006d6:	4618      	mov	r0, r3
 80006d8:	b003      	add	sp, #12
 80006da:	bd30      	pop	{r4, r5, pc}
 80006dc:	2300      	movs	r3, #0
 80006de:	6123      	str	r3, [r4, #16]
 80006e0:	2305      	movs	r3, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	b003      	add	sp, #12
 80006e6:	bd30      	pop	{r4, r5, pc}
 80006e8:	2300      	movs	r3, #0
 80006ea:	6123      	str	r3, [r4, #16]
 80006ec:	2309      	movs	r3, #9
 80006ee:	4618      	mov	r0, r3
 80006f0:	b003      	add	sp, #12
 80006f2:	bd30      	pop	{r4, r5, pc}
 80006f4:	490a      	ldr	r1, [pc, #40]	; (8000720 <get_eit_entry+0x98>)
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <get_eit_entry+0x9c>)
 80006f8:	1a09      	subs	r1, r1, r0
 80006fa:	10c9      	asrs	r1, r1, #3
 80006fc:	9101      	str	r1, [sp, #4]
 80006fe:	e7cf      	b.n	80006a0 <get_eit_entry+0x18>
 8000700:	2301      	movs	r3, #1
 8000702:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000704:	6523      	str	r3, [r4, #80]	; 0x50
 8000706:	e7df      	b.n	80006c8 <get_eit_entry+0x40>
 8000708:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800070c:	f7ff ffa8 	bl	8000660 <__gnu_unwind_get_pr_addr>
 8000710:	2800      	cmp	r0, #0
 8000712:	6120      	str	r0, [r4, #16]
 8000714:	bf14      	ite	ne
 8000716:	2300      	movne	r3, #0
 8000718:	2309      	moveq	r3, #9
 800071a:	e7dc      	b.n	80006d6 <get_eit_entry+0x4e>
 800071c:	00000000 	.word	0x00000000
 8000720:	08008564 	.word	0x08008564
 8000724:	08008484 	.word	0x08008484

08000728 <restore_non_core_regs>:
 8000728:	6803      	ldr	r3, [r0, #0]
 800072a:	07da      	lsls	r2, r3, #31
 800072c:	b510      	push	{r4, lr}
 800072e:	4604      	mov	r4, r0
 8000730:	d406      	bmi.n	8000740 <restore_non_core_regs+0x18>
 8000732:	079b      	lsls	r3, r3, #30
 8000734:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000738:	d509      	bpl.n	800074e <restore_non_core_regs+0x26>
 800073a:	f000 fc51 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D>
 800073e:	6823      	ldr	r3, [r4, #0]
 8000740:	0759      	lsls	r1, r3, #29
 8000742:	d509      	bpl.n	8000758 <restore_non_core_regs+0x30>
 8000744:	071a      	lsls	r2, r3, #28
 8000746:	d50e      	bpl.n	8000766 <restore_non_core_regs+0x3e>
 8000748:	06db      	lsls	r3, r3, #27
 800074a:	d513      	bpl.n	8000774 <restore_non_core_regs+0x4c>
 800074c:	bd10      	pop	{r4, pc}
 800074e:	f000 fc3f 	bl	8000fd0 <__gnu_Unwind_Restore_VFP>
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	0759      	lsls	r1, r3, #29
 8000756:	d4f5      	bmi.n	8000744 <restore_non_core_regs+0x1c>
 8000758:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800075c:	f000 fc48 	bl	8000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	071a      	lsls	r2, r3, #28
 8000764:	d4f0      	bmi.n	8000748 <restore_non_core_regs+0x20>
 8000766:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800076a:	f000 fc49 	bl	8001000 <__gnu_Unwind_Restore_WMMXD>
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	06db      	lsls	r3, r3, #27
 8000772:	d4eb      	bmi.n	800074c <restore_non_core_regs+0x24>
 8000774:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800077c:	f000 bc84 	b.w	8001088 <__gnu_Unwind_Restore_WMMXC>

08000780 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000780:	6803      	ldr	r3, [r0, #0]
 8000782:	b103      	cbz	r3, 8000786 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000784:	4403      	add	r3, r0
 8000786:	4618      	mov	r0, r3
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop

0800078c <__gnu_unwind_24bit.isra.1>:
 800078c:	2009      	movs	r0, #9
 800078e:	4770      	bx	lr

08000790 <_Unwind_DebugHook>:
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <unwind_phase2>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
 8000798:	460d      	mov	r5, r1
 800079a:	e008      	b.n	80007ae <unwind_phase2+0x1a>
 800079c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800079e:	6163      	str	r3, [r4, #20]
 80007a0:	462a      	mov	r2, r5
 80007a2:	6923      	ldr	r3, [r4, #16]
 80007a4:	4621      	mov	r1, r4
 80007a6:	2001      	movs	r0, #1
 80007a8:	4798      	blx	r3
 80007aa:	2808      	cmp	r0, #8
 80007ac:	d108      	bne.n	80007c0 <unwind_phase2+0x2c>
 80007ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007b0:	4620      	mov	r0, r4
 80007b2:	f7ff ff69 	bl	8000688 <get_eit_entry>
 80007b6:	4606      	mov	r6, r0
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d0ef      	beq.n	800079c <unwind_phase2+0x8>
 80007bc:	f007 fd03 	bl	80081c6 <abort>
 80007c0:	2807      	cmp	r0, #7
 80007c2:	d1fb      	bne.n	80007bc <unwind_phase2+0x28>
 80007c4:	4630      	mov	r0, r6
 80007c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007c8:	f7ff ffe2 	bl	8000790 <_Unwind_DebugHook>
 80007cc:	1d28      	adds	r0, r5, #4
 80007ce:	f000 fbf3 	bl	8000fb8 <__restore_core_regs>
 80007d2:	bf00      	nop

080007d4 <unwind_phase2_forced>:
 80007d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d8:	1d0c      	adds	r4, r1, #4
 80007da:	4605      	mov	r5, r0
 80007dc:	4692      	mov	sl, r2
 80007de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007e0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80007e4:	ae03      	add	r6, sp, #12
 80007e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007f4:	ac02      	add	r4, sp, #8
 80007f6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80007fa:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80007fe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000802:	2300      	movs	r3, #0
 8000804:	4628      	mov	r0, r5
 8000806:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000808:	6023      	str	r3, [r4, #0]
 800080a:	f7ff ff3d 	bl	8000688 <get_eit_entry>
 800080e:	f1ba 0f00 	cmp.w	sl, #0
 8000812:	4607      	mov	r7, r0
 8000814:	bf14      	ite	ne
 8000816:	260a      	movne	r6, #10
 8000818:	2609      	moveq	r6, #9
 800081a:	b17f      	cbz	r7, 800083c <unwind_phase2_forced+0x68>
 800081c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800081e:	f046 0110 	orr.w	r1, r6, #16
 8000822:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000826:	462a      	mov	r2, r5
 8000828:	6463      	str	r3, [r4, #68]	; 0x44
 800082a:	2001      	movs	r0, #1
 800082c:	462b      	mov	r3, r5
 800082e:	47c0      	blx	r8
 8000830:	bb78      	cbnz	r0, 8000892 <unwind_phase2_forced+0xbe>
 8000832:	4638      	mov	r0, r7
 8000834:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800083e:	616b      	str	r3, [r5, #20]
 8000840:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000844:	4621      	mov	r1, r4
 8000846:	a87a      	add	r0, sp, #488	; 0x1e8
 8000848:	f007 fcb2 	bl	80081b0 <memcpy>
 800084c:	692b      	ldr	r3, [r5, #16]
 800084e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000850:	4629      	mov	r1, r5
 8000852:	4630      	mov	r0, r6
 8000854:	4798      	blx	r3
 8000856:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000858:	4682      	mov	sl, r0
 800085a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800085e:	4631      	mov	r1, r6
 8000860:	6463      	str	r3, [r4, #68]	; 0x44
 8000862:	462a      	mov	r2, r5
 8000864:	462b      	mov	r3, r5
 8000866:	2001      	movs	r0, #1
 8000868:	47c0      	blx	r8
 800086a:	b990      	cbnz	r0, 8000892 <unwind_phase2_forced+0xbe>
 800086c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000870:	a97a      	add	r1, sp, #488	; 0x1e8
 8000872:	4620      	mov	r0, r4
 8000874:	f007 fc9c 	bl	80081b0 <memcpy>
 8000878:	f1ba 0f08 	cmp.w	sl, #8
 800087c:	d106      	bne.n	800088c <unwind_phase2_forced+0xb8>
 800087e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000880:	4628      	mov	r0, r5
 8000882:	f7ff ff01 	bl	8000688 <get_eit_entry>
 8000886:	2609      	movs	r6, #9
 8000888:	4607      	mov	r7, r0
 800088a:	e7c6      	b.n	800081a <unwind_phase2_forced+0x46>
 800088c:	f1ba 0f07 	cmp.w	sl, #7
 8000890:	d005      	beq.n	800089e <unwind_phase2_forced+0xca>
 8000892:	2709      	movs	r7, #9
 8000894:	4638      	mov	r0, r7
 8000896:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	4638      	mov	r0, r7
 80008a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80008a2:	f7ff ff75 	bl	8000790 <_Unwind_DebugHook>
 80008a6:	a803      	add	r0, sp, #12
 80008a8:	f000 fb86 	bl	8000fb8 <__restore_core_regs>

080008ac <_Unwind_GetCFA>:
 80008ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80008ae:	4770      	bx	lr

080008b0 <__gnu_Unwind_RaiseException>:
 80008b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80008b4:	640b      	str	r3, [r1, #64]	; 0x40
 80008b6:	1d0e      	adds	r6, r1, #4
 80008b8:	460f      	mov	r7, r1
 80008ba:	4604      	mov	r4, r0
 80008bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008be:	b0f9      	sub	sp, #484	; 0x1e4
 80008c0:	ad01      	add	r5, sp, #4
 80008c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80008d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008d8:	9600      	str	r6, [sp, #0]
 80008da:	e006      	b.n	80008ea <__gnu_Unwind_RaiseException+0x3a>
 80008dc:	6923      	ldr	r3, [r4, #16]
 80008de:	466a      	mov	r2, sp
 80008e0:	4621      	mov	r1, r4
 80008e2:	4798      	blx	r3
 80008e4:	2808      	cmp	r0, #8
 80008e6:	4605      	mov	r5, r0
 80008e8:	d108      	bne.n	80008fc <__gnu_Unwind_RaiseException+0x4c>
 80008ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80008ec:	4620      	mov	r0, r4
 80008ee:	f7ff fecb 	bl	8000688 <get_eit_entry>
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d0f2      	beq.n	80008dc <__gnu_Unwind_RaiseException+0x2c>
 80008f6:	2009      	movs	r0, #9
 80008f8:	b079      	add	sp, #484	; 0x1e4
 80008fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fc:	4668      	mov	r0, sp
 80008fe:	f7ff ff13 	bl	8000728 <restore_non_core_regs>
 8000902:	2d06      	cmp	r5, #6
 8000904:	d1f7      	bne.n	80008f6 <__gnu_Unwind_RaiseException+0x46>
 8000906:	4639      	mov	r1, r7
 8000908:	4620      	mov	r0, r4
 800090a:	f7ff ff43 	bl	8000794 <unwind_phase2>
 800090e:	bf00      	nop

08000910 <__gnu_Unwind_ForcedUnwind>:
 8000910:	b430      	push	{r4, r5}
 8000912:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000914:	60c1      	str	r1, [r0, #12]
 8000916:	6182      	str	r2, [r0, #24]
 8000918:	4619      	mov	r1, r3
 800091a:	641d      	str	r5, [r3, #64]	; 0x40
 800091c:	2200      	movs	r2, #0
 800091e:	bc30      	pop	{r4, r5}
 8000920:	e758      	b.n	80007d4 <unwind_phase2_forced>
 8000922:	bf00      	nop

08000924 <__gnu_Unwind_Resume>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	68c6      	ldr	r6, [r0, #12]
 8000928:	6943      	ldr	r3, [r0, #20]
 800092a:	640b      	str	r3, [r1, #64]	; 0x40
 800092c:	b126      	cbz	r6, 8000938 <__gnu_Unwind_Resume+0x14>
 800092e:	2201      	movs	r2, #1
 8000930:	f7ff ff50 	bl	80007d4 <unwind_phase2_forced>
 8000934:	f007 fc47 	bl	80081c6 <abort>
 8000938:	6903      	ldr	r3, [r0, #16]
 800093a:	460a      	mov	r2, r1
 800093c:	4604      	mov	r4, r0
 800093e:	460d      	mov	r5, r1
 8000940:	4601      	mov	r1, r0
 8000942:	2002      	movs	r0, #2
 8000944:	4798      	blx	r3
 8000946:	2807      	cmp	r0, #7
 8000948:	d007      	beq.n	800095a <__gnu_Unwind_Resume+0x36>
 800094a:	2808      	cmp	r0, #8
 800094c:	d103      	bne.n	8000956 <__gnu_Unwind_Resume+0x32>
 800094e:	4629      	mov	r1, r5
 8000950:	4620      	mov	r0, r4
 8000952:	f7ff ff1f 	bl	8000794 <unwind_phase2>
 8000956:	f007 fc36 	bl	80081c6 <abort>
 800095a:	4630      	mov	r0, r6
 800095c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800095e:	f7ff ff17 	bl	8000790 <_Unwind_DebugHook>
 8000962:	1d28      	adds	r0, r5, #4
 8000964:	f000 fb28 	bl	8000fb8 <__restore_core_regs>

08000968 <__gnu_Unwind_Resume_or_Rethrow>:
 8000968:	68c2      	ldr	r2, [r0, #12]
 800096a:	b11a      	cbz	r2, 8000974 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800096c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800096e:	640a      	str	r2, [r1, #64]	; 0x40
 8000970:	2200      	movs	r2, #0
 8000972:	e72f      	b.n	80007d4 <unwind_phase2_forced>
 8000974:	e79c      	b.n	80008b0 <__gnu_Unwind_RaiseException>
 8000976:	bf00      	nop

08000978 <_Unwind_Complete>:
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <_Unwind_DeleteException>:
 800097c:	6883      	ldr	r3, [r0, #8]
 800097e:	b113      	cbz	r3, 8000986 <_Unwind_DeleteException+0xa>
 8000980:	4601      	mov	r1, r0
 8000982:	2001      	movs	r0, #1
 8000984:	4718      	bx	r3
 8000986:	4770      	bx	lr

08000988 <_Unwind_VRS_Get>:
 8000988:	b500      	push	{lr}
 800098a:	2904      	cmp	r1, #4
 800098c:	d807      	bhi.n	800099e <_Unwind_VRS_Get+0x16>
 800098e:	e8df f001 	tbb	[pc, r1]
 8000992:	0903      	.short	0x0903
 8000994:	0906      	.short	0x0906
 8000996:	09          	.byte	0x09
 8000997:	00          	.byte	0x00
 8000998:	b90b      	cbnz	r3, 800099e <_Unwind_VRS_Get+0x16>
 800099a:	2a0f      	cmp	r2, #15
 800099c:	d905      	bls.n	80009aa <_Unwind_VRS_Get+0x22>
 800099e:	2002      	movs	r0, #2
 80009a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a4:	2001      	movs	r0, #1
 80009a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	6853      	ldr	r3, [r2, #4]
 80009b2:	9a01      	ldr	r2, [sp, #4]
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ba:	bf00      	nop

080009bc <_Unwind_GetGR>:
 80009bc:	b510      	push	{r4, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	2300      	movs	r3, #0
 80009c2:	ac03      	add	r4, sp, #12
 80009c4:	460a      	mov	r2, r1
 80009c6:	9400      	str	r4, [sp, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f7ff ffdd 	bl	8000988 <_Unwind_VRS_Get>
 80009ce:	9803      	ldr	r0, [sp, #12]
 80009d0:	b004      	add	sp, #16
 80009d2:	bd10      	pop	{r4, pc}

080009d4 <_Unwind_VRS_Set>:
 80009d4:	b500      	push	{lr}
 80009d6:	2904      	cmp	r1, #4
 80009d8:	d807      	bhi.n	80009ea <_Unwind_VRS_Set+0x16>
 80009da:	e8df f001 	tbb	[pc, r1]
 80009de:	0903      	.short	0x0903
 80009e0:	0906      	.short	0x0906
 80009e2:	09          	.byte	0x09
 80009e3:	00          	.byte	0x00
 80009e4:	b90b      	cbnz	r3, 80009ea <_Unwind_VRS_Set+0x16>
 80009e6:	2a0f      	cmp	r2, #15
 80009e8:	d905      	bls.n	80009f6 <_Unwind_VRS_Set+0x22>
 80009ea:	2002      	movs	r0, #2
 80009ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f0:	2001      	movs	r0, #1
 80009f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f6:	9901      	ldr	r1, [sp, #4]
 80009f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	6051      	str	r1, [r2, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a06:	bf00      	nop

08000a08 <_Unwind_SetGR>:
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	ac04      	add	r4, sp, #16
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000a14:	460a      	mov	r2, r1
 8000a16:	9400      	str	r4, [sp, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f7ff ffdb 	bl	80009d4 <_Unwind_VRS_Set>
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	bf00      	nop

08000a24 <__gnu_Unwind_Backtrace>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	1d15      	adds	r5, r2, #4
 8000a2c:	4607      	mov	r7, r0
 8000a2e:	460e      	mov	r6, r1
 8000a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a32:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000a36:	ac17      	add	r4, sp, #92	; 0x5c
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a4e:	9516      	str	r5, [sp, #88]	; 0x58
 8000a50:	e010      	b.n	8000a74 <__gnu_Unwind_Backtrace+0x50>
 8000a52:	a816      	add	r0, sp, #88	; 0x58
 8000a54:	f7ff ffd8 	bl	8000a08 <_Unwind_SetGR>
 8000a58:	4631      	mov	r1, r6
 8000a5a:	a816      	add	r0, sp, #88	; 0x58
 8000a5c:	47b8      	blx	r7
 8000a5e:	aa16      	add	r2, sp, #88	; 0x58
 8000a60:	4669      	mov	r1, sp
 8000a62:	b978      	cbnz	r0, 8000a84 <__gnu_Unwind_Backtrace+0x60>
 8000a64:	9b04      	ldr	r3, [sp, #16]
 8000a66:	2008      	movs	r0, #8
 8000a68:	4798      	blx	r3
 8000a6a:	2805      	cmp	r0, #5
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	d00a      	beq.n	8000a86 <__gnu_Unwind_Backtrace+0x62>
 8000a70:	2809      	cmp	r0, #9
 8000a72:	d007      	beq.n	8000a84 <__gnu_Unwind_Backtrace+0x60>
 8000a74:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a76:	4668      	mov	r0, sp
 8000a78:	f7ff fe06 	bl	8000688 <get_eit_entry>
 8000a7c:	466a      	mov	r2, sp
 8000a7e:	210c      	movs	r1, #12
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d0e6      	beq.n	8000a52 <__gnu_Unwind_Backtrace+0x2e>
 8000a84:	2409      	movs	r4, #9
 8000a86:	a816      	add	r0, sp, #88	; 0x58
 8000a88:	f7ff fe4e 	bl	8000728 <restore_non_core_regs>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a94 <__gnu_unwind_pr_common>:
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	460d      	mov	r5, r1
 8000a9a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a9c:	b08b      	sub	sp, #44	; 0x2c
 8000a9e:	1d0c      	adds	r4, r1, #4
 8000aa0:	6809      	ldr	r1, [r1, #0]
 8000aa2:	9107      	str	r1, [sp, #28]
 8000aa4:	4691      	mov	r9, r2
 8000aa6:	9408      	str	r4, [sp, #32]
 8000aa8:	f000 0b03 	and.w	fp, r0, #3
 8000aac:	461e      	mov	r6, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d160      	bne.n	8000b74 <__gnu_unwind_pr_common+0xe0>
 8000ab2:	0209      	lsls	r1, r1, #8
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	9107      	str	r1, [sp, #28]
 8000ab8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000abc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ac0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ac2:	f1bb 0f02 	cmp.w	fp, #2
 8000ac6:	bf08      	it	eq
 8000ac8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000aca:	f013 0301 	ands.w	r3, r3, #1
 8000ace:	d140      	bne.n	8000b52 <__gnu_unwind_pr_common+0xbe>
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	f000 0308 	and.w	r3, r0, #8
 8000ad6:	9303      	str	r3, [sp, #12]
 8000ad8:	f8d4 8000 	ldr.w	r8, [r4]
 8000adc:	f1b8 0f00 	cmp.w	r8, #0
 8000ae0:	d039      	beq.n	8000b56 <__gnu_unwind_pr_common+0xc2>
 8000ae2:	2e02      	cmp	r6, #2
 8000ae4:	d043      	beq.n	8000b6e <__gnu_unwind_pr_common+0xda>
 8000ae6:	f8b4 8000 	ldrh.w	r8, [r4]
 8000aea:	8867      	ldrh	r7, [r4, #2]
 8000aec:	3404      	adds	r4, #4
 8000aee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000af0:	f027 0a01 	bic.w	sl, r7, #1
 8000af4:	210f      	movs	r1, #15
 8000af6:	4648      	mov	r0, r9
 8000af8:	449a      	add	sl, r3
 8000afa:	f7ff ff5f 	bl	80009bc <_Unwind_GetGR>
 8000afe:	4582      	cmp	sl, r0
 8000b00:	d833      	bhi.n	8000b6a <__gnu_unwind_pr_common+0xd6>
 8000b02:	f028 0301 	bic.w	r3, r8, #1
 8000b06:	449a      	add	sl, r3
 8000b08:	4550      	cmp	r0, sl
 8000b0a:	bf2c      	ite	cs
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	007f      	lsls	r7, r7, #1
 8000b12:	f007 0702 	and.w	r7, r7, #2
 8000b16:	f008 0801 	and.w	r8, r8, #1
 8000b1a:	ea47 0708 	orr.w	r7, r7, r8
 8000b1e:	2f01      	cmp	r7, #1
 8000b20:	d03e      	beq.n	8000ba0 <__gnu_unwind_pr_common+0x10c>
 8000b22:	d335      	bcc.n	8000b90 <__gnu_unwind_pr_common+0xfc>
 8000b24:	2f02      	cmp	r7, #2
 8000b26:	d11c      	bne.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b2e:	9202      	str	r2, [sp, #8]
 8000b30:	f1bb 0f00 	cmp.w	fp, #0
 8000b34:	d176      	bne.n	8000c24 <__gnu_unwind_pr_common+0x190>
 8000b36:	b128      	cbz	r0, 8000b44 <__gnu_unwind_pr_common+0xb0>
 8000b38:	9903      	ldr	r1, [sp, #12]
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d07e      	beq.n	8000c3c <__gnu_unwind_pr_common+0x1a8>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	f000 80a6 	beq.w	8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db77      	blt.n	8000c38 <__gnu_unwind_pr_common+0x1a4>
 8000b48:	9b02      	ldr	r3, [sp, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000b50:	e7c2      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	2e02      	cmp	r6, #2
 8000b58:	dd3e      	ble.n	8000bd8 <__gnu_unwind_pr_common+0x144>
 8000b5a:	f7ff fe17 	bl	800078c <__gnu_unwind_24bit.isra.1>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d040      	beq.n	8000be4 <__gnu_unwind_pr_common+0x150>
 8000b62:	2009      	movs	r0, #9
 8000b64:	b00b      	add	sp, #44	; 0x2c
 8000b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e7d0      	b.n	8000b10 <__gnu_unwind_pr_common+0x7c>
 8000b6e:	6867      	ldr	r7, [r4, #4]
 8000b70:	3408      	adds	r4, #8
 8000b72:	e7bc      	b.n	8000aee <__gnu_unwind_pr_common+0x5a>
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	dca3      	bgt.n	8000ac0 <__gnu_unwind_pr_common+0x2c>
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	0409      	lsls	r1, r1, #16
 8000b7e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b82:	2302      	movs	r3, #2
 8000b84:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b88:	9107      	str	r1, [sp, #28]
 8000b8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b8e:	e797      	b.n	8000ac0 <__gnu_unwind_pr_common+0x2c>
 8000b90:	f1bb 0f00 	cmp.w	fp, #0
 8000b94:	d002      	beq.n	8000b9c <__gnu_unwind_pr_common+0x108>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	f040 80bd 	bne.w	8000d16 <__gnu_unwind_pr_common+0x282>
 8000b9c:	3404      	adds	r4, #4
 8000b9e:	e79b      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000ba0:	f1bb 0f00 	cmp.w	fp, #0
 8000ba4:	d125      	bne.n	8000bf2 <__gnu_unwind_pr_common+0x15e>
 8000ba6:	b1a8      	cbz	r0, 8000bd4 <__gnu_unwind_pr_common+0x140>
 8000ba8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000bac:	1c99      	adds	r1, r3, #2
 8000bae:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000bb2:	d0d6      	beq.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000bb4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000bb8:	3301      	adds	r3, #1
 8000bba:	9106      	str	r1, [sp, #24]
 8000bbc:	f000 80a3 	beq.w	8000d06 <__gnu_unwind_pr_common+0x272>
 8000bc0:	1d20      	adds	r0, r4, #4
 8000bc2:	f7ff fddd 	bl	8000780 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bc6:	ab06      	add	r3, sp, #24
 8000bc8:	4601      	mov	r1, r0
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d177      	bne.n	8000cc4 <__gnu_unwind_pr_common+0x230>
 8000bd4:	3408      	adds	r4, #8
 8000bd6:	e77f      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000bd8:	a907      	add	r1, sp, #28
 8000bda:	4648      	mov	r0, r9
 8000bdc:	f000 faee 	bl	80011bc <__gnu_unwind_execute>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d1be      	bne.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000be4:	9b01      	ldr	r3, [sp, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d15c      	bne.n	8000ca4 <__gnu_unwind_pr_common+0x210>
 8000bea:	2008      	movs	r0, #8
 8000bec:	b00b      	add	sp, #44	; 0x2c
 8000bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bf2:	210d      	movs	r1, #13
 8000bf4:	4648      	mov	r0, r9
 8000bf6:	6a2f      	ldr	r7, [r5, #32]
 8000bf8:	f7ff fee0 	bl	80009bc <_Unwind_GetGR>
 8000bfc:	4287      	cmp	r7, r0
 8000bfe:	d1e9      	bne.n	8000bd4 <__gnu_unwind_pr_common+0x140>
 8000c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c02:	429c      	cmp	r4, r3
 8000c04:	d1e6      	bne.n	8000bd4 <__gnu_unwind_pr_common+0x140>
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fcf0 	bl	80005ec <selfrel_offset31>
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4648      	mov	r0, r9
 8000c12:	f7ff fef9 	bl	8000a08 <_Unwind_SetGR>
 8000c16:	4648      	mov	r0, r9
 8000c18:	462a      	mov	r2, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f7ff fef4 	bl	8000a08 <_Unwind_SetGR>
 8000c20:	2007      	movs	r0, #7
 8000c22:	e79f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000c24:	210d      	movs	r1, #13
 8000c26:	4648      	mov	r0, r9
 8000c28:	6a2f      	ldr	r7, [r5, #32]
 8000c2a:	f7ff fec7 	bl	80009bc <_Unwind_GetGR>
 8000c2e:	4287      	cmp	r7, r0
 8000c30:	d058      	beq.n	8000ce4 <__gnu_unwind_pr_common+0x250>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da87      	bge.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000c38:	3404      	adds	r4, #4
 8000c3a:	e785      	b.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000c3c:	9b02      	ldr	r3, [sp, #8]
 8000c3e:	b33b      	cbz	r3, 8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000c40:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000c44:	1d27      	adds	r7, r4, #4
 8000c46:	f8cd b010 	str.w	fp, [sp, #16]
 8000c4a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000c4e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000c52:	9605      	str	r6, [sp, #20]
 8000c54:	46a3      	mov	fp, r4
 8000c56:	461c      	mov	r4, r3
 8000c58:	e002      	b.n	8000c60 <__gnu_unwind_pr_common+0x1cc>
 8000c5a:	45b2      	cmp	sl, r6
 8000c5c:	46b0      	mov	r8, r6
 8000c5e:	d016      	beq.n	8000c8e <__gnu_unwind_pr_common+0x1fa>
 8000c60:	4638      	mov	r0, r7
 8000c62:	9406      	str	r4, [sp, #24]
 8000c64:	f7ff fd8c 	bl	8000780 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000c68:	ab06      	add	r3, sp, #24
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f3af 8000 	nop.w
 8000c74:	f108 0601 	add.w	r6, r8, #1
 8000c78:	3704      	adds	r7, #4
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d0ed      	beq.n	8000c5a <__gnu_unwind_pr_common+0x1c6>
 8000c7e:	9b02      	ldr	r3, [sp, #8]
 8000c80:	9e05      	ldr	r6, [sp, #20]
 8000c82:	4543      	cmp	r3, r8
 8000c84:	465c      	mov	r4, fp
 8000c86:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c8a:	d1d2      	bne.n	8000c32 <__gnu_unwind_pr_common+0x19e>
 8000c8c:	e000      	b.n	8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000c8e:	465c      	mov	r4, fp
 8000c90:	4648      	mov	r0, r9
 8000c92:	210d      	movs	r1, #13
 8000c94:	f7ff fe92 	bl	80009bc <_Unwind_GetGR>
 8000c98:	9b06      	ldr	r3, [sp, #24]
 8000c9a:	6228      	str	r0, [r5, #32]
 8000c9c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c9e:	626b      	str	r3, [r5, #36]	; 0x24
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	e75f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	4648      	mov	r0, r9
 8000ca8:	f7ff fe88 	bl	80009bc <_Unwind_GetGR>
 8000cac:	210e      	movs	r1, #14
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4648      	mov	r0, r9
 8000cb2:	f7ff fea9 	bl	8000a08 <_Unwind_SetGR>
 8000cb6:	4648      	mov	r0, r9
 8000cb8:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <__gnu_unwind_pr_common+0x2cc>)
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f7ff fea4 	bl	8000a08 <_Unwind_SetGR>
 8000cc0:	2007      	movs	r0, #7
 8000cc2:	e74f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000cc4:	4607      	mov	r7, r0
 8000cc6:	210d      	movs	r1, #13
 8000cc8:	4648      	mov	r0, r9
 8000cca:	f7ff fe77 	bl	80009bc <_Unwind_GetGR>
 8000cce:	2f02      	cmp	r7, #2
 8000cd0:	6228      	str	r0, [r5, #32]
 8000cd2:	d11d      	bne.n	8000d10 <__gnu_unwind_pr_common+0x27c>
 8000cd4:	462b      	mov	r3, r5
 8000cd6:	9a06      	ldr	r2, [sp, #24]
 8000cd8:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000cdc:	626b      	str	r3, [r5, #36]	; 0x24
 8000cde:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ce0:	2006      	movs	r0, #6
 8000ce2:	e73f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000ce4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ce6:	429c      	cmp	r4, r3
 8000ce8:	d1a3      	bne.n	8000c32 <__gnu_unwind_pr_common+0x19e>
 8000cea:	2204      	movs	r2, #4
 8000cec:	2700      	movs	r7, #0
 8000cee:	18a3      	adds	r3, r4, r2
 8000cf0:	9902      	ldr	r1, [sp, #8]
 8000cf2:	62a9      	str	r1, [r5, #40]	; 0x28
 8000cf4:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000cf6:	632a      	str	r2, [r5, #48]	; 0x30
 8000cf8:	636b      	str	r3, [r5, #52]	; 0x34
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	42bb      	cmp	r3, r7
 8000cfe:	db1d      	blt.n	8000d3c <__gnu_unwind_pr_common+0x2a8>
 8000d00:	2301      	movs	r3, #1
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	e720      	b.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000d06:	4648      	mov	r0, r9
 8000d08:	210d      	movs	r1, #13
 8000d0a:	f7ff fe57 	bl	80009bc <_Unwind_GetGR>
 8000d0e:	6228      	str	r0, [r5, #32]
 8000d10:	9b06      	ldr	r3, [sp, #24]
 8000d12:	626b      	str	r3, [r5, #36]	; 0x24
 8000d14:	e7e3      	b.n	8000cde <__gnu_unwind_pr_common+0x24a>
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff fc68 	bl	80005ec <selfrel_offset31>
 8000d1c:	3404      	adds	r4, #4
 8000d1e:	4606      	mov	r6, r0
 8000d20:	63ac      	str	r4, [r5, #56]	; 0x38
 8000d22:	4628      	mov	r0, r5
 8000d24:	f3af 8000 	nop.w
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	f43f af1a 	beq.w	8000b62 <__gnu_unwind_pr_common+0xce>
 8000d2e:	4648      	mov	r0, r9
 8000d30:	4632      	mov	r2, r6
 8000d32:	210f      	movs	r1, #15
 8000d34:	f7ff fe68 	bl	8000a08 <_Unwind_SetGR>
 8000d38:	2007      	movs	r0, #7
 8000d3a:	e713      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	3001      	adds	r0, #1
 8000d40:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000d44:	f7ff fc52 	bl	80005ec <selfrel_offset31>
 8000d48:	210f      	movs	r1, #15
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	4648      	mov	r0, r9
 8000d4e:	f7ff fe5b 	bl	8000a08 <_Unwind_SetGR>
 8000d52:	4648      	mov	r0, r9
 8000d54:	462a      	mov	r2, r5
 8000d56:	4639      	mov	r1, r7
 8000d58:	f7ff fe56 	bl	8000a08 <_Unwind_SetGR>
 8000d5c:	2007      	movs	r0, #7
 8000d5e:	e701      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000d60:	00000000 	.word	0x00000000

08000d64 <__aeabi_unwind_cpp_pr0>:
 8000d64:	2300      	movs	r3, #0
 8000d66:	e695      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d68 <__aeabi_unwind_cpp_pr1>:
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e693      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d6c <__aeabi_unwind_cpp_pr2>:
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e691      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d70 <_Unwind_VRS_Pop>:
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	4604      	mov	r4, r0
 8000d74:	b0c5      	sub	sp, #276	; 0x114
 8000d76:	2904      	cmp	r1, #4
 8000d78:	d80d      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000d7a:	e8df f001 	tbb	[pc, r1]
 8000d7e:	0353      	.short	0x0353
 8000d80:	310c      	.short	0x310c
 8000d82:	0f          	.byte	0x0f
 8000d83:	00          	.byte	0x00
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d8a:	b295      	uxth	r5, r2
 8000d8c:	d162      	bne.n	8000e54 <_Unwind_VRS_Pop+0xe4>
 8000d8e:	1972      	adds	r2, r6, r5
 8000d90:	2a10      	cmp	r2, #16
 8000d92:	f240 809b 	bls.w	8000ecc <_Unwind_VRS_Pop+0x15c>
 8000d96:	2002      	movs	r0, #2
 8000d98:	b045      	add	sp, #276	; 0x114
 8000d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1fa      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000da0:	2a10      	cmp	r2, #16
 8000da2:	d8f8      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	06d8      	lsls	r0, r3, #27
 8000da8:	f100 80c6 	bmi.w	8000f38 <_Unwind_VRS_Pop+0x1c8>
 8000dac:	ae22      	add	r6, sp, #136	; 0x88
 8000dae:	4630      	mov	r0, r6
 8000db0:	9201      	str	r2, [sp, #4]
 8000db2:	f000 f973 	bl	800109c <__gnu_Unwind_Save_WMMXC>
 8000db6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000db8:	9a01      	ldr	r2, [sp, #4]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2501      	movs	r5, #1
 8000dbe:	fa05 f103 	lsl.w	r1, r5, r3
 8000dc2:	4211      	tst	r1, r2
 8000dc4:	d003      	beq.n	8000dce <_Unwind_VRS_Pop+0x5e>
 8000dc6:	6801      	ldr	r1, [r0, #0]
 8000dc8:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000dcc:	3004      	adds	r0, #4
 8000dce:	3301      	adds	r3, #1
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d1f4      	bne.n	8000dbe <_Unwind_VRS_Pop+0x4e>
 8000dd4:	63a0      	str	r0, [r4, #56]	; 0x38
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f000 f956 	bl	8001088 <__gnu_Unwind_Restore_WMMXC>
 8000ddc:	2000      	movs	r0, #0
 8000dde:	e7db      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d1d8      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000de4:	0c15      	lsrs	r5, r2, #16
 8000de6:	b297      	uxth	r7, r2
 8000de8:	19eb      	adds	r3, r5, r7
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d8d3      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	071e      	lsls	r6, r3, #28
 8000df2:	f100 80b5 	bmi.w	8000f60 <_Unwind_VRS_Pop+0x1f0>
 8000df6:	ae22      	add	r6, sp, #136	; 0x88
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 f923 	bl	8001044 <__gnu_Unwind_Save_WMMXD>
 8000dfe:	00ed      	lsls	r5, r5, #3
 8000e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e02:	b14f      	cbz	r7, 8000e18 <_Unwind_VRS_Pop+0xa8>
 8000e04:	3d04      	subs	r5, #4
 8000e06:	1971      	adds	r1, r6, r5
 8000e08:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8000e14:	4283      	cmp	r3, r0
 8000e16:	d1f9      	bne.n	8000e0c <_Unwind_VRS_Pop+0x9c>
 8000e18:	4630      	mov	r0, r6
 8000e1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8000e1c:	f000 f8f0 	bl	8001000 <__gnu_Unwind_Restore_WMMXD>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e7b9      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1b6      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e28:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000e2a:	b297      	uxth	r7, r2
 8000e2c:	1d20      	adds	r0, r4, #4
 8000e2e:	2601      	movs	r6, #1
 8000e30:	fa06 f103 	lsl.w	r1, r6, r3
 8000e34:	4239      	tst	r1, r7
 8000e36:	f103 0301 	add.w	r3, r3, #1
 8000e3a:	d002      	beq.n	8000e42 <_Unwind_VRS_Pop+0xd2>
 8000e3c:	6829      	ldr	r1, [r5, #0]
 8000e3e:	6001      	str	r1, [r0, #0]
 8000e40:	3504      	adds	r5, #4
 8000e42:	2b10      	cmp	r3, #16
 8000e44:	f100 0004 	add.w	r0, r0, #4
 8000e48:	d1f2      	bne.n	8000e30 <_Unwind_VRS_Pop+0xc0>
 8000e4a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000e4e:	d13b      	bne.n	8000ec8 <_Unwind_VRS_Pop+0x158>
 8000e50:	63a5      	str	r5, [r4, #56]	; 0x38
 8000e52:	e7a1      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d19e      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e58:	1977      	adds	r7, r6, r5
 8000e5a:	2f20      	cmp	r7, #32
 8000e5c:	d89b      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e5e:	2e0f      	cmp	r6, #15
 8000e60:	d966      	bls.n	8000f30 <_Unwind_VRS_Pop+0x1c0>
 8000e62:	462f      	mov	r7, r5
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d13a      	bne.n	8000ede <_Unwind_VRS_Pop+0x16e>
 8000e68:	462a      	mov	r2, r5
 8000e6a:	2700      	movs	r7, #0
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e70:	dd72      	ble.n	8000f58 <_Unwind_VRS_Pop+0x1e8>
 8000e72:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e76:	4601      	mov	r1, r0
 8000e78:	a844      	add	r0, sp, #272	; 0x110
 8000e7a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e7e:	388c      	subs	r0, #140	; 0x8c
 8000e80:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e84:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e88:	4291      	cmp	r1, r2
 8000e8a:	d1f9      	bne.n	8000e80 <_Unwind_VRS_Pop+0x110>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	b197      	cbz	r7, 8000eb6 <_Unwind_VRS_Pop+0x146>
 8000e90:	2e10      	cmp	r6, #16
 8000e92:	4632      	mov	r2, r6
 8000e94:	a944      	add	r1, sp, #272	; 0x110
 8000e96:	bf38      	it	cc
 8000e98:	2210      	movcc	r2, #16
 8000e9a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e9e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000ea2:	0079      	lsls	r1, r7, #1
 8000ea4:	3a04      	subs	r2, #4
 8000ea6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000eaa:	f850 5b04 	ldr.w	r5, [r0], #4
 8000eae:	f842 5f04 	str.w	r5, [r2, #4]!
 8000eb2:	4288      	cmp	r0, r1
 8000eb4:	d1f9      	bne.n	8000eaa <_Unwind_VRS_Pop+0x13a>
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d048      	beq.n	8000f4c <_Unwind_VRS_Pop+0x1dc>
 8000eba:	2e0f      	cmp	r6, #15
 8000ebc:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ebe:	d933      	bls.n	8000f28 <_Unwind_VRS_Pop+0x1b8>
 8000ec0:	b117      	cbz	r7, 8000ec8 <_Unwind_VRS_Pop+0x158>
 8000ec2:	a802      	add	r0, sp, #8
 8000ec4:	f000 f894 	bl	8000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	e765      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000ecc:	2e0f      	cmp	r6, #15
 8000ece:	f63f af62 	bhi.w	8000d96 <_Unwind_VRS_Pop+0x26>
 8000ed2:	2700      	movs	r7, #0
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	07d1      	lsls	r1, r2, #31
 8000ed8:	d417      	bmi.n	8000f0a <_Unwind_VRS_Pop+0x19a>
 8000eda:	2f00      	cmp	r7, #0
 8000edc:	d060      	beq.n	8000fa0 <_Unwind_VRS_Pop+0x230>
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	0751      	lsls	r1, r2, #29
 8000ee2:	d445      	bmi.n	8000f70 <_Unwind_VRS_Pop+0x200>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d04d      	beq.n	8000f84 <_Unwind_VRS_Pop+0x214>
 8000ee8:	2e0f      	cmp	r6, #15
 8000eea:	d806      	bhi.n	8000efa <_Unwind_VRS_Pop+0x18a>
 8000eec:	a822      	add	r0, sp, #136	; 0x88
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	f000 f87a 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D>
 8000ef4:	9b01      	ldr	r3, [sp, #4]
 8000ef6:	2f00      	cmp	r7, #0
 8000ef8:	d0b6      	beq.n	8000e68 <_Unwind_VRS_Pop+0xf8>
 8000efa:	a802      	add	r0, sp, #8
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	f000 f87b 	bl	8000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f02:	9b01      	ldr	r3, [sp, #4]
 8000f04:	f1c6 0210 	rsb	r2, r6, #16
 8000f08:	e7b0      	b.n	8000e6c <_Unwind_VRS_Pop+0xfc>
 8000f0a:	f022 0101 	bic.w	r1, r2, #1
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	6021      	str	r1, [r4, #0]
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	4620      	mov	r0, r4
 8000f16:	d03b      	beq.n	8000f90 <_Unwind_VRS_Pop+0x220>
 8000f18:	f022 0203 	bic.w	r2, r2, #3
 8000f1c:	f840 2b48 	str.w	r2, [r0], #72
 8000f20:	f000 f85a 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000f24:	9b01      	ldr	r3, [sp, #4]
 8000f26:	e7d8      	b.n	8000eda <_Unwind_VRS_Pop+0x16a>
 8000f28:	a822      	add	r0, sp, #136	; 0x88
 8000f2a:	f000 f859 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D>
 8000f2e:	e7c7      	b.n	8000ec0 <_Unwind_VRS_Pop+0x150>
 8000f30:	2f10      	cmp	r7, #16
 8000f32:	d9ce      	bls.n	8000ed2 <_Unwind_VRS_Pop+0x162>
 8000f34:	3f10      	subs	r7, #16
 8000f36:	e7cd      	b.n	8000ed4 <_Unwind_VRS_Pop+0x164>
 8000f38:	f023 0310 	bic.w	r3, r3, #16
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000f42:	9201      	str	r2, [sp, #4]
 8000f44:	f000 f8aa 	bl	800109c <__gnu_Unwind_Save_WMMXC>
 8000f48:	9a01      	ldr	r2, [sp, #4]
 8000f4a:	e72f      	b.n	8000dac <_Unwind_VRS_Pop+0x3c>
 8000f4c:	3104      	adds	r1, #4
 8000f4e:	63a1      	str	r1, [r4, #56]	; 0x38
 8000f50:	a822      	add	r0, sp, #136	; 0x88
 8000f52:	f000 f83d 	bl	8000fd0 <__gnu_Unwind_Restore_VFP>
 8000f56:	e7b7      	b.n	8000ec8 <_Unwind_VRS_Pop+0x158>
 8000f58:	2f00      	cmp	r7, #0
 8000f5a:	d199      	bne.n	8000e90 <_Unwind_VRS_Pop+0x120>
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	e7aa      	b.n	8000eb6 <_Unwind_VRS_Pop+0x146>
 8000f60:	f023 0308 	bic.w	r3, r3, #8
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000f6a:	f000 f86b 	bl	8001044 <__gnu_Unwind_Save_WMMXD>
 8000f6e:	e742      	b.n	8000df6 <_Unwind_VRS_Pop+0x86>
 8000f70:	4620      	mov	r0, r4
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	f840 2bd0 	str.w	r2, [r0], #208
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f000 f83c 	bl	8000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	e7af      	b.n	8000ee4 <_Unwind_VRS_Pop+0x174>
 8000f84:	a822      	add	r0, sp, #136	; 0x88
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	f000 f826 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000f8c:	9b01      	ldr	r3, [sp, #4]
 8000f8e:	e7b9      	b.n	8000f04 <_Unwind_VRS_Pop+0x194>
 8000f90:	f041 0102 	orr.w	r1, r1, #2
 8000f94:	f840 1b48 	str.w	r1, [r0], #72
 8000f98:	f000 f826 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D>
 8000f9c:	9b01      	ldr	r3, [sp, #4]
 8000f9e:	e79c      	b.n	8000eda <_Unwind_VRS_Pop+0x16a>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d003      	beq.n	8000fac <_Unwind_VRS_Pop+0x23c>
 8000fa4:	2e0f      	cmp	r6, #15
 8000fa6:	f63f af5f 	bhi.w	8000e68 <_Unwind_VRS_Pop+0xf8>
 8000faa:	e79f      	b.n	8000eec <_Unwind_VRS_Pop+0x17c>
 8000fac:	a822      	add	r0, sp, #136	; 0x88
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f000 f812 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000fb4:	9b01      	ldr	r3, [sp, #4]
 8000fb6:	e757      	b.n	8000e68 <_Unwind_VRS_Pop+0xf8>

08000fb8 <__restore_core_regs>:
 8000fb8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000fbc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	46a6      	mov	lr, r4
 8000fc4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fc8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fcc:	46e5      	mov	sp, ip
 8000fce:	bd00      	pop	{pc}

08000fd0 <__gnu_Unwind_Restore_VFP>:
 8000fd0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Save_VFP>:
 8000fd8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__gnu_Unwind_Restore_VFP_D>:
 8000fe0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_VFP_D>:
 8000fe8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ff0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000ff8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <__gnu_Unwind_Restore_WMMXD>:
 8001000:	ecf0 0102 	ldfe	f0, [r0], #8
 8001004:	ecf0 1102 	ldfe	f1, [r0], #8
 8001008:	ecf0 2102 	ldfe	f2, [r0], #8
 800100c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001010:	ecf0 4102 	ldfe	f4, [r0], #8
 8001014:	ecf0 5102 	ldfe	f5, [r0], #8
 8001018:	ecf0 6102 	ldfe	f6, [r0], #8
 800101c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001020:	ecf0 8102 	ldfp	f0, [r0], #8
 8001024:	ecf0 9102 	ldfp	f1, [r0], #8
 8001028:	ecf0 a102 	ldfp	f2, [r0], #8
 800102c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001030:	ecf0 c102 	ldfp	f4, [r0], #8
 8001034:	ecf0 d102 	ldfp	f5, [r0], #8
 8001038:	ecf0 e102 	ldfp	f6, [r0], #8
 800103c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__gnu_Unwind_Save_WMMXD>:
 8001044:	ece0 0102 	stfe	f0, [r0], #8
 8001048:	ece0 1102 	stfe	f1, [r0], #8
 800104c:	ece0 2102 	stfe	f2, [r0], #8
 8001050:	ece0 3102 	stfe	f3, [r0], #8
 8001054:	ece0 4102 	stfe	f4, [r0], #8
 8001058:	ece0 5102 	stfe	f5, [r0], #8
 800105c:	ece0 6102 	stfe	f6, [r0], #8
 8001060:	ece0 7102 	stfe	f7, [r0], #8
 8001064:	ece0 8102 	stfp	f0, [r0], #8
 8001068:	ece0 9102 	stfp	f1, [r0], #8
 800106c:	ece0 a102 	stfp	f2, [r0], #8
 8001070:	ece0 b102 	stfp	f3, [r0], #8
 8001074:	ece0 c102 	stfp	f4, [r0], #8
 8001078:	ece0 d102 	stfp	f5, [r0], #8
 800107c:	ece0 e102 	stfp	f6, [r0], #8
 8001080:	ece0 f102 	stfp	f7, [r0], #8
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <__gnu_Unwind_Restore_WMMXC>:
 8001088:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800108c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001090:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001094:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__gnu_Unwind_Save_WMMXC>:
 800109c:	fca0 8101 	stc2	1, cr8, [r0], #4
 80010a0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80010a4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80010a8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <_Unwind_RaiseException>:
 80010b0:	46ec      	mov	ip, sp
 80010b2:	b500      	push	{lr}
 80010b4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010c4:	a901      	add	r1, sp, #4
 80010c6:	f7ff fbf3 	bl	80008b0 <__gnu_Unwind_RaiseException>
 80010ca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ce:	b012      	add	sp, #72	; 0x48
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <_Unwind_Resume>:
 80010d4:	46ec      	mov	ip, sp
 80010d6:	b500      	push	{lr}
 80010d8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e8:	a901      	add	r1, sp, #4
 80010ea:	f7ff fc1b 	bl	8000924 <__gnu_Unwind_Resume>
 80010ee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010f2:	b012      	add	sp, #72	; 0x48
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <_Unwind_Resume_or_Rethrow>:
 80010f8:	46ec      	mov	ip, sp
 80010fa:	b500      	push	{lr}
 80010fc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001100:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e92d 000c 	stmdb	sp!, {r2, r3}
 800110c:	a901      	add	r1, sp, #4
 800110e:	f7ff fc2b 	bl	8000968 <__gnu_Unwind_Resume_or_Rethrow>
 8001112:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001116:	b012      	add	sp, #72	; 0x48
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <_Unwind_ForcedUnwind>:
 800111c:	46ec      	mov	ip, sp
 800111e:	b500      	push	{lr}
 8001120:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001124:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001130:	ab01      	add	r3, sp, #4
 8001132:	f7ff fbed 	bl	8000910 <__gnu_Unwind_ForcedUnwind>
 8001136:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800113a:	b012      	add	sp, #72	; 0x48
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <_Unwind_Backtrace>:
 8001140:	46ec      	mov	ip, sp
 8001142:	b500      	push	{lr}
 8001144:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001148:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001154:	aa01      	add	r2, sp, #4
 8001156:	f7ff fc65 	bl	8000a24 <__gnu_Unwind_Backtrace>
 800115a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800115e:	b012      	add	sp, #72	; 0x48
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <next_unwind_byte>:
 8001164:	7a02      	ldrb	r2, [r0, #8]
 8001166:	b91a      	cbnz	r2, 8001170 <next_unwind_byte+0xc>
 8001168:	7a43      	ldrb	r3, [r0, #9]
 800116a:	b943      	cbnz	r3, 800117e <next_unwind_byte+0x1a>
 800116c:	20b0      	movs	r0, #176	; 0xb0
 800116e:	4770      	bx	lr
 8001170:	6803      	ldr	r3, [r0, #0]
 8001172:	3a01      	subs	r2, #1
 8001174:	7202      	strb	r2, [r0, #8]
 8001176:	021a      	lsls	r2, r3, #8
 8001178:	6002      	str	r2, [r0, #0]
 800117a:	0e18      	lsrs	r0, r3, #24
 800117c:	4770      	bx	lr
 800117e:	6842      	ldr	r2, [r0, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	b410      	push	{r4}
 8001184:	7243      	strb	r3, [r0, #9]
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	2103      	movs	r1, #3
 800118a:	1d14      	adds	r4, r2, #4
 800118c:	7201      	strb	r1, [r0, #8]
 800118e:	021a      	lsls	r2, r3, #8
 8001190:	6044      	str	r4, [r0, #4]
 8001192:	6002      	str	r2, [r0, #0]
 8001194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001198:	0e18      	lsrs	r0, r3, #24
 800119a:	4770      	bx	lr

0800119c <_Unwind_GetGR.constprop.0>:
 800119c:	b500      	push	{lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	aa03      	add	r2, sp, #12
 80011a2:	2300      	movs	r3, #0
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	220c      	movs	r2, #12
 80011aa:	f7ff fbed 	bl	8000988 <_Unwind_VRS_Get>
 80011ae:	9803      	ldr	r0, [sp, #12]
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop

080011b8 <unwind_UCB_from_context>:
 80011b8:	e7f0      	b.n	800119c <_Unwind_GetGR.constprop.0>
 80011ba:	bf00      	nop

080011bc <__gnu_unwind_execute>:
 80011bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c0:	4606      	mov	r6, r0
 80011c2:	b085      	sub	sp, #20
 80011c4:	460f      	mov	r7, r1
 80011c6:	f04f 0800 	mov.w	r8, #0
 80011ca:	4638      	mov	r0, r7
 80011cc:	f7ff ffca 	bl	8001164 <next_unwind_byte>
 80011d0:	28b0      	cmp	r0, #176	; 0xb0
 80011d2:	4604      	mov	r4, r0
 80011d4:	d023      	beq.n	800121e <__gnu_unwind_execute+0x62>
 80011d6:	0605      	lsls	r5, r0, #24
 80011d8:	d427      	bmi.n	800122a <__gnu_unwind_execute+0x6e>
 80011da:	2300      	movs	r3, #0
 80011dc:	f10d 090c 	add.w	r9, sp, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	0085      	lsls	r5, r0, #2
 80011e4:	220d      	movs	r2, #13
 80011e6:	f8cd 9000 	str.w	r9, [sp]
 80011ea:	4630      	mov	r0, r6
 80011ec:	f7ff fbcc 	bl	8000988 <_Unwind_VRS_Get>
 80011f0:	b2ed      	uxtb	r5, r5
 80011f2:	9b03      	ldr	r3, [sp, #12]
 80011f4:	f8cd 9000 	str.w	r9, [sp]
 80011f8:	0660      	lsls	r0, r4, #25
 80011fa:	f105 0504 	add.w	r5, r5, #4
 80011fe:	bf4c      	ite	mi
 8001200:	1b5d      	submi	r5, r3, r5
 8001202:	18ed      	addpl	r5, r5, r3
 8001204:	2300      	movs	r3, #0
 8001206:	4619      	mov	r1, r3
 8001208:	220d      	movs	r2, #13
 800120a:	4630      	mov	r0, r6
 800120c:	9503      	str	r5, [sp, #12]
 800120e:	f7ff fbe1 	bl	80009d4 <_Unwind_VRS_Set>
 8001212:	4638      	mov	r0, r7
 8001214:	f7ff ffa6 	bl	8001164 <next_unwind_byte>
 8001218:	28b0      	cmp	r0, #176	; 0xb0
 800121a:	4604      	mov	r4, r0
 800121c:	d1db      	bne.n	80011d6 <__gnu_unwind_execute+0x1a>
 800121e:	f1b8 0f00 	cmp.w	r8, #0
 8001222:	f000 8095 	beq.w	8001350 <__gnu_unwind_execute+0x194>
 8001226:	2000      	movs	r0, #0
 8001228:	e01c      	b.n	8001264 <__gnu_unwind_execute+0xa8>
 800122a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800122e:	2b80      	cmp	r3, #128	; 0x80
 8001230:	d05d      	beq.n	80012ee <__gnu_unwind_execute+0x132>
 8001232:	2b90      	cmp	r3, #144	; 0x90
 8001234:	d019      	beq.n	800126a <__gnu_unwind_execute+0xae>
 8001236:	2ba0      	cmp	r3, #160	; 0xa0
 8001238:	d02c      	beq.n	8001294 <__gnu_unwind_execute+0xd8>
 800123a:	2bb0      	cmp	r3, #176	; 0xb0
 800123c:	d03f      	beq.n	80012be <__gnu_unwind_execute+0x102>
 800123e:	2bc0      	cmp	r3, #192	; 0xc0
 8001240:	d06c      	beq.n	800131c <__gnu_unwind_execute+0x160>
 8001242:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001246:	2bd0      	cmp	r3, #208	; 0xd0
 8001248:	d10b      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 800124a:	f000 0207 	and.w	r2, r0, #7
 800124e:	3201      	adds	r2, #1
 8001250:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001254:	2305      	movs	r3, #5
 8001256:	2101      	movs	r1, #1
 8001258:	4630      	mov	r0, r6
 800125a:	f7ff fd89 	bl	8000d70 <_Unwind_VRS_Pop>
 800125e:	2800      	cmp	r0, #0
 8001260:	d0b3      	beq.n	80011ca <__gnu_unwind_execute+0xe>
 8001262:	2009      	movs	r0, #9
 8001264:	b005      	add	sp, #20
 8001266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800126a:	f000 030d 	and.w	r3, r0, #13
 800126e:	2b0d      	cmp	r3, #13
 8001270:	d0f7      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 8001272:	ad03      	add	r5, sp, #12
 8001274:	2300      	movs	r3, #0
 8001276:	f000 020f 	and.w	r2, r0, #15
 800127a:	4619      	mov	r1, r3
 800127c:	9500      	str	r5, [sp, #0]
 800127e:	4630      	mov	r0, r6
 8001280:	f7ff fb82 	bl	8000988 <_Unwind_VRS_Get>
 8001284:	2300      	movs	r3, #0
 8001286:	9500      	str	r5, [sp, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	220d      	movs	r2, #13
 800128c:	4630      	mov	r0, r6
 800128e:	f7ff fba1 	bl	80009d4 <_Unwind_VRS_Set>
 8001292:	e79a      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001294:	43c2      	mvns	r2, r0
 8001296:	f002 0307 	and.w	r3, r2, #7
 800129a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800129e:	411a      	asrs	r2, r3
 80012a0:	0701      	lsls	r1, r0, #28
 80012a2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	bf48      	it	mi
 80012ac:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80012b0:	4619      	mov	r1, r3
 80012b2:	4630      	mov	r0, r6
 80012b4:	f7ff fd5c 	bl	8000d70 <_Unwind_VRS_Pop>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d1d2      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 80012bc:	e785      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80012be:	28b1      	cmp	r0, #177	; 0xb1
 80012c0:	d057      	beq.n	8001372 <__gnu_unwind_execute+0x1b6>
 80012c2:	28b2      	cmp	r0, #178	; 0xb2
 80012c4:	d068      	beq.n	8001398 <__gnu_unwind_execute+0x1dc>
 80012c6:	28b3      	cmp	r0, #179	; 0xb3
 80012c8:	f000 8095 	beq.w	80013f6 <__gnu_unwind_execute+0x23a>
 80012cc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80012d0:	2bb4      	cmp	r3, #180	; 0xb4
 80012d2:	d0c6      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 80012d4:	f000 0207 	and.w	r2, r0, #7
 80012d8:	3201      	adds	r2, #1
 80012da:	2301      	movs	r3, #1
 80012dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012e0:	4619      	mov	r1, r3
 80012e2:	4630      	mov	r0, r6
 80012e4:	f7ff fd44 	bl	8000d70 <_Unwind_VRS_Pop>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d1ba      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 80012ec:	e76d      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80012ee:	4638      	mov	r0, r7
 80012f0:	f7ff ff38 	bl	8001164 <next_unwind_byte>
 80012f4:	0224      	lsls	r4, r4, #8
 80012f6:	4304      	orrs	r4, r0
 80012f8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80012fc:	d0b1      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 80012fe:	0124      	lsls	r4, r4, #4
 8001300:	2300      	movs	r3, #0
 8001302:	b2a2      	uxth	r2, r4
 8001304:	4619      	mov	r1, r3
 8001306:	4630      	mov	r0, r6
 8001308:	f7ff fd32 	bl	8000d70 <_Unwind_VRS_Pop>
 800130c:	2800      	cmp	r0, #0
 800130e:	d1a8      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 8001310:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001314:	bf18      	it	ne
 8001316:	f04f 0801 	movne.w	r8, #1
 800131a:	e756      	b.n	80011ca <__gnu_unwind_execute+0xe>
 800131c:	28c6      	cmp	r0, #198	; 0xc6
 800131e:	d07d      	beq.n	800141c <__gnu_unwind_execute+0x260>
 8001320:	28c7      	cmp	r0, #199	; 0xc7
 8001322:	f000 8086 	beq.w	8001432 <__gnu_unwind_execute+0x276>
 8001326:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800132a:	2bc0      	cmp	r3, #192	; 0xc0
 800132c:	f000 8094 	beq.w	8001458 <__gnu_unwind_execute+0x29c>
 8001330:	28c8      	cmp	r0, #200	; 0xc8
 8001332:	f000 809f 	beq.w	8001474 <__gnu_unwind_execute+0x2b8>
 8001336:	28c9      	cmp	r0, #201	; 0xc9
 8001338:	d193      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 800133a:	4638      	mov	r0, r7
 800133c:	f7ff ff12 	bl	8001164 <next_unwind_byte>
 8001340:	0302      	lsls	r2, r0, #12
 8001342:	f000 000f 	and.w	r0, r0, #15
 8001346:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800134a:	3001      	adds	r0, #1
 800134c:	4302      	orrs	r2, r0
 800134e:	e781      	b.n	8001254 <__gnu_unwind_execute+0x98>
 8001350:	ac03      	add	r4, sp, #12
 8001352:	4643      	mov	r3, r8
 8001354:	220e      	movs	r2, #14
 8001356:	4641      	mov	r1, r8
 8001358:	9400      	str	r4, [sp, #0]
 800135a:	4630      	mov	r0, r6
 800135c:	f7ff fb14 	bl	8000988 <_Unwind_VRS_Get>
 8001360:	9400      	str	r4, [sp, #0]
 8001362:	4630      	mov	r0, r6
 8001364:	4643      	mov	r3, r8
 8001366:	220f      	movs	r2, #15
 8001368:	4641      	mov	r1, r8
 800136a:	f7ff fb33 	bl	80009d4 <_Unwind_VRS_Set>
 800136e:	4640      	mov	r0, r8
 8001370:	e778      	b.n	8001264 <__gnu_unwind_execute+0xa8>
 8001372:	4638      	mov	r0, r7
 8001374:	f7ff fef6 	bl	8001164 <next_unwind_byte>
 8001378:	2800      	cmp	r0, #0
 800137a:	f43f af72 	beq.w	8001262 <__gnu_unwind_execute+0xa6>
 800137e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001382:	f47f af6e 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001386:	4602      	mov	r2, r0
 8001388:	4619      	mov	r1, r3
 800138a:	4630      	mov	r0, r6
 800138c:	f7ff fcf0 	bl	8000d70 <_Unwind_VRS_Pop>
 8001390:	2800      	cmp	r0, #0
 8001392:	f47f af66 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001396:	e718      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001398:	2300      	movs	r3, #0
 800139a:	f10d 090c 	add.w	r9, sp, #12
 800139e:	220d      	movs	r2, #13
 80013a0:	4619      	mov	r1, r3
 80013a2:	f8cd 9000 	str.w	r9, [sp]
 80013a6:	4630      	mov	r0, r6
 80013a8:	f7ff faee 	bl	8000988 <_Unwind_VRS_Get>
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff fed9 	bl	8001164 <next_unwind_byte>
 80013b2:	0602      	lsls	r2, r0, #24
 80013b4:	f04f 0402 	mov.w	r4, #2
 80013b8:	d50c      	bpl.n	80013d4 <__gnu_unwind_execute+0x218>
 80013ba:	9b03      	ldr	r3, [sp, #12]
 80013bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80013c0:	40a0      	lsls	r0, r4
 80013c2:	4403      	add	r3, r0
 80013c4:	4638      	mov	r0, r7
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	f7ff fecc 	bl	8001164 <next_unwind_byte>
 80013cc:	0603      	lsls	r3, r0, #24
 80013ce:	f104 0407 	add.w	r4, r4, #7
 80013d2:	d4f2      	bmi.n	80013ba <__gnu_unwind_execute+0x1fe>
 80013d4:	9b03      	ldr	r3, [sp, #12]
 80013d6:	f8cd 9000 	str.w	r9, [sp]
 80013da:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80013de:	40a2      	lsls	r2, r4
 80013e0:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80013e4:	2300      	movs	r3, #0
 80013e6:	4414      	add	r4, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	220d      	movs	r2, #13
 80013ec:	4630      	mov	r0, r6
 80013ee:	9403      	str	r4, [sp, #12]
 80013f0:	f7ff faf0 	bl	80009d4 <_Unwind_VRS_Set>
 80013f4:	e6e9      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80013f6:	4638      	mov	r0, r7
 80013f8:	f7ff feb4 	bl	8001164 <next_unwind_byte>
 80013fc:	0301      	lsls	r1, r0, #12
 80013fe:	f000 000f 	and.w	r0, r0, #15
 8001402:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001406:	1c42      	adds	r2, r0, #1
 8001408:	2301      	movs	r3, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	4630      	mov	r0, r6
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fcae 	bl	8000d70 <_Unwind_VRS_Pop>
 8001414:	2800      	cmp	r0, #0
 8001416:	f47f af24 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 800141a:	e6d6      	b.n	80011ca <__gnu_unwind_execute+0xe>
 800141c:	4638      	mov	r0, r7
 800141e:	f7ff fea1 	bl	8001164 <next_unwind_byte>
 8001422:	0301      	lsls	r1, r0, #12
 8001424:	f000 000f 	and.w	r0, r0, #15
 8001428:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800142c:	1c42      	adds	r2, r0, #1
 800142e:	2303      	movs	r3, #3
 8001430:	e7eb      	b.n	800140a <__gnu_unwind_execute+0x24e>
 8001432:	4638      	mov	r0, r7
 8001434:	f7ff fe96 	bl	8001164 <next_unwind_byte>
 8001438:	2800      	cmp	r0, #0
 800143a:	f43f af12 	beq.w	8001262 <__gnu_unwind_execute+0xa6>
 800143e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001442:	f47f af0e 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001446:	4602      	mov	r2, r0
 8001448:	2104      	movs	r1, #4
 800144a:	4630      	mov	r0, r6
 800144c:	f7ff fc90 	bl	8000d70 <_Unwind_VRS_Pop>
 8001450:	2800      	cmp	r0, #0
 8001452:	f47f af06 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001456:	e6b8      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001458:	f000 020f 	and.w	r2, r0, #15
 800145c:	3201      	adds	r2, #1
 800145e:	2303      	movs	r3, #3
 8001460:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001464:	4619      	mov	r1, r3
 8001466:	4630      	mov	r0, r6
 8001468:	f7ff fc82 	bl	8000d70 <_Unwind_VRS_Pop>
 800146c:	2800      	cmp	r0, #0
 800146e:	f47f aef8 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001472:	e6aa      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001474:	4638      	mov	r0, r7
 8001476:	f7ff fe75 	bl	8001164 <next_unwind_byte>
 800147a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800147e:	f000 030f 	and.w	r3, r0, #15
 8001482:	3210      	adds	r2, #16
 8001484:	3301      	adds	r3, #1
 8001486:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800148a:	e6e3      	b.n	8001254 <__gnu_unwind_execute+0x98>

0800148c <__gnu_unwind_frame>:
 800148c:	b510      	push	{r4, lr}
 800148e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001490:	b084      	sub	sp, #16
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	2003      	movs	r0, #3
 8001496:	f88d 000c 	strb.w	r0, [sp, #12]
 800149a:	79dc      	ldrb	r4, [r3, #7]
 800149c:	f88d 400d 	strb.w	r4, [sp, #13]
 80014a0:	0212      	lsls	r2, r2, #8
 80014a2:	3308      	adds	r3, #8
 80014a4:	4608      	mov	r0, r1
 80014a6:	a901      	add	r1, sp, #4
 80014a8:	9201      	str	r2, [sp, #4]
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	f7ff fe86 	bl	80011bc <__gnu_unwind_execute>
 80014b0:	b004      	add	sp, #16
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <_Unwind_GetRegionStart>:
 80014b4:	b508      	push	{r3, lr}
 80014b6:	f7ff fe7f 	bl	80011b8 <unwind_UCB_from_context>
 80014ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop

080014c0 <_Unwind_GetLanguageSpecificData>:
 80014c0:	b508      	push	{r3, lr}
 80014c2:	f7ff fe79 	bl	80011b8 <unwind_UCB_from_context>
 80014c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80014c8:	79c3      	ldrb	r3, [r0, #7]
 80014ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014ce:	3008      	adds	r0, #8
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop

080014d4 <_Unwind_GetTextRelBase>:
 80014d4:	b508      	push	{r3, lr}
 80014d6:	f006 fe76 	bl	80081c6 <abort>
 80014da:	bf00      	nop

080014dc <_Unwind_GetDataRelBase>:
 80014dc:	b508      	push	{r3, lr}
 80014de:	f7ff fff9 	bl	80014d4 <_Unwind_GetTextRelBase>
 80014e2:	bf00      	nop

080014e4 <__aeabi_idiv0>:
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ee:	e003      	b.n	80014f8 <LoopCopyDataInit>

080014f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014f6:	3104      	adds	r1, #4

080014f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001500:	d3f6      	bcc.n	80014f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001504:	e002      	b.n	800150c <LoopFillZerobss>

08001506 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001506:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001508:	f842 3b04 	str.w	r3, [r2], #4

0800150c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001510:	d3f9      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001512:	f001 f9dd 	bl	80028d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f006 fe27 	bl	8008168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f000 faab 	bl	8001a74 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001524:	0800856c 	.word	0x0800856c
  ldr  r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800152c:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 8001530:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 8001534:	200045d8 	.word	0x200045d8

08001538 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC3_IRQHandler>
	...

0800153c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800153c:	b500      	push	{lr}
 800153e:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001540:	4822      	ldr	r0, [pc, #136]	; (80015cc <MX_ADC1_Init+0x90>)
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <MX_ADC1_Init+0x94>)
 8001544:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8001546:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800154a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800154c:	2300      	movs	r3, #0
 800154e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001550:	60c3      	str	r3, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001552:	2204      	movs	r2, #4
 8001554:	6102      	str	r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001556:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001558:	7543      	strb	r3, [r0, #21]
  hadc1.Init.NbrOfConversion = 1;
 800155a:	2201      	movs	r2, #1
 800155c:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155e:	7703      	strb	r3, [r0, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001560:	6202      	str	r2, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001562:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001564:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001566:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001568:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800156a:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.BoostMode = ENABLE;
 800156c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001570:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001574:	f001 fa02 	bl	800297c <HAL_ADC_Init>
 8001578:	b9c0      	cbnz	r0, 80015ac <MX_ADC1_Init+0x70>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800157a:	a90a      	add	r1, sp, #40	; 0x28
 800157c:	2300      	movs	r3, #0
 800157e:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001582:	4812      	ldr	r0, [pc, #72]	; (80015cc <MX_ADC1_Init+0x90>)
 8001584:	f001 fe8a 	bl	800329c <HAL_ADCEx_MultiModeConfigChannel>
 8001588:	b9a8      	cbnz	r0, 80015b6 <MX_ADC1_Init+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 800158a:	2303      	movs	r3, #3
 800158c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800158e:	2301      	movs	r3, #1
 8001590:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001592:	2300      	movs	r3, #0
 8001594:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001596:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001598:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800159a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	4669      	mov	r1, sp
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <MX_ADC1_Init+0x90>)
 80015a0:	f001 fb6e 	bl	8002c80 <HAL_ADC_ConfigChannel>
 80015a4:	b960      	cbnz	r0, 80015c0 <MX_ADC1_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80015a6:	b00b      	add	sp, #44	; 0x2c
 80015a8:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80015ac:	2158      	movs	r1, #88	; 0x58
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <MX_ADC1_Init+0x98>)
 80015b0:	f000 f9ce 	bl	8001950 <_Error_Handler>
 80015b4:	e7e1      	b.n	800157a <MX_ADC1_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 80015b6:	2160      	movs	r1, #96	; 0x60
 80015b8:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_ADC1_Init+0x98>)
 80015ba:	f000 f9c9 	bl	8001950 <_Error_Handler>
 80015be:	e7e4      	b.n	800158a <MX_ADC1_Init+0x4e>
    _Error_Handler(__FILE__, __LINE__);
 80015c0:	216d      	movs	r1, #109	; 0x6d
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_ADC1_Init+0x98>)
 80015c4:	f000 f9c4 	bl	8001950 <_Error_Handler>
}
 80015c8:	e7ed      	b.n	80015a6 <MX_ADC1_Init+0x6a>
 80015ca:	bf00      	nop
 80015cc:	20003e74 	.word	0x20003e74
 80015d0:	40022000 	.word	0x40022000
 80015d4:	08008358 	.word	0x08008358

080015d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80015d8:	6802      	ldr	r2, [r0, #0]
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_ADC_MspInit+0x44>)
 80015dc:	429a      	cmp	r2, r3
 80015de:	d000      	beq.n	80015e2 <HAL_ADC_MspInit+0xa>
 80015e0:	4770      	bx	lr
{
 80015e2:	b500      	push	{lr}
 80015e4:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_ADC_MspInit+0x48>)
 80015e8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80015ec:	f042 0220 	orr.w	r2, r2, #32
 80015f0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80015f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_INP3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	a901      	add	r1, sp, #4
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_ADC_MspInit+0x4c>)
 8001610:	f002 faf4 	bl	8003bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001614:	b007      	add	sp, #28
 8001616:	f85d fb04 	ldr.w	pc, [sp], #4
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000
 8001620:	58024400 	.word	0x58024400
 8001624:	58020000 	.word	0x58020000

08001628 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001628:	b500      	push	{lr}
 800162a:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_DMA_Init+0x74>)
 800162e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800163a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2105      	movs	r1, #5
 800164a:	200b      	movs	r0, #11
 800164c:	f001 fed8 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001650:	200b      	movs	r0, #11
 8001652:	f001 ff05 	bl	8003460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	200c      	movs	r0, #12
 800165c:	f001 fed0 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001660:	200c      	movs	r0, #12
 8001662:	f001 fefd 	bl	8003460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	200d      	movs	r0, #13
 800166c:	f001 fec8 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001670:	200d      	movs	r0, #13
 8001672:	f001 fef5 	bl	8003460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	200e      	movs	r0, #14
 800167c:	f001 fec0 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001680:	200e      	movs	r0, #14
 8001682:	f001 feed 	bl	8003460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2105      	movs	r1, #5
 800168a:	2010      	movs	r0, #16
 800168c:	f001 feb8 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001690:	2010      	movs	r0, #16
 8001692:	f001 fee5 	bl	8003460 <HAL_NVIC_EnableIRQ>

}
 8001696:	b003      	add	sp, #12
 8001698:	f85d fb04 	ldr.w	pc, [sp], #4
 800169c:	58024400 	.word	0x58024400

080016a0 <StartidleTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartidleTask function */
void StartidleTask(void const * argument)
{
 80016a0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartidleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f005 fae1 	bl	8006c6a <osDelay>
 80016a8:	e7fb      	b.n	80016a2 <StartidleTask+0x2>
	...

080016ac <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	b0ba      	sub	sp, #232	; 0xe8
  osThreadDef(idleTask, StartidleTask, osPriorityIdle, 0, 128);
 80016b0:	4c5c      	ldr	r4, [pc, #368]	; (8001824 <MX_FREERTOS_Init+0x178>)
 80016b2:	ad35      	add	r5, sp, #212	; 0xd4
 80016b4:	4626      	mov	r6, r4
 80016b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ba:	6833      	ldr	r3, [r6, #0]
 80016bc:	602b      	str	r3, [r5, #0]
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 80016be:	2100      	movs	r1, #0
 80016c0:	a835      	add	r0, sp, #212	; 0xd4
 80016c2:	f005 fab8 	bl	8006c36 <osThreadCreate>
 80016c6:	4b58      	ldr	r3, [pc, #352]	; (8001828 <MX_FREERTOS_Init+0x17c>)
 80016c8:	6018      	str	r0, [r3, #0]
  osThreadDef(LED1Task, StartLED1Task, osPriorityIdle, 0, 128);
 80016ca:	ad30      	add	r5, sp, #192	; 0xc0
 80016cc:	f104 0614 	add.w	r6, r4, #20
 80016d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	6833      	ldr	r3, [r6, #0]
 80016d6:	602b      	str	r3, [r5, #0]
  LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 80016d8:	2100      	movs	r1, #0
 80016da:	a830      	add	r0, sp, #192	; 0xc0
 80016dc:	f005 faab 	bl	8006c36 <osThreadCreate>
 80016e0:	4b52      	ldr	r3, [pc, #328]	; (800182c <MX_FREERTOS_Init+0x180>)
 80016e2:	6018      	str	r0, [r3, #0]
  osThreadDef(LED2Task, StartLED2Task, osPriorityIdle, 0, 128);
 80016e4:	ad2b      	add	r5, sp, #172	; 0xac
 80016e6:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80016ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ee:	6833      	ldr	r3, [r6, #0]
 80016f0:	602b      	str	r3, [r5, #0]
  LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 80016f2:	2100      	movs	r1, #0
 80016f4:	a82b      	add	r0, sp, #172	; 0xac
 80016f6:	f005 fa9e 	bl	8006c36 <osThreadCreate>
 80016fa:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <MX_FREERTOS_Init+0x184>)
 80016fc:	6018      	str	r0, [r3, #0]
  osThreadDef(J1uartport, StartJ1uartport, osPriorityLow, 0, 128);
 80016fe:	ad26      	add	r5, sp, #152	; 0x98
 8001700:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8001704:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	6833      	ldr	r3, [r6, #0]
 800170a:	602b      	str	r3, [r5, #0]
  J1uartportHandle = osThreadCreate(osThread(J1uartport), NULL);
 800170c:	2100      	movs	r1, #0
 800170e:	a826      	add	r0, sp, #152	; 0x98
 8001710:	f005 fa91 	bl	8006c36 <osThreadCreate>
 8001714:	4b47      	ldr	r3, [pc, #284]	; (8001834 <MX_FREERTOS_Init+0x188>)
 8001716:	6018      	str	r0, [r3, #0]
  osThreadDef(J2uartport, StartJ2uartport, osPriorityIdle, 0, 128);
 8001718:	ad21      	add	r5, sp, #132	; 0x84
 800171a:	f104 0650 	add.w	r6, r4, #80	; 0x50
 800171e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001722:	6833      	ldr	r3, [r6, #0]
 8001724:	602b      	str	r3, [r5, #0]
  J2uartportHandle = osThreadCreate(osThread(J2uartport), NULL);
 8001726:	2100      	movs	r1, #0
 8001728:	a821      	add	r0, sp, #132	; 0x84
 800172a:	f005 fa84 	bl	8006c36 <osThreadCreate>
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <MX_FREERTOS_Init+0x18c>)
 8001730:	6018      	str	r0, [r3, #0]
  osThreadDef(J3uartport, StartJ3uartport, osPriorityIdle, 0, 128);
 8001732:	ad1c      	add	r5, sp, #112	; 0x70
 8001734:	f104 0664 	add.w	r6, r4, #100	; 0x64
 8001738:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800173a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173c:	6833      	ldr	r3, [r6, #0]
 800173e:	602b      	str	r3, [r5, #0]
  J3uartportHandle = osThreadCreate(osThread(J3uartport), NULL);
 8001740:	2100      	movs	r1, #0
 8001742:	a81c      	add	r0, sp, #112	; 0x70
 8001744:	f005 fa77 	bl	8006c36 <osThreadCreate>
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <MX_FREERTOS_Init+0x190>)
 800174a:	6018      	str	r0, [r3, #0]
  osThreadDef(J4uartport, StartJ4uartport, osPriorityIdle, 0, 128);
 800174c:	ad17      	add	r5, sp, #92	; 0x5c
 800174e:	f104 0678 	add.w	r6, r4, #120	; 0x78
 8001752:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001756:	6833      	ldr	r3, [r6, #0]
 8001758:	602b      	str	r3, [r5, #0]
  J4uartportHandle = osThreadCreate(osThread(J4uartport), NULL);
 800175a:	2100      	movs	r1, #0
 800175c:	a817      	add	r0, sp, #92	; 0x5c
 800175e:	f005 fa6a 	bl	8006c36 <osThreadCreate>
 8001762:	4b37      	ldr	r3, [pc, #220]	; (8001840 <MX_FREERTOS_Init+0x194>)
 8001764:	6018      	str	r0, [r3, #0]
  osThreadDef(J5uartport, StartJ5uartport, osPriorityIdle, 0, 128);
 8001766:	ad12      	add	r5, sp, #72	; 0x48
 8001768:	f104 068c 	add.w	r6, r4, #140	; 0x8c
 800176c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800176e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001770:	6833      	ldr	r3, [r6, #0]
 8001772:	602b      	str	r3, [r5, #0]
  J5uartportHandle = osThreadCreate(osThread(J5uartport), NULL);
 8001774:	2100      	movs	r1, #0
 8001776:	a812      	add	r0, sp, #72	; 0x48
 8001778:	f005 fa5d 	bl	8006c36 <osThreadCreate>
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <MX_FREERTOS_Init+0x198>)
 800177e:	6018      	str	r0, [r3, #0]
  osThreadDef(J6uartport, StartJ6uartport, osPriorityIdle, 0, 128);
 8001780:	ad0d      	add	r5, sp, #52	; 0x34
 8001782:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8001786:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178a:	6833      	ldr	r3, [r6, #0]
 800178c:	602b      	str	r3, [r5, #0]
  J6uartportHandle = osThreadCreate(osThread(J6uartport), NULL);
 800178e:	2100      	movs	r1, #0
 8001790:	a80d      	add	r0, sp, #52	; 0x34
 8001792:	f005 fa50 	bl	8006c36 <osThreadCreate>
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <MX_FREERTOS_Init+0x19c>)
 8001798:	6018      	str	r0, [r3, #0]
  osMessageQDef(J1vectorqueue, 1, pvector);
 800179a:	ab0b      	add	r3, sp, #44	; 0x2c
 800179c:	34b4      	adds	r4, #180	; 0xb4
 800179e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a2:	e883 0003 	stmia.w	r3, {r0, r1}
  J1vectorqueueHandle = osMessageCreate(osMessageQ(J1vectorqueue), NULL);
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f005 fa67 	bl	8006c7c <osMessageCreate>
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <MX_FREERTOS_Init+0x1a0>)
 80017b0:	6018      	str	r0, [r3, #0]
  osMessageQDef(J2vectorqueue, 1, pvector);
 80017b2:	ab09      	add	r3, sp, #36	; 0x24
 80017b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b8:	e883 0003 	stmia.w	r3, {r0, r1}
  J2vectorqueueHandle = osMessageCreate(osMessageQ(J2vectorqueue), NULL);
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fa5c 	bl	8006c7c <osMessageCreate>
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_FREERTOS_Init+0x1a4>)
 80017c6:	6018      	str	r0, [r3, #0]
  osMessageQDef(J3vectorqueue, 1, pvector);
 80017c8:	ab07      	add	r3, sp, #28
 80017ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ce:	e883 0003 	stmia.w	r3, {r0, r1}
  J3vectorqueueHandle = osMessageCreate(osMessageQ(J3vectorqueue), NULL);
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f005 fa51 	bl	8006c7c <osMessageCreate>
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_FREERTOS_Init+0x1a8>)
 80017dc:	6018      	str	r0, [r3, #0]
  osMessageQDef(J4vectorqueue, 1, pvector);
 80017de:	ab05      	add	r3, sp, #20
 80017e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017e4:	e883 0003 	stmia.w	r3, {r0, r1}
  J4vectorqueueHandle = osMessageCreate(osMessageQ(J4vectorqueue), NULL);
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 fa46 	bl	8006c7c <osMessageCreate>
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_FREERTOS_Init+0x1ac>)
 80017f2:	6018      	str	r0, [r3, #0]
  osMessageQDef(J5vectorqueue, 1, pvector);
 80017f4:	ab03      	add	r3, sp, #12
 80017f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017fa:	e883 0003 	stmia.w	r3, {r0, r1}
  J5vectorqueueHandle = osMessageCreate(osMessageQ(J5vectorqueue), NULL);
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f005 fa3b 	bl	8006c7c <osMessageCreate>
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_FREERTOS_Init+0x1b0>)
 8001808:	6018      	str	r0, [r3, #0]
  osMessageQDef(J6vectorqueue, 1, pvector);
 800180a:	ab01      	add	r3, sp, #4
 800180c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001810:	e883 0003 	stmia.w	r3, {r0, r1}
  J6vectorqueueHandle = osMessageCreate(osMessageQ(J6vectorqueue), NULL);
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f005 fa30 	bl	8006c7c <osMessageCreate>
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_FREERTOS_Init+0x1b4>)
 800181e:	6018      	str	r0, [r3, #0]
}
 8001820:	b03a      	add	sp, #232	; 0xe8
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	08008298 	.word	0x08008298
 8001828:	20003f04 	.word	0x20003f04
 800182c:	20003f0c 	.word	0x20003f0c
 8001830:	20003ef0 	.word	0x20003ef0
 8001834:	20003f10 	.word	0x20003f10
 8001838:	20003f08 	.word	0x20003f08
 800183c:	20003ee0 	.word	0x20003ee0
 8001840:	20003ed8 	.word	0x20003ed8
 8001844:	20003ef4 	.word	0x20003ef4
 8001848:	20003eec 	.word	0x20003eec
 800184c:	20003ee8 	.word	0x20003ee8
 8001850:	20003efc 	.word	0x20003efc
 8001854:	20003ef8 	.word	0x20003ef8
 8001858:	20003f00 	.word	0x20003f00
 800185c:	20003edc 	.word	0x20003edc
 8001860:	20003ee4 	.word	0x20003ee4

08001864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001868:	4b30      	ldr	r3, [pc, #192]	; (800192c <MX_GPIO_Init+0xc8>)
 800186a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800186e:	f042 0210 	orr.w	r2, r2, #16
 8001872:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001876:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800187a:	f002 0210 	and.w	r2, r2, #16
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800188a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800188e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001892:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001896:	9201      	str	r2, [sp, #4]
 8001898:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018aa:	f002 0201 	and.w	r2, r2, #1
 80018ae:	9202      	str	r2, [sp, #8]
 80018b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018b6:	f042 0202 	orr.w	r2, r2, #2
 80018ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018c2:	f002 0202 	and.w	r2, r2, #2
 80018c6:	9203      	str	r2, [sp, #12]
 80018c8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018ce:	f042 0204 	orr.w	r2, r2, #4
 80018d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	9304      	str	r3, [sp, #16]
 80018e0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80018e2:	4e13      	ldr	r6, [pc, #76]	; (8001930 <MX_GPIO_Init+0xcc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	210c      	movs	r1, #12
 80018e8:	4630      	mov	r0, r6
 80018ea:	f002 fa7d 	bl	8003de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80018ee:	4d11      	ldr	r5, [pc, #68]	; (8001934 <MX_GPIO_Init+0xd0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f6:	4628      	mov	r0, r5
 80018f8:	f002 fa76 	bl	8003de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80018fc:	230c      	movs	r3, #12
 80018fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001900:	2311      	movs	r3, #17
 8001902:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2400      	movs	r4, #0
 8001906:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190a:	a905      	add	r1, sp, #20
 800190c:	4630      	mov	r0, r6
 800190e:	f002 f975 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001916:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001920:	a905      	add	r1, sp, #20
 8001922:	4628      	mov	r0, r5
 8001924:	f002 f96a 	bl	8003bfc <HAL_GPIO_Init>

}
 8001928:	b00a      	add	sp, #40	; 0x28
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	58024400 	.word	0x58024400
 8001930:	58021000 	.word	0x58021000
 8001934:	58020000 	.word	0x58020000

08001938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800193a:	6802      	ldr	r2, [r0, #0]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800193e:	429a      	cmp	r2, r3
 8001940:	d000      	beq.n	8001944 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001942:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001944:	f001 f808 	bl	8002958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001948:	e7fb      	b.n	8001942 <HAL_TIM_PeriodElapsedCallback+0xa>
 800194a:	bf00      	nop
 800194c:	40000800 	.word	0x40000800

08001950 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001950:	e7fe      	b.n	8001950 <_Error_Handler>
	...

08001954 <_Z18SystemClock_Configv>:
{
 8001954:	b500      	push	{lr}
 8001956:	b0cd      	sub	sp, #308	; 0x134
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <_Z18SystemClock_Configv+0x108>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	f022 0204 	bic.w	r2, r2, #4
 8001960:	60da      	str	r2, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001962:	2200      	movs	r2, #0
 8001964:	9201      	str	r2, [sp, #4]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800196c:	619a      	str	r2, [r3, #24]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	9b01      	ldr	r3, [sp, #4]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <_Z18SystemClock_Configv+0x108>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001980:	d0fa      	beq.n	8001978 <_Z18SystemClock_Configv+0x24>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001982:	4a37      	ldr	r2, [pc, #220]	; (8001a60 <_Z18SystemClock_Configv+0x10c>)
 8001984:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001990:	2201      	movs	r2, #1
 8001992:	9239      	str	r2, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001998:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199a:	2302      	movs	r3, #2
 800199c:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800199e:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019a0:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 100;
 80019a2:	2264      	movs	r2, #100	; 0x64
 80019a4:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019a6:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019a8:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019aa:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019ac:	230c      	movs	r3, #12
 80019ae:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019b4:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b6:	a839      	add	r0, sp, #228	; 0xe4
 80019b8:	f002 fa20 	bl	8003dfc <HAL_RCC_OscConfig>
 80019bc:	2800      	cmp	r0, #0
 80019be:	d140      	bne.n	8001a42 <_Z18SystemClock_Configv+0xee>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c0:	233f      	movs	r3, #63	; 0x3f
 80019c2:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c4:	2303      	movs	r3, #3
 80019c6:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019cc:	2308      	movs	r3, #8
 80019ce:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019d0:	2340      	movs	r3, #64	; 0x40
 80019d2:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019d4:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019da:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019dc:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019de:	2102      	movs	r1, #2
 80019e0:	a831      	add	r0, sp, #196	; 0xc4
 80019e2:	f002 fdb7 	bl	8004554 <HAL_RCC_ClockConfig>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d12f      	bne.n	8001a4a <_Z18SystemClock_Configv+0xf6>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <_Z18SystemClock_Configv+0x110>)
 80019ec:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 80019f2:	2213      	movs	r2, #19
 80019f4:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80019f6:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019fc:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019fe:	23c0      	movs	r3, #192	; 0xc0
 8001a00:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001a02:	2320      	movs	r3, #32
 8001a04:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a0a:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a0c:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001a0e:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001a10:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a12:	a802      	add	r0, sp, #8
 8001a14:	f002 ffc6 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8001a18:	b9d8      	cbnz	r0, 8001a52 <_Z18SystemClock_Configv+0xfe>
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_Z18SystemClock_Configv+0x114>)
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_Z18SystemClock_Configv+0x118>)
 8001a20:	fba3 3000 	umull	r3, r0, r3, r0
 8001a24:	0980      	lsrs	r0, r0, #6
 8001a26:	f001 fd29 	bl	800347c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a2a:	2004      	movs	r0, #4
 8001a2c:	f001 fd3c 	bl	80034a8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a38:	f001 fce2 	bl	8003400 <HAL_NVIC_SetPriority>
}
 8001a3c:	b04d      	add	sp, #308	; 0x134
 8001a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001a42:	21c6      	movs	r1, #198	; 0xc6
 8001a44:	480a      	ldr	r0, [pc, #40]	; (8001a70 <_Z18SystemClock_Configv+0x11c>)
 8001a46:	f7ff ff83 	bl	8001950 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001a4a:	21d8      	movs	r1, #216	; 0xd8
 8001a4c:	4808      	ldr	r0, [pc, #32]	; (8001a70 <_Z18SystemClock_Configv+0x11c>)
 8001a4e:	f7ff ff7f 	bl	8001950 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001a52:	21ee      	movs	r1, #238	; 0xee
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <_Z18SystemClock_Configv+0x11c>)
 8001a56:	f7ff ff7b 	bl	8001950 <_Error_Handler>
 8001a5a:	bf00      	nop
 8001a5c:	58024800 	.word	0x58024800
 8001a60:	58024400 	.word	0x58024400
 8001a64:	00081003 	.word	0x00081003
 8001a68:	20000090 	.word	0x20000090
 8001a6c:	10624dd3 	.word	0x10624dd3
 8001a70:	080083d8 	.word	0x080083d8

08001a74 <main>:
{
 8001a74:	b510      	push	{r4, lr}
 8001a76:	b082      	sub	sp, #8
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a7c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a80:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <main+0xd8>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a8c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a96:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a9c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001aa0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001aa8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001aac:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001ab0:	e00f      	b.n	8001ad2 <main+0x5e>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ab2:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ab4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ab8:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001abc:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001ac0:	4922      	ldr	r1, [pc, #136]	; (8001b4c <main+0xd8>)
 8001ac2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001ac6:	1e53      	subs	r3, r2, #1
      do {
 8001ac8:	2a00      	cmp	r2, #0
 8001aca:	d1f2      	bne.n	8001ab2 <main+0x3e>
    } while(sets-- != 0U);
 8001acc:	1e43      	subs	r3, r0, #1
    do {
 8001ace:	b118      	cbz	r0, 8001ad8 <main+0x64>
    } while(sets-- != 0U);
 8001ad0:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ad2:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8001ad6:	e7ed      	b.n	8001ab4 <main+0x40>
 8001ad8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001adc:	694b      	ldr	r3, [r1, #20]
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	614b      	str	r3, [r1, #20]
 8001ae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ae8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001aec:	f000 ff24 	bl	8002938 <HAL_Init>
  SystemClock_Config();
 8001af0:	f7ff ff30 	bl	8001954 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001af4:	f7ff feb6 	bl	8001864 <MX_GPIO_Init>
  MX_DMA_Init();
 8001af8:	f7ff fd96 	bl	8001628 <MX_DMA_Init>
  MX_ADC1_Init();
 8001afc:	f7ff fd1e 	bl	800153c <MX_ADC1_Init>
  MX_SPI3_Init();
 8001b00:	f000 f82c 	bl	8001b5c <MX_SPI3_Init>
  MX_UART4_Init();
 8001b04:	f000 f954 	bl	8001db0 <MX_UART4_Init>
  MX_UART5_Init();
 8001b08:	f000 f97c 	bl	8001e04 <MX_UART5_Init>
  MX_UART7_Init();
 8001b0c:	f000 f9a4 	bl	8001e58 <MX_UART7_Init>
  MX_UART8_Init();
 8001b10:	f000 f9cc 	bl	8001eac <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001b14:	f000 f9fa 	bl	8001f0c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b18:	f000 fa22 	bl	8001f60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b1c:	f000 fa4a 	bl	8001fb4 <MX_USART3_UART_Init>
  uint8_t data[2] = {'O','K'};
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <main+0xdc>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	a902      	add	r1, sp, #8
 8001b26:	f821 3d04 	strh.w	r3, [r1, #-4]!
  HAL_UART_Transmit(&huart8,data,2,1);
 8001b2a:	4c0a      	ldr	r4, [pc, #40]	; (8001b54 <main+0xe0>)
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4620      	mov	r0, r4
 8001b32:	f004 ffa2 	bl	8006a7a <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart8,rx_buff,UART8BYTES);
 8001b36:	2218      	movs	r2, #24
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <main+0xe4>)
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f004 f8fd 	bl	8005d3a <HAL_UART_Receive_IT>
  MX_FREERTOS_Init();
 8001b40:	f7ff fdb4 	bl	80016ac <MX_FREERTOS_Init>
  osKernelStart();
 8001b44:	f005 f872 	bl	8006c2c <osKernelStart>
 8001b48:	e7fe      	b.n	8001b48 <main+0xd4>
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00
 8001b50:	08008354 	.word	0x08008354
 8001b54:	200043bc 	.word	0x200043bc
 8001b58:	200045b4 	.word	0x200045b4

08001b5c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b5c:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8001b5e:	4815      	ldr	r0, [pc, #84]	; (8001bb4 <MX_SPI3_Init+0x58>)
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_SPI3_Init+0x5c>)
 8001b62:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b68:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b6e:	2207      	movs	r2, #7
 8001b70:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b72:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b74:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b76:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001b7a:	6181      	str	r1, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b7c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001b80:	61c1      	str	r1, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b82:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b84:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b86:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b88:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b8e:	6342      	str	r2, [r0, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b90:	6383      	str	r3, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b92:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b94:	6403      	str	r3, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b96:	6443      	str	r3, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b98:	6483      	str	r3, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b9a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b9c:	6503      	str	r3, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = 0;
 8001b9e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ba0:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ba2:	f003 fe57 	bl	8005854 <HAL_SPI_Init>
 8001ba6:	b900      	cbnz	r0, 8001baa <MX_SPI3_Init+0x4e>
 8001ba8:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001baa:	2159      	movs	r1, #89	; 0x59
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <MX_SPI3_Init+0x60>)
 8001bae:	f7ff fecf 	bl	8001950 <_Error_Handler>
  }

}
 8001bb2:	e7f9      	b.n	8001ba8 <MX_SPI3_Init+0x4c>
 8001bb4:	20003f14 	.word	0x20003f14
 8001bb8:	40003c00 	.word	0x40003c00
 8001bbc:	080083f0 	.word	0x080083f0

08001bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8001bc0:	6802      	ldr	r2, [r0, #0]
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_SPI_MspInit+0x4c>)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d000      	beq.n	8001bca <HAL_SPI_MspInit+0xa>
 8001bc8:	4770      	bx	lr
{
 8001bca:	b500      	push	{lr}
 8001bcc:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_SPI_MspInit+0x50>)
 8001bd0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bd8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	9b00      	ldr	r3, [sp, #0]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001be8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bf8:	2306      	movs	r3, #6
 8001bfa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	a901      	add	r1, sp, #4
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <HAL_SPI_MspInit+0x54>)
 8001c00:	f001 fffc 	bl	8003bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c04:	b007      	add	sp, #28
 8001c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c0a:	bf00      	nop
 8001c0c:	40003c00 	.word	0x40003c00
 8001c10:	58024400 	.word	0x58024400
 8001c14:	58020800 	.word	0x58020800

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b500      	push	{lr}
 8001c1a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_MspInit+0x80>)
 8001c1e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001c22:	f042 0202 	orr.w	r2, r2, #2
 8001c26:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f001 fbd0 	bl	80033dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4611      	mov	r1, r2
 8001c40:	f06f 000b 	mvn.w	r0, #11
 8001c44:	f001 fbdc 	bl	8003400 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	f06f 000a 	mvn.w	r0, #10
 8001c50:	f001 fbd6 	bl	8003400 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	4611      	mov	r1, r2
 8001c58:	f06f 0009 	mvn.w	r0, #9
 8001c5c:	f001 fbd0 	bl	8003400 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	4611      	mov	r1, r2
 8001c64:	f06f 0004 	mvn.w	r0, #4
 8001c68:	f001 fbca 	bl	8003400 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4611      	mov	r1, r2
 8001c70:	f06f 0003 	mvn.w	r0, #3
 8001c74:	f001 fbc4 	bl	8003400 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	f06f 0001 	mvn.w	r0, #1
 8001c80:	f001 fbbe 	bl	8003400 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c8c:	f001 fbb8 	bl	8003400 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c90:	b003      	add	sp, #12
 8001c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c96:	bf00      	nop
 8001c98:	58024400 	.word	0x58024400

08001c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b500      	push	{lr}
 8001c9e:	b08b      	sub	sp, #44	; 0x2c
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	201e      	movs	r0, #30
 8001ca6:	f001 fbab 	bl	8003400 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001caa:	201e      	movs	r0, #30
 8001cac:	f001 fbd8 	bl	8003460 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_InitTick+0x70>)
 8001cb2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001cb6:	f042 0204 	orr.w	r2, r2, #4
 8001cba:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cca:	a901      	add	r1, sp, #4
 8001ccc:	a802      	add	r0, sp, #8
 8001cce:	f002 fd7f 	bl	80047d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cd2:	f002 fd51 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8001cd6:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <HAL_InitTick+0x74>)
 8001cda:	fba0 2303 	umull	r2, r3, r0, r3
 8001cde:	0c9b      	lsrs	r3, r3, #18
 8001ce0:	3b01      	subs	r3, #1
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001ce2:	480c      	ldr	r0, [pc, #48]	; (8001d14 <HAL_InitTick+0x78>)
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_InitTick+0x7c>)
 8001ce6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001ce8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cec:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001cee:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001cf6:	f003 ffb7 	bl	8005c68 <HAL_TIM_Base_Init>
 8001cfa:	b118      	cbz	r0, 8001d04 <HAL_InitTick+0x68>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001cfc:	2001      	movs	r0, #1
}
 8001cfe:	b00b      	add	sp, #44	; 0x2c
 8001d00:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <HAL_InitTick+0x78>)
 8001d06:	f003 fe4e 	bl	80059a6 <HAL_TIM_Base_Start_IT>
 8001d0a:	e7f8      	b.n	8001cfe <HAL_InitTick+0x62>
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	431bde83 	.word	0x431bde83
 8001d14:	20003f9c 	.word	0x20003f9c
 8001d18:	40000800 	.word	0x40000800

08001d1c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001d1c:	4770      	bx	lr

08001d1e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler>

08001d20 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler>

08001d22 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler>

08001d24 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001d24:	e7fe      	b.n	8001d24 <UsageFault_Handler>

08001d26 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001d28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001d2a:	f004 ffae 	bl	8006c8a <osSystickHandler>
 8001d2e:	bd08      	pop	{r3, pc}

08001d30 <DMA1_Stream0_IRQHandler>:

/**
* @brief This function handles DMA1 stream0 global interrupt.
*/
void DMA1_Stream0_IRQHandler(void)
{
 8001d30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d32:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA1_Stream0_IRQHandler+0xc>)
 8001d34:	f001 fdc2 	bl	80038bc <HAL_DMA_IRQHandler>
 8001d38:	bd08      	pop	{r3, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20003fdc 	.word	0x20003fdc

08001d40 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 8001d40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001d42:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Stream1_IRQHandler+0xc>)
 8001d44:	f001 fdba 	bl	80038bc <HAL_DMA_IRQHandler>
 8001d48:	bd08      	pop	{r3, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000453c 	.word	0x2000453c

08001d50 <DMA1_Stream2_IRQHandler>:

/**
* @brief This function handles DMA1 stream2 global interrupt.
*/
void DMA1_Stream2_IRQHandler(void)
{
 8001d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001d52:	4802      	ldr	r0, [pc, #8]	; (8001d5c <DMA1_Stream2_IRQHandler+0xc>)
 8001d54:	f001 fdb2 	bl	80038bc <HAL_DMA_IRQHandler>
 8001d58:	bd08      	pop	{r3, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000424c 	.word	0x2000424c

08001d60 <DMA1_Stream3_IRQHandler>:

/**
* @brief This function handles DMA1 stream3 global interrupt.
*/
void DMA1_Stream3_IRQHandler(void)
{
 8001d60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d62:	4802      	ldr	r0, [pc, #8]	; (8001d6c <DMA1_Stream3_IRQHandler+0xc>)
 8001d64:	f001 fdaa 	bl	80038bc <HAL_DMA_IRQHandler>
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200042c4 	.word	0x200042c4

08001d70 <DMA1_Stream5_IRQHandler>:

/**
* @brief This function handles DMA1 stream5 global interrupt.
*/
void DMA1_Stream5_IRQHandler(void)
{
 8001d70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d72:	4802      	ldr	r0, [pc, #8]	; (8001d7c <DMA1_Stream5_IRQHandler+0xc>)
 8001d74:	f001 fda2 	bl	80038bc <HAL_DMA_IRQHandler>
 8001d78:	bd08      	pop	{r3, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200040d4 	.word	0x200040d4

08001d80 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8001d80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d82:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM4_IRQHandler+0xc>)
 8001d84:	f003 fe20 	bl	80059c8 <HAL_TIM_IRQHandler>
 8001d88:	bd08      	pop	{r3, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20003f9c 	.word	0x20003f9c

08001d90 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8001d90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d92:	4802      	ldr	r0, [pc, #8]	; (8001d9c <USART2_IRQHandler+0xc>)
 8001d94:	f004 f886 	bl	8005ea4 <HAL_UART_IRQHandler>
 8001d98:	bd08      	pop	{r3, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200044bc 	.word	0x200044bc

08001da0 <UART8_IRQHandler>:

/**
* @brief This function handles UART8 global interrupt.
*/
void UART8_IRQHandler(void)
{
 8001da0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001da2:	4802      	ldr	r0, [pc, #8]	; (8001dac <UART8_IRQHandler+0xc>)
 8001da4:	f004 f87e 	bl	8005ea4 <HAL_UART_IRQHandler>
 8001da8:	bd08      	pop	{r3, pc}
 8001daa:	bf00      	nop
 8001dac:	200043bc 	.word	0x200043bc

08001db0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001db0:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8001db2:	4810      	ldr	r0, [pc, #64]	; (8001df4 <MX_UART4_Init+0x44>)
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <MX_UART4_Init+0x48>)
 8001db6:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 1250000;
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <MX_UART4_Init+0x4c>)
 8001dba:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc0:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dca:	6102      	str	r2, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	220c      	movs	r2, #12
 8001dce:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd0:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd2:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd4:	6203      	str	r3, [r0, #32]
  huart4.Init.Prescaler = UART_PRESCALER_DIV1;
 8001dd6:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001dd8:	6283      	str	r3, [r0, #40]	; 0x28
  huart4.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001dda:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart4.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001ddc:	6303      	str	r3, [r0, #48]	; 0x30
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dde:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001de0:	f004 fee9 	bl	8006bb6 <HAL_UART_Init>
 8001de4:	b900      	cbnz	r0, 8001de8 <MX_UART4_Init+0x38>
 8001de6:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001de8:	215d      	movs	r1, #93	; 0x5d
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_UART4_Init+0x50>)
 8001dec:	f7ff fdb0 	bl	8001950 <_Error_Handler>
  }

}
 8001df0:	e7f9      	b.n	8001de6 <MX_UART4_Init+0x36>
 8001df2:	bf00      	nop
 8001df4:	2000443c 	.word	0x2000443c
 8001df8:	40004c00 	.word	0x40004c00
 8001dfc:	001312d0 	.word	0x001312d0
 8001e00:	08008404 	.word	0x08008404

08001e04 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e04:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 8001e06:	4810      	ldr	r0, [pc, #64]	; (8001e48 <MX_UART5_Init+0x44>)
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_UART5_Init+0x48>)
 8001e0a:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 1250000;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_UART5_Init+0x4c>)
 8001e0e:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e14:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1e:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e20:	220c      	movs	r2, #12
 8001e22:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e24:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e26:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e28:	6203      	str	r3, [r0, #32]
  huart5.Init.Prescaler = UART_PRESCALER_DIV1;
 8001e2a:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001e2c:	6283      	str	r3, [r0, #40]	; 0x28
  huart5.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001e2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart5.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001e30:	6303      	str	r3, [r0, #48]	; 0x30
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e32:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e34:	f004 febf 	bl	8006bb6 <HAL_UART_Init>
 8001e38:	b900      	cbnz	r0, 8001e3c <MX_UART5_Init+0x38>
 8001e3a:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e3c:	2175      	movs	r1, #117	; 0x75
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_UART5_Init+0x50>)
 8001e40:	f7ff fd86 	bl	8001950 <_Error_Handler>
  }

}
 8001e44:	e7f9      	b.n	8001e3a <MX_UART5_Init+0x36>
 8001e46:	bf00      	nop
 8001e48:	200041cc 	.word	0x200041cc
 8001e4c:	40005000 	.word	0x40005000
 8001e50:	001312d0 	.word	0x001312d0
 8001e54:	08008404 	.word	0x08008404

08001e58 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001e58:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 8001e5a:	4810      	ldr	r0, [pc, #64]	; (8001e9c <MX_UART7_Init+0x44>)
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_UART7_Init+0x48>)
 8001e5e:	6003      	str	r3, [r0, #0]
  huart7.Init.BaudRate = 1250000;
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <MX_UART7_Init+0x4c>)
 8001e62:	6043      	str	r3, [r0, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e68:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e72:	6102      	str	r2, [r0, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e74:	220c      	movs	r2, #12
 8001e76:	6142      	str	r2, [r0, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e78:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7a:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7c:	6203      	str	r3, [r0, #32]
  huart7.Init.Prescaler = UART_PRESCALER_DIV1;
 8001e7e:	6243      	str	r3, [r0, #36]	; 0x24
  huart7.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001e80:	6283      	str	r3, [r0, #40]	; 0x28
  huart7.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001e82:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart7.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001e84:	6303      	str	r3, [r0, #48]	; 0x30
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e86:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e88:	f004 fe95 	bl	8006bb6 <HAL_UART_Init>
 8001e8c:	b900      	cbnz	r0, 8001e90 <MX_UART7_Init+0x38>
 8001e8e:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e90:	218d      	movs	r1, #141	; 0x8d
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_UART7_Init+0x50>)
 8001e94:	f7ff fd5c 	bl	8001950 <_Error_Handler>
  }

}
 8001e98:	e7f9      	b.n	8001e8e <MX_UART7_Init+0x36>
 8001e9a:	bf00      	nop
 8001e9c:	20004054 	.word	0x20004054
 8001ea0:	40007800 	.word	0x40007800
 8001ea4:	001312d0 	.word	0x001312d0
 8001ea8:	08008404 	.word	0x08008404

08001eac <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001eac:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8001eae:	4814      	ldr	r0, [pc, #80]	; (8001f00 <MX_UART8_Init+0x54>)
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <MX_UART8_Init+0x58>)
 8001eb2:	6003      	str	r3, [r0, #0]
  huart8.Init.BaudRate = 921600;
 8001eb4:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8001eb8:	6043      	str	r3, [r0, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001ebe:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001ec0:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eca:	6203      	str	r3, [r0, #32]
  huart8.Init.Prescaler = UART_PRESCALER_DIV1;
 8001ecc:	6243      	str	r3, [r0, #36]	; 0x24
  huart8.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001ece:	6283      	str	r3, [r0, #40]	; 0x28
  huart8.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_8_8;
 8001ed0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001ed4:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart8.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_8_8;
 8001ed6:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8001eda:	6303      	str	r3, [r0, #48]	; 0x30
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001edc:	2318      	movs	r3, #24
 8001ede:	6343      	str	r3, [r0, #52]	; 0x34
  huart8.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee4:	6443      	str	r3, [r0, #68]	; 0x44
  huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eea:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001eec:	f004 fe63 	bl	8006bb6 <HAL_UART_Init>
 8001ef0:	b900      	cbnz	r0, 8001ef4 <MX_UART8_Init+0x48>
 8001ef2:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ef4:	21a7      	movs	r1, #167	; 0xa7
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_UART8_Init+0x5c>)
 8001ef8:	f7ff fd2a 	bl	8001950 <_Error_Handler>
  }

}
 8001efc:	e7f9      	b.n	8001ef2 <MX_UART8_Init+0x46>
 8001efe:	bf00      	nop
 8001f00:	200043bc 	.word	0x200043bc
 8001f04:	40007c00 	.word	0x40007c00
 8001f08:	08008404 	.word	0x08008404

08001f0c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f0c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001f0e:	4810      	ldr	r0, [pc, #64]	; (8001f50 <MX_USART1_UART_Init+0x44>)
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_USART1_UART_Init+0x48>)
 8001f12:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 1250000;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f16:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f26:	6102      	str	r2, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f28:	220c      	movs	r2, #12
 8001f2a:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2e:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f30:	6203      	str	r3, [r0, #32]
  huart1.Init.Prescaler = UART_PRESCALER_DIV1;
 8001f32:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001f34:	6283      	str	r3, [r0, #40]	; 0x28
  huart1.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001f36:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart1.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001f38:	6303      	str	r3, [r0, #48]	; 0x30
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f3c:	f004 fe3b 	bl	8006bb6 <HAL_UART_Init>
 8001f40:	b900      	cbnz	r0, 8001f44 <MX_USART1_UART_Init+0x38>
 8001f42:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f44:	21c0      	movs	r1, #192	; 0xc0
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART1_UART_Init+0x50>)
 8001f48:	f7ff fd02 	bl	8001950 <_Error_Handler>
  }

}
 8001f4c:	e7f9      	b.n	8001f42 <MX_USART1_UART_Init+0x36>
 8001f4e:	bf00      	nop
 8001f50:	2000433c 	.word	0x2000433c
 8001f54:	40011000 	.word	0x40011000
 8001f58:	001312d0 	.word	0x001312d0
 8001f5c:	08008404 	.word	0x08008404

08001f60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f60:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001f62:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <MX_USART2_UART_Init+0x44>)
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_USART2_UART_Init+0x48>)
 8001f66:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 1250000;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f6a:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7a:	6102      	str	r2, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	220c      	movs	r2, #12
 8001f7e:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f80:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f82:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f84:	6203      	str	r3, [r0, #32]
  huart2.Init.Prescaler = UART_PRESCALER_DIV1;
 8001f86:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001f88:	6283      	str	r3, [r0, #40]	; 0x28
  huart2.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001f8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart2.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001f8c:	6303      	str	r3, [r0, #48]	; 0x30
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f90:	f004 fe11 	bl	8006bb6 <HAL_UART_Init>
 8001f94:	b900      	cbnz	r0, 8001f98 <MX_USART2_UART_Init+0x38>
 8001f96:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f98:	21d9      	movs	r1, #217	; 0xd9
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x50>)
 8001f9c:	f7ff fcd8 	bl	8001950 <_Error_Handler>
  }

}
 8001fa0:	e7f9      	b.n	8001f96 <MX_USART2_UART_Init+0x36>
 8001fa2:	bf00      	nop
 8001fa4:	200044bc 	.word	0x200044bc
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	001312d0 	.word	0x001312d0
 8001fb0:	08008404 	.word	0x08008404

08001fb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fb4:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8001fb6:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <MX_USART3_UART_Init+0x44>)
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_USART3_UART_Init+0x48>)
 8001fba:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 1250000;
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fbe:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fce:	6102      	str	r2, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	220c      	movs	r2, #12
 8001fd2:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd4:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd6:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd8:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8001fda:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001fdc:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001fde:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001fe0:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fe4:	f004 fde7 	bl	8006bb6 <HAL_UART_Init>
 8001fe8:	b900      	cbnz	r0, 8001fec <MX_USART3_UART_Init+0x38>
 8001fea:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001fec:	21f2      	movs	r1, #242	; 0xf2
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_USART3_UART_Init+0x50>)
 8001ff0:	f7ff fcae 	bl	8001950 <_Error_Handler>
  }

}
 8001ff4:	e7f9      	b.n	8001fea <MX_USART3_UART_Init+0x36>
 8001ff6:	bf00      	nop
 8001ff8:	2000414c 	.word	0x2000414c
 8001ffc:	40004800 	.word	0x40004800
 8002000:	001312d0 	.word	0x001312d0
 8002004:	08008404 	.word	0x08008404

08002008 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002008:	b530      	push	{r4, r5, lr}
 800200a:	b08d      	sub	sp, #52	; 0x34
 800200c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 800200e:	6803      	ldr	r3, [r0, #0]
 8002010:	4a9d      	ldr	r2, [pc, #628]	; (8002288 <HAL_UART_MspInit+0x280>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d017      	beq.n	8002046 <HAL_UART_MspInit+0x3e>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8002016:	4a9d      	ldr	r2, [pc, #628]	; (800228c <HAL_UART_MspInit+0x284>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04a      	beq.n	80020b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==UART7)
 800201c:	4a9c      	ldr	r2, [pc, #624]	; (8002290 <HAL_UART_MspInit+0x288>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d07e      	beq.n	8002120 <HAL_UART_MspInit+0x118>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 8002022:	4a9c      	ldr	r2, [pc, #624]	; (8002294 <HAL_UART_MspInit+0x28c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	f000 80b2 	beq.w	800218e <HAL_UART_MspInit+0x186>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 800202a:	4a9b      	ldr	r2, [pc, #620]	; (8002298 <HAL_UART_MspInit+0x290>)
 800202c:	4293      	cmp	r3, r2
 800202e:	f000 80d1 	beq.w	80021d4 <HAL_UART_MspInit+0x1cc>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002032:	4a9a      	ldr	r2, [pc, #616]	; (800229c <HAL_UART_MspInit+0x294>)
 8002034:	4293      	cmp	r3, r2
 8002036:	f000 8104 	beq.w	8002242 <HAL_UART_MspInit+0x23a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800203a:	4a99      	ldr	r2, [pc, #612]	; (80022a0 <HAL_UART_MspInit+0x298>)
 800203c:	4293      	cmp	r3, r2
 800203e:	f000 814b 	beq.w	80022d8 <HAL_UART_MspInit+0x2d0>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002042:	b00d      	add	sp, #52	; 0x34
 8002044:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 8002046:	4b97      	ldr	r3, [pc, #604]	; (80022a4 <HAL_UART_MspInit+0x29c>)
 8002048:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800204c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002050:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002060:	2303      	movs	r3, #3
 8002062:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2500      	movs	r5, #0
 800206a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800206e:	2308      	movs	r3, #8
 8002070:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	a907      	add	r1, sp, #28
 8002074:	488c      	ldr	r0, [pc, #560]	; (80022a8 <HAL_UART_MspInit+0x2a0>)
 8002076:	f001 fdc1 	bl	8003bfc <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream0;
 800207a:	488c      	ldr	r0, [pc, #560]	; (80022ac <HAL_UART_MspInit+0x2a4>)
 800207c:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <HAL_UART_MspInit+0x2a8>)
 800207e:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002080:	233f      	movs	r3, #63	; 0x3f
 8002082:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002084:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002086:	60c5      	str	r5, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208c:	6103      	str	r3, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800208e:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002090:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002092:	61c5      	str	r5, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002094:	6205      	str	r5, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002096:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002098:	f001 fae0 	bl	800365c <HAL_DMA_Init>
 800209c:	b918      	cbnz	r0, 80020a6 <HAL_UART_MspInit+0x9e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800209e:	4b83      	ldr	r3, [pc, #524]	; (80022ac <HAL_UART_MspInit+0x2a4>)
 80020a0:	6763      	str	r3, [r4, #116]	; 0x74
 80020a2:	639c      	str	r4, [r3, #56]	; 0x38
 80020a4:	e7cd      	b.n	8002042 <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 80020a6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80020aa:	4882      	ldr	r0, [pc, #520]	; (80022b4 <HAL_UART_MspInit+0x2ac>)
 80020ac:	f7ff fc50 	bl	8001950 <_Error_Handler>
 80020b0:	e7f5      	b.n	800209e <HAL_UART_MspInit+0x96>
    __HAL_RCC_UART5_CLK_ENABLE();
 80020b2:	4b7c      	ldr	r3, [pc, #496]	; (80022a4 <HAL_UART_MspInit+0x29c>)
 80020b4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80020b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020bc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80020c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020d0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2500      	movs	r5, #0
 80020d8:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80020dc:	230e      	movs	r3, #14
 80020de:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	a907      	add	r1, sp, #28
 80020e2:	4875      	ldr	r0, [pc, #468]	; (80022b8 <HAL_UART_MspInit+0x2b0>)
 80020e4:	f001 fd8a 	bl	8003bfc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream1;
 80020e8:	4874      	ldr	r0, [pc, #464]	; (80022bc <HAL_UART_MspInit+0x2b4>)
 80020ea:	4b75      	ldr	r3, [pc, #468]	; (80022c0 <HAL_UART_MspInit+0x2b8>)
 80020ec:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80020ee:	2341      	movs	r3, #65	; 0x41
 80020f0:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f2:	6085      	str	r5, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f4:	60c5      	str	r5, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fa:	6103      	str	r3, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020fc:	6145      	str	r5, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fe:	6185      	str	r5, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002100:	61c5      	str	r5, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002102:	6205      	str	r5, [r0, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002104:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002106:	f001 faa9 	bl	800365c <HAL_DMA_Init>
 800210a:	b918      	cbnz	r0, 8002114 <HAL_UART_MspInit+0x10c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800210c:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_UART_MspInit+0x2b4>)
 800210e:	6763      	str	r3, [r4, #116]	; 0x74
 8002110:	639c      	str	r4, [r3, #56]	; 0x38
 8002112:	e796      	b.n	8002042 <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 8002114:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002118:	4866      	ldr	r0, [pc, #408]	; (80022b4 <HAL_UART_MspInit+0x2ac>)
 800211a:	f7ff fc19 	bl	8001950 <_Error_Handler>
 800211e:	e7f5      	b.n	800210c <HAL_UART_MspInit+0x104>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002120:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <HAL_UART_MspInit+0x29c>)
 8002122:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002126:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800212a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800212e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002132:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800213a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800213e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2500      	movs	r5, #0
 8002146:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800214a:	2307      	movs	r3, #7
 800214c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800214e:	a907      	add	r1, sp, #28
 8002150:	485c      	ldr	r0, [pc, #368]	; (80022c4 <HAL_UART_MspInit+0x2bc>)
 8002152:	f001 fd53 	bl	8003bfc <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 8002156:	485c      	ldr	r0, [pc, #368]	; (80022c8 <HAL_UART_MspInit+0x2c0>)
 8002158:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_UART_MspInit+0x2c4>)
 800215a:	6003      	str	r3, [r0, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 800215c:	234f      	movs	r3, #79	; 0x4f
 800215e:	6043      	str	r3, [r0, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002160:	6085      	str	r5, [r0, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002162:	60c5      	str	r5, [r0, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002168:	6103      	str	r3, [r0, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800216a:	6145      	str	r5, [r0, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216c:	6185      	str	r5, [r0, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800216e:	61c5      	str	r5, [r0, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002170:	6205      	str	r5, [r0, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002172:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002174:	f001 fa72 	bl	800365c <HAL_DMA_Init>
 8002178:	b918      	cbnz	r0, 8002182 <HAL_UART_MspInit+0x17a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_UART_MspInit+0x2c0>)
 800217c:	6763      	str	r3, [r4, #116]	; 0x74
 800217e:	639c      	str	r4, [r3, #56]	; 0x38
 8002180:	e75f      	b.n	8002042 <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 8002182:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8002186:	484b      	ldr	r0, [pc, #300]	; (80022b4 <HAL_UART_MspInit+0x2ac>)
 8002188:	f7ff fbe2 	bl	8001950 <_Error_Handler>
 800218c:	e7f5      	b.n	800217a <HAL_UART_MspInit+0x172>
    __HAL_RCC_UART8_CLK_ENABLE();
 800218e:	4b45      	ldr	r3, [pc, #276]	; (80022a4 <HAL_UART_MspInit+0x29c>)
 8002190:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002194:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002198:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800219c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021a4:	9303      	str	r3, [sp, #12]
 80021a6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021a8:	2303      	movs	r3, #3
 80021aa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2202      	movs	r2, #2
 80021ae:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2400      	movs	r4, #0
 80021b2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80021b6:	2308      	movs	r3, #8
 80021b8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ba:	a907      	add	r1, sp, #28
 80021bc:	4841      	ldr	r0, [pc, #260]	; (80022c4 <HAL_UART_MspInit+0x2bc>)
 80021be:	f001 fd1d 	bl	8003bfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80021c2:	4622      	mov	r2, r4
 80021c4:	2105      	movs	r1, #5
 80021c6:	2053      	movs	r0, #83	; 0x53
 80021c8:	f001 f91a 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80021cc:	2053      	movs	r0, #83	; 0x53
 80021ce:	f001 f947 	bl	8003460 <HAL_NVIC_EnableIRQ>
 80021d2:	e736      	b.n	8002042 <HAL_UART_MspInit+0x3a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d4:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_UART_MspInit+0x29c>)
 80021d6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80021da:	f042 0210 	orr.w	r2, r2, #16
 80021de:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80021e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	9304      	str	r3, [sp, #16]
 80021ec:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021f2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2500      	movs	r5, #0
 80021fa:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80021fe:	2304      	movs	r3, #4
 8002200:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	a907      	add	r1, sp, #28
 8002204:	482c      	ldr	r0, [pc, #176]	; (80022b8 <HAL_UART_MspInit+0x2b0>)
 8002206:	f001 fcf9 	bl	8003bfc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 800220a:	4831      	ldr	r0, [pc, #196]	; (80022d0 <HAL_UART_MspInit+0x2c8>)
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_UART_MspInit+0x2cc>)
 800220e:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002210:	2329      	movs	r3, #41	; 0x29
 8002212:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002214:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002216:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221c:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800221e:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002220:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002222:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002224:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002226:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002228:	f001 fa18 	bl	800365c <HAL_DMA_Init>
 800222c:	b918      	cbnz	r0, 8002236 <HAL_UART_MspInit+0x22e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_UART_MspInit+0x2c8>)
 8002230:	6763      	str	r3, [r4, #116]	; 0x74
 8002232:	639c      	str	r4, [r3, #56]	; 0x38
 8002234:	e705      	b.n	8002042 <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 8002236:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800223a:	481e      	ldr	r0, [pc, #120]	; (80022b4 <HAL_UART_MspInit+0x2ac>)
 800223c:	f7ff fb88 	bl	8001950 <_Error_Handler>
 8002240:	e7f5      	b.n	800222e <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_UART_MspInit+0x29c>)
 8002244:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002248:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800224c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	9305      	str	r3, [sp, #20]
 800225a:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800225c:	230c      	movs	r3, #12
 800225e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2400      	movs	r4, #0
 8002266:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800226a:	2307      	movs	r3, #7
 800226c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	a907      	add	r1, sp, #28
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <HAL_UART_MspInit+0x2a0>)
 8002272:	f001 fcc3 	bl	8003bfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002276:	4622      	mov	r2, r4
 8002278:	2105      	movs	r1, #5
 800227a:	2026      	movs	r0, #38	; 0x26
 800227c:	f001 f8c0 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002280:	2026      	movs	r0, #38	; 0x26
 8002282:	f001 f8ed 	bl	8003460 <HAL_NVIC_EnableIRQ>
 8002286:	e6dc      	b.n	8002042 <HAL_UART_MspInit+0x3a>
 8002288:	40004c00 	.word	0x40004c00
 800228c:	40005000 	.word	0x40005000
 8002290:	40007800 	.word	0x40007800
 8002294:	40007c00 	.word	0x40007c00
 8002298:	40011000 	.word	0x40011000
 800229c:	40004400 	.word	0x40004400
 80022a0:	40004800 	.word	0x40004800
 80022a4:	58024400 	.word	0x58024400
 80022a8:	58020000 	.word	0x58020000
 80022ac:	20003fdc 	.word	0x20003fdc
 80022b0:	40020010 	.word	0x40020010
 80022b4:	08008404 	.word	0x08008404
 80022b8:	58020400 	.word	0x58020400
 80022bc:	2000453c 	.word	0x2000453c
 80022c0:	40020028 	.word	0x40020028
 80022c4:	58021000 	.word	0x58021000
 80022c8:	2000424c 	.word	0x2000424c
 80022cc:	40020040 	.word	0x40020040
 80022d0:	200042c4 	.word	0x200042c4
 80022d4:	40020058 	.word	0x40020058
    __HAL_RCC_USART3_CLK_ENABLE();
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_UART_MspInit+0x340>)
 80022da:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80022de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022e2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80022e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ee:	9306      	str	r3, [sp, #24]
 80022f0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022f6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2500      	movs	r5, #0
 80022fe:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002302:	2307      	movs	r3, #7
 8002304:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	a907      	add	r1, sp, #28
 8002308:	4810      	ldr	r0, [pc, #64]	; (800234c <HAL_UART_MspInit+0x344>)
 800230a:	f001 fc77 	bl	8003bfc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream5;
 800230e:	4810      	ldr	r0, [pc, #64]	; (8002350 <HAL_UART_MspInit+0x348>)
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_UART_MspInit+0x34c>)
 8002312:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002314:	232d      	movs	r3, #45	; 0x2d
 8002316:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002318:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800231a:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800231c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002320:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002322:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002324:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002326:	61c5      	str	r5, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002328:	6205      	str	r5, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800232a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800232c:	f001 f996 	bl	800365c <HAL_DMA_Init>
 8002330:	b918      	cbnz	r0, 800233a <HAL_UART_MspInit+0x332>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_UART_MspInit+0x348>)
 8002334:	6763      	str	r3, [r4, #116]	; 0x74
 8002336:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002338:	e683      	b.n	8002042 <HAL_UART_MspInit+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 800233a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <HAL_UART_MspInit+0x350>)
 8002340:	f7ff fb06 	bl	8001950 <_Error_Handler>
 8002344:	e7f5      	b.n	8002332 <HAL_UART_MspInit+0x32a>
 8002346:	bf00      	nop
 8002348:	58024400 	.word	0x58024400
 800234c:	58020400 	.word	0x58020400
 8002350:	200040d4 	.word	0x200040d4
 8002354:	40020088 	.word	0x40020088
 8002358:	08008404 	.word	0x08008404

0800235c <HAL_UART_ErrorCallback>:
#define UART8BYTES sizeof(pvector)+2
uint8_t rx_buff[UART8BYTES];
uint8_t rx_servo[6];

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800235c:	4770      	bx	lr
	...

08002360 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002360:	b510      	push	{r4, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	4604      	mov	r4, r0
	if(huart->Instance==huart8.Instance)
 8002366:	6802      	ldr	r2, [r0, #0]
 8002368:	4b8f      	ldr	r3, [pc, #572]	; (80025a8 <HAL_UART_RxCpltCallback+0x248>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d007      	beq.n	8002380 <HAL_UART_RxCpltCallback+0x20>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}


	//receive from port 1...
	if(huart->Instance==huart2.Instance)
 8002370:	6822      	ldr	r2, [r4, #0]
 8002372:	4b8e      	ldr	r3, [pc, #568]	; (80025ac <HAL_UART_RxCpltCallback+0x24c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	f000 80fd 	beq.w	8002576 <HAL_UART_RxCpltCallback+0x216>
			HAL_UART_Transmit(&huart8,data,2,1);
		}
			//call a context switch if needed..
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 800237c:	b002      	add	sp, #8
 800237e:	bd10      	pop	{r4, pc}
		if(rx_buff[0]==TXHEADER)
 8002380:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2bf8      	cmp	r3, #248	; 0xf8
 8002386:	d011      	beq.n	80023ac <HAL_UART_RxCpltCallback+0x4c>
		HAL_UART_Receive_IT(&huart8,rx_buff,UART8BYTES);
 8002388:	2218      	movs	r2, #24
 800238a:	4989      	ldr	r1, [pc, #548]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 800238c:	4886      	ldr	r0, [pc, #536]	; (80025a8 <HAL_UART_RxCpltCallback+0x248>)
 800238e:	f003 fcd4 	bl	8005d3a <HAL_UART_Receive_IT>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_UART_RxCpltCallback+0x254>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0ea      	beq.n	8002370 <HAL_UART_RxCpltCallback+0x10>
 800239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239e:	4b86      	ldr	r3, [pc, #536]	; (80025b8 <HAL_UART_RxCpltCallback+0x258>)
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	e7e1      	b.n	8002370 <HAL_UART_RxCpltCallback+0x10>
			switch (rx_buff[1])
 80023ac:	4b80      	ldr	r3, [pc, #512]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d8e8      	bhi.n	8002388 <HAL_UART_RxCpltCallback+0x28>
 80023b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023ba:	0006      	.short	0x0006
 80023bc:	004e002a 	.word	0x004e002a
 80023c0:	00960072 	.word	0x00960072
 80023c4:	00ba      	.short	0x00ba
				portJ1_anglevector.servonum = rx_buff[2]==0?portJ1_anglevector.servonum:rx_buff[2];
 80023c6:	4b7a      	ldr	r3, [pc, #488]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80023c8:	7898      	ldrb	r0, [r3, #2]
 80023ca:	b908      	cbnz	r0, 80023d0 <HAL_UART_RxCpltCallback+0x70>
 80023cc:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_UART_RxCpltCallback+0x25c>)
 80023ce:	7818      	ldrb	r0, [r3, #0]
 80023d0:	4b7a      	ldr	r3, [pc, #488]	; (80025bc <HAL_UART_RxCpltCallback+0x25c>)
 80023d2:	7018      	strb	r0, [r3, #0]
				portJ1_anglevector.servoIDstart = rx_buff[3]==0?portJ1_anglevector.servoIDstart:rx_buff[3];
 80023d4:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80023d6:	78db      	ldrb	r3, [r3, #3]
 80023d8:	b90b      	cbnz	r3, 80023de <HAL_UART_RxCpltCallback+0x7e>
 80023da:	4b78      	ldr	r3, [pc, #480]	; (80025bc <HAL_UART_RxCpltCallback+0x25c>)
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	4a77      	ldr	r2, [pc, #476]	; (80025bc <HAL_UART_RxCpltCallback+0x25c>)
 80023e0:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ1_anglevector.servonum;i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	e009      	b.n	80023fa <HAL_UART_RxCpltCallback+0x9a>
					portJ1_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 80023e6:	1c99      	adds	r1, r3, #2
 80023e8:	4a71      	ldr	r2, [pc, #452]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80023ea:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80023ee:	4a73      	ldr	r2, [pc, #460]	; (80025bc <HAL_UART_RxCpltCallback+0x25c>)
 80023f0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80023f4:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ1_anglevector.servonum;i++)
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4283      	cmp	r3, r0
 80023fc:	d3f3      	bcc.n	80023e6 <HAL_UART_RxCpltCallback+0x86>
				xQueueOverwriteFromISR(J1vectorqueueHandle,&portJ1_anglevector, &xHigherPriorityTaskWoken);
 80023fe:	2302      	movs	r3, #2
 8002400:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_UART_RxCpltCallback+0x254>)
 8002402:	496e      	ldr	r1, [pc, #440]	; (80025bc <HAL_UART_RxCpltCallback+0x25c>)
 8002404:	486e      	ldr	r0, [pc, #440]	; (80025c0 <HAL_UART_RxCpltCallback+0x260>)
 8002406:	6800      	ldr	r0, [r0, #0]
 8002408:	f005 f840 	bl	800748c <xQueueGenericSendFromISR>
				break;
 800240c:	e7bc      	b.n	8002388 <HAL_UART_RxCpltCallback+0x28>
				portJ2_anglevector.servonum = rx_buff[2]==0?portJ2_anglevector.servonum:rx_buff[2];
 800240e:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 8002410:	7898      	ldrb	r0, [r3, #2]
 8002412:	b908      	cbnz	r0, 8002418 <HAL_UART_RxCpltCallback+0xb8>
 8002414:	4b6b      	ldr	r3, [pc, #428]	; (80025c4 <HAL_UART_RxCpltCallback+0x264>)
 8002416:	7818      	ldrb	r0, [r3, #0]
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_UART_RxCpltCallback+0x264>)
 800241a:	7018      	strb	r0, [r3, #0]
				portJ2_anglevector.servoIDstart = rx_buff[3]==0?portJ2_anglevector.servoIDstart:rx_buff[3];
 800241c:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 800241e:	78db      	ldrb	r3, [r3, #3]
 8002420:	b90b      	cbnz	r3, 8002426 <HAL_UART_RxCpltCallback+0xc6>
 8002422:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_UART_RxCpltCallback+0x264>)
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	4a67      	ldr	r2, [pc, #412]	; (80025c4 <HAL_UART_RxCpltCallback+0x264>)
 8002428:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ2_anglevector.servonum;i++)
 800242a:	2300      	movs	r3, #0
 800242c:	e009      	b.n	8002442 <HAL_UART_RxCpltCallback+0xe2>
					portJ2_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 800242e:	1c99      	adds	r1, r3, #2
 8002430:	4a5f      	ldr	r2, [pc, #380]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 8002432:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002436:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <HAL_UART_RxCpltCallback+0x264>)
 8002438:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800243c:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ2_anglevector.servonum;i++)
 800243e:	3301      	adds	r3, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4283      	cmp	r3, r0
 8002444:	d3f3      	bcc.n	800242e <HAL_UART_RxCpltCallback+0xce>
				xQueueOverwriteFromISR(J2vectorqueueHandle,&portJ2_anglevector, &xHigherPriorityTaskWoken);
 8002446:	2302      	movs	r3, #2
 8002448:	4a5a      	ldr	r2, [pc, #360]	; (80025b4 <HAL_UART_RxCpltCallback+0x254>)
 800244a:	495e      	ldr	r1, [pc, #376]	; (80025c4 <HAL_UART_RxCpltCallback+0x264>)
 800244c:	485e      	ldr	r0, [pc, #376]	; (80025c8 <HAL_UART_RxCpltCallback+0x268>)
 800244e:	6800      	ldr	r0, [r0, #0]
 8002450:	f005 f81c 	bl	800748c <xQueueGenericSendFromISR>
				break;
 8002454:	e798      	b.n	8002388 <HAL_UART_RxCpltCallback+0x28>
				portJ3_anglevector.servonum = rx_buff[2]==0?portJ3_anglevector.servonum:rx_buff[2];
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 8002458:	7898      	ldrb	r0, [r3, #2]
 800245a:	b908      	cbnz	r0, 8002460 <HAL_UART_RxCpltCallback+0x100>
 800245c:	4b5b      	ldr	r3, [pc, #364]	; (80025cc <HAL_UART_RxCpltCallback+0x26c>)
 800245e:	7818      	ldrb	r0, [r3, #0]
 8002460:	4b5a      	ldr	r3, [pc, #360]	; (80025cc <HAL_UART_RxCpltCallback+0x26c>)
 8002462:	7018      	strb	r0, [r3, #0]
				portJ3_anglevector.servoIDstart = rx_buff[3]==0?portJ3_anglevector.servoIDstart:rx_buff[3];
 8002464:	4b52      	ldr	r3, [pc, #328]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 8002466:	78db      	ldrb	r3, [r3, #3]
 8002468:	b90b      	cbnz	r3, 800246e <HAL_UART_RxCpltCallback+0x10e>
 800246a:	4b58      	ldr	r3, [pc, #352]	; (80025cc <HAL_UART_RxCpltCallback+0x26c>)
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	4a57      	ldr	r2, [pc, #348]	; (80025cc <HAL_UART_RxCpltCallback+0x26c>)
 8002470:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ3_anglevector.servonum;i++)
 8002472:	2300      	movs	r3, #0
 8002474:	e009      	b.n	800248a <HAL_UART_RxCpltCallback+0x12a>
					portJ3_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 8002476:	1c99      	adds	r1, r3, #2
 8002478:	4a4d      	ldr	r2, [pc, #308]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 800247a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800247e:	4a53      	ldr	r2, [pc, #332]	; (80025cc <HAL_UART_RxCpltCallback+0x26c>)
 8002480:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002484:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ3_anglevector.servonum;i++)
 8002486:	3301      	adds	r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4283      	cmp	r3, r0
 800248c:	d3f3      	bcc.n	8002476 <HAL_UART_RxCpltCallback+0x116>
				xQueueOverwriteFromISR(J3vectorqueueHandle,&portJ3_anglevector, &xHigherPriorityTaskWoken);
 800248e:	2302      	movs	r3, #2
 8002490:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_UART_RxCpltCallback+0x254>)
 8002492:	494e      	ldr	r1, [pc, #312]	; (80025cc <HAL_UART_RxCpltCallback+0x26c>)
 8002494:	484e      	ldr	r0, [pc, #312]	; (80025d0 <HAL_UART_RxCpltCallback+0x270>)
 8002496:	6800      	ldr	r0, [r0, #0]
 8002498:	f004 fff8 	bl	800748c <xQueueGenericSendFromISR>
				break;
 800249c:	e774      	b.n	8002388 <HAL_UART_RxCpltCallback+0x28>
				portJ4_anglevector.servonum = rx_buff[2]==0?portJ4_anglevector.servonum:rx_buff[2];
 800249e:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80024a0:	7898      	ldrb	r0, [r3, #2]
 80024a2:	b908      	cbnz	r0, 80024a8 <HAL_UART_RxCpltCallback+0x148>
 80024a4:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <HAL_UART_RxCpltCallback+0x274>)
 80024a6:	7818      	ldrb	r0, [r3, #0]
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_UART_RxCpltCallback+0x274>)
 80024aa:	7018      	strb	r0, [r3, #0]
				portJ4_anglevector.servoIDstart = rx_buff[3]==0?portJ4_anglevector.servoIDstart:rx_buff[3];
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80024ae:	78db      	ldrb	r3, [r3, #3]
 80024b0:	b90b      	cbnz	r3, 80024b6 <HAL_UART_RxCpltCallback+0x156>
 80024b2:	4b48      	ldr	r3, [pc, #288]	; (80025d4 <HAL_UART_RxCpltCallback+0x274>)
 80024b4:	785b      	ldrb	r3, [r3, #1]
 80024b6:	4a47      	ldr	r2, [pc, #284]	; (80025d4 <HAL_UART_RxCpltCallback+0x274>)
 80024b8:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ4_anglevector.servonum;i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	e009      	b.n	80024d2 <HAL_UART_RxCpltCallback+0x172>
					portJ4_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 80024be:	1c99      	adds	r1, r3, #2
 80024c0:	4a3b      	ldr	r2, [pc, #236]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80024c2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80024c6:	4a43      	ldr	r2, [pc, #268]	; (80025d4 <HAL_UART_RxCpltCallback+0x274>)
 80024c8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80024cc:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ4_anglevector.servonum;i++)
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4283      	cmp	r3, r0
 80024d4:	d3f3      	bcc.n	80024be <HAL_UART_RxCpltCallback+0x15e>
				xQueueOverwriteFromISR(J4vectorqueueHandle,&portJ4_anglevector, &xHigherPriorityTaskWoken);
 80024d6:	2302      	movs	r3, #2
 80024d8:	4a36      	ldr	r2, [pc, #216]	; (80025b4 <HAL_UART_RxCpltCallback+0x254>)
 80024da:	493e      	ldr	r1, [pc, #248]	; (80025d4 <HAL_UART_RxCpltCallback+0x274>)
 80024dc:	483e      	ldr	r0, [pc, #248]	; (80025d8 <HAL_UART_RxCpltCallback+0x278>)
 80024de:	6800      	ldr	r0, [r0, #0]
 80024e0:	f004 ffd4 	bl	800748c <xQueueGenericSendFromISR>
				break;
 80024e4:	e750      	b.n	8002388 <HAL_UART_RxCpltCallback+0x28>
				portJ5_anglevector.servonum = rx_buff[2]==0?portJ5_anglevector.servonum:rx_buff[2];
 80024e6:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80024e8:	7898      	ldrb	r0, [r3, #2]
 80024ea:	b908      	cbnz	r0, 80024f0 <HAL_UART_RxCpltCallback+0x190>
 80024ec:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_UART_RxCpltCallback+0x27c>)
 80024ee:	7818      	ldrb	r0, [r3, #0]
 80024f0:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <HAL_UART_RxCpltCallback+0x27c>)
 80024f2:	7018      	strb	r0, [r3, #0]
				portJ5_anglevector.servoIDstart = rx_buff[3]==0?portJ5_anglevector.servoIDstart:rx_buff[3];
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 80024f6:	78db      	ldrb	r3, [r3, #3]
 80024f8:	b90b      	cbnz	r3, 80024fe <HAL_UART_RxCpltCallback+0x19e>
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_UART_RxCpltCallback+0x27c>)
 80024fc:	785b      	ldrb	r3, [r3, #1]
 80024fe:	4a37      	ldr	r2, [pc, #220]	; (80025dc <HAL_UART_RxCpltCallback+0x27c>)
 8002500:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ5_anglevector.servonum;i++)
 8002502:	2300      	movs	r3, #0
 8002504:	e009      	b.n	800251a <HAL_UART_RxCpltCallback+0x1ba>
					portJ5_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 8002506:	1c99      	adds	r1, r3, #2
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 800250a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800250e:	4a33      	ldr	r2, [pc, #204]	; (80025dc <HAL_UART_RxCpltCallback+0x27c>)
 8002510:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002514:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ5_anglevector.servonum;i++)
 8002516:	3301      	adds	r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4283      	cmp	r3, r0
 800251c:	d3f3      	bcc.n	8002506 <HAL_UART_RxCpltCallback+0x1a6>
				xQueueOverwriteFromISR(J5vectorqueueHandle,&portJ5_anglevector, &xHigherPriorityTaskWoken);
 800251e:	2302      	movs	r3, #2
 8002520:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <HAL_UART_RxCpltCallback+0x254>)
 8002522:	492e      	ldr	r1, [pc, #184]	; (80025dc <HAL_UART_RxCpltCallback+0x27c>)
 8002524:	482e      	ldr	r0, [pc, #184]	; (80025e0 <HAL_UART_RxCpltCallback+0x280>)
 8002526:	6800      	ldr	r0, [r0, #0]
 8002528:	f004 ffb0 	bl	800748c <xQueueGenericSendFromISR>
				break;
 800252c:	e72c      	b.n	8002388 <HAL_UART_RxCpltCallback+0x28>
				portJ6_anglevector.servonum = rx_buff[2]==0?portJ6_anglevector.servonum:rx_buff[2];
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 8002530:	7898      	ldrb	r0, [r3, #2]
 8002532:	b908      	cbnz	r0, 8002538 <HAL_UART_RxCpltCallback+0x1d8>
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_UART_RxCpltCallback+0x284>)
 8002536:	7818      	ldrb	r0, [r3, #0]
 8002538:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_UART_RxCpltCallback+0x284>)
 800253a:	7018      	strb	r0, [r3, #0]
				portJ6_anglevector.servoIDstart = rx_buff[3]==0?portJ6_anglevector.servoIDstart:rx_buff[3];
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 800253e:	78db      	ldrb	r3, [r3, #3]
 8002540:	b90b      	cbnz	r3, 8002546 <HAL_UART_RxCpltCallback+0x1e6>
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_UART_RxCpltCallback+0x284>)
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_UART_RxCpltCallback+0x284>)
 8002548:	7053      	strb	r3, [r2, #1]
				for(uint8_t i = 0;i<portJ6_anglevector.servonum;i++)
 800254a:	2300      	movs	r3, #0
 800254c:	e009      	b.n	8002562 <HAL_UART_RxCpltCallback+0x202>
					portJ6_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 800254e:	1c99      	adds	r1, r3, #2
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_UART_RxCpltCallback+0x250>)
 8002552:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002556:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <HAL_UART_RxCpltCallback+0x284>)
 8002558:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800255c:	8051      	strh	r1, [r2, #2]
				for(uint8_t i = 0;i<portJ6_anglevector.servonum;i++)
 800255e:	3301      	adds	r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4283      	cmp	r3, r0
 8002564:	d3f3      	bcc.n	800254e <HAL_UART_RxCpltCallback+0x1ee>
				xQueueOverwriteFromISR(J6vectorqueueHandle,&portJ6_anglevector, &xHigherPriorityTaskWoken);
 8002566:	2302      	movs	r3, #2
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_UART_RxCpltCallback+0x254>)
 800256a:	491e      	ldr	r1, [pc, #120]	; (80025e4 <HAL_UART_RxCpltCallback+0x284>)
 800256c:	481e      	ldr	r0, [pc, #120]	; (80025e8 <HAL_UART_RxCpltCallback+0x288>)
 800256e:	6800      	ldr	r0, [r0, #0]
 8002570:	f004 ff8c 	bl	800748c <xQueueGenericSendFromISR>
				break;
 8002574:	e708      	b.n	8002388 <HAL_UART_RxCpltCallback+0x28>
		if(rx_servo[0]-rx_servo[3] == 0xE0) //then data OK...
 8002576:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_UART_RxCpltCallback+0x28c>)
 8002578:	7813      	ldrb	r3, [r2, #0]
 800257a:	78d2      	ldrb	r2, [r2, #3]
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	2be0      	cmp	r3, #224	; 0xe0
 8002580:	f47f aefc 	bne.w	800237c <HAL_UART_RxCpltCallback+0x1c>
			data[0] = rx_servo[3];
 8002584:	f88d 2004 	strb.w	r2, [sp, #4]
			data[1] = rx_servo[4]>>1;
 8002588:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_UART_RxCpltCallback+0x28c>)
 800258a:	7913      	ldrb	r3, [r2, #4]
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	f88d 3005 	strb.w	r3, [sp, #5]
			data[2] = rx_servo[5];
 8002592:	7953      	ldrb	r3, [r2, #5]
 8002594:	f88d 3006 	strb.w	r3, [sp, #6]
			HAL_UART_Transmit(&huart8,data,2,1);
 8002598:	2301      	movs	r3, #1
 800259a:	2202      	movs	r2, #2
 800259c:	a901      	add	r1, sp, #4
 800259e:	4802      	ldr	r0, [pc, #8]	; (80025a8 <HAL_UART_RxCpltCallback+0x248>)
 80025a0:	f004 fa6b 	bl	8006a7a <HAL_UART_Transmit>
}
 80025a4:	e6ea      	b.n	800237c <HAL_UART_RxCpltCallback+0x1c>
 80025a6:	bf00      	nop
 80025a8:	200043bc 	.word	0x200043bc
 80025ac:	200044bc 	.word	0x200044bc
 80025b0:	200045b4 	.word	0x200045b4
 80025b4:	20000120 	.word	0x20000120
 80025b8:	e000ed04 	.word	0xe000ed04
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20003ee8 	.word	0x20003ee8
 80025c4:	20000018 	.word	0x20000018
 80025c8:	20003efc 	.word	0x20003efc
 80025cc:	20000030 	.word	0x20000030
 80025d0:	20003ef8 	.word	0x20003ef8
 80025d4:	20000048 	.word	0x20000048
 80025d8:	20003f00 	.word	0x20003f00
 80025dc:	20000060 	.word	0x20000060
 80025e0:	20003edc 	.word	0x20003edc
 80025e4:	20000078 	.word	0x20000078
 80025e8:	20003ee4 	.word	0x20003ee4
 80025ec:	200045cc 	.word	0x200045cc

080025f0 <StartLED1Task>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
/* StartLED1Task function */
void StartLED1Task(void const * argument)
{
 80025f0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartLED1Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 80025f2:	2104      	movs	r1, #4
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <StartLED1Task+0x14>)
 80025f6:	f001 fbfc 	bl	8003df2 <HAL_GPIO_TogglePin>
	  osDelay(300);
 80025fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025fe:	f004 fb34 	bl	8006c6a <osDelay>
 8002602:	e7f6      	b.n	80025f2 <StartLED1Task+0x2>
 8002604:	58021000 	.word	0x58021000

08002608 <StartLED2Task>:
  /* USER CODE END StartLED1Task */
}

/* StartLED2Task function */
void StartLED2Task(void const * argument)
{
 8002608:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartLED2Task */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800260a:	2108      	movs	r1, #8
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <StartLED2Task+0x14>)
 800260e:	f001 fbf0 	bl	8003df2 <HAL_GPIO_TogglePin>
	  osDelay(600);
 8002612:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002616:	f004 fb28 	bl	8006c6a <osDelay>
 800261a:	e7f6      	b.n	800260a <StartLED2Task+0x2>
 800261c:	58021000 	.word	0x58021000

08002620 <StartJ1uartport>:
uint8_t rx_servo[6];

/* StartJ1uartport function */
//uart2
void StartJ1uartport(void const * argument)
{
 8002620:	b530      	push	{r4, r5, lr}
 8002622:	b089      	sub	sp, #36	; 0x24
	//should divide them to two 7 bits byte
	//that is lowbyte = val&0x007f, highbyte = val&0x3f80 >> 7
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J1vectorqueueHandle,&anglevector,0)==pdPASS)
 8002624:	2301      	movs	r3, #1
 8002626:	2200      	movs	r2, #0
 8002628:	a902      	add	r1, sp, #8
 800262a:	481a      	ldr	r0, [pc, #104]	; (8002694 <StartJ1uartport+0x74>)
 800262c:	6800      	ldr	r0, [r0, #0]
 800262e:	f004 ffa5 	bl	800757c <xQueueGenericReceive>
 8002632:	2801      	cmp	r0, #1
 8002634:	d003      	beq.n	800263e <StartJ1uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f004 fb17 	bl	8006c6a <osDelay>
 800263c:	e7f2      	b.n	8002624 <StartJ1uartport+0x4>
 800263e:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 8002640:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002644:	429c      	cmp	r4, r3
 8002646:	d2ed      	bcs.n	8002624 <StartJ1uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002648:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800264c:	4423      	add	r3, r4
 800264e:	3b80      	subs	r3, #128	; 0x80
 8002650:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002654:	ab08      	add	r3, sp, #32
 8002656:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800265a:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800265e:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 8002662:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800266a:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 800266e:	3401      	adds	r4, #1
 8002670:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart2,datatosend,3,1);
 8002672:	4d09      	ldr	r5, [pc, #36]	; (8002698 <StartJ1uartport+0x78>)
 8002674:	2301      	movs	r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	a901      	add	r1, sp, #4
 800267a:	4628      	mov	r0, r5
 800267c:	f004 f9fd 	bl	8006a7a <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart2,rx_servo,6);
 8002680:	2206      	movs	r2, #6
 8002682:	4906      	ldr	r1, [pc, #24]	; (800269c <StartJ1uartport+0x7c>)
 8002684:	4628      	mov	r0, r5
 8002686:	f003 fb58 	bl	8005d3a <HAL_UART_Receive_IT>
				osDelay(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f004 faed 	bl	8006c6a <osDelay>
				if(motornum>=anglevector.servonum)
 8002690:	e7d6      	b.n	8002640 <StartJ1uartport+0x20>
 8002692:	bf00      	nop
 8002694:	20003ee8 	.word	0x20003ee8
 8002698:	200044bc 	.word	0x200044bc
 800269c:	200045cc 	.word	0x200045cc

080026a0 <StartJ2uartport>:
}

/* StartJ2uartport function */
//uart7
void StartJ2uartport(void const * argument)
{
 80026a0:	b510      	push	{r4, lr}
 80026a2:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J2vectorqueueHandle,&anglevector,0)==pdPASS)
 80026a4:	2301      	movs	r3, #1
 80026a6:	2200      	movs	r2, #0
 80026a8:	a902      	add	r1, sp, #8
 80026aa:	4817      	ldr	r0, [pc, #92]	; (8002708 <StartJ2uartport+0x68>)
 80026ac:	6800      	ldr	r0, [r0, #0]
 80026ae:	f004 ff65 	bl	800757c <xQueueGenericReceive>
 80026b2:	2801      	cmp	r0, #1
 80026b4:	d003      	beq.n	80026be <StartJ2uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f004 fad7 	bl	8006c6a <osDelay>
 80026bc:	e7f2      	b.n	80026a4 <StartJ2uartport+0x4>
 80026be:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 80026c0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80026c4:	429c      	cmp	r4, r3
 80026c6:	d2ed      	bcs.n	80026a4 <StartJ2uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80026c8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80026cc:	4423      	add	r3, r4
 80026ce:	3b80      	subs	r3, #128	; 0x80
 80026d0:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80026d4:	ab08      	add	r3, sp, #32
 80026d6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80026da:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 80026de:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 80026e2:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80026e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ea:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 80026ee:	3401      	adds	r4, #1
 80026f0:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart7,datatosend,3,1);
 80026f2:	2301      	movs	r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	a901      	add	r1, sp, #4
 80026f8:	4804      	ldr	r0, [pc, #16]	; (800270c <StartJ2uartport+0x6c>)
 80026fa:	f004 f9be 	bl	8006a7a <HAL_UART_Transmit>
				osDelay(1);
 80026fe:	2001      	movs	r0, #1
 8002700:	f004 fab3 	bl	8006c6a <osDelay>
				if(motornum>=anglevector.servonum)
 8002704:	e7dc      	b.n	80026c0 <StartJ2uartport+0x20>
 8002706:	bf00      	nop
 8002708:	20003efc 	.word	0x20003efc
 800270c:	20004054 	.word	0x20004054

08002710 <StartJ3uartport>:
}

/* StartJ3uartport function */
//uart5
void StartJ3uartport(void const * argument)
{
 8002710:	b510      	push	{r4, lr}
 8002712:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J3vectorqueueHandle,&anglevector,0)==pdPASS)
 8002714:	2301      	movs	r3, #1
 8002716:	2200      	movs	r2, #0
 8002718:	a902      	add	r1, sp, #8
 800271a:	4817      	ldr	r0, [pc, #92]	; (8002778 <StartJ3uartport+0x68>)
 800271c:	6800      	ldr	r0, [r0, #0]
 800271e:	f004 ff2d 	bl	800757c <xQueueGenericReceive>
 8002722:	2801      	cmp	r0, #1
 8002724:	d003      	beq.n	800272e <StartJ3uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002726:	2001      	movs	r0, #1
 8002728:	f004 fa9f 	bl	8006c6a <osDelay>
 800272c:	e7f2      	b.n	8002714 <StartJ3uartport+0x4>
 800272e:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 8002730:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002734:	429c      	cmp	r4, r3
 8002736:	d2ed      	bcs.n	8002714 <StartJ3uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002738:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800273c:	4423      	add	r3, r4
 800273e:	3b80      	subs	r3, #128	; 0x80
 8002740:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002744:	ab08      	add	r3, sp, #32
 8002746:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800274a:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800274e:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 8002752:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800275a:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 800275e:	3401      	adds	r4, #1
 8002760:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart5,datatosend,3,1);
 8002762:	2301      	movs	r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	a901      	add	r1, sp, #4
 8002768:	4804      	ldr	r0, [pc, #16]	; (800277c <StartJ3uartport+0x6c>)
 800276a:	f004 f986 	bl	8006a7a <HAL_UART_Transmit>
				osDelay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f004 fa7b 	bl	8006c6a <osDelay>
				if(motornum>=anglevector.servonum)
 8002774:	e7dc      	b.n	8002730 <StartJ3uartport+0x20>
 8002776:	bf00      	nop
 8002778:	20003ef8 	.word	0x20003ef8
 800277c:	200041cc 	.word	0x200041cc

08002780 <StartJ4uartport>:
}

/* StartJ4uartport function */
//uart4
void StartJ4uartport(void const * argument)
{
 8002780:	b510      	push	{r4, lr}
 8002782:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J4vectorqueueHandle,&anglevector,0)==pdPASS)
 8002784:	2301      	movs	r3, #1
 8002786:	2200      	movs	r2, #0
 8002788:	a902      	add	r1, sp, #8
 800278a:	4817      	ldr	r0, [pc, #92]	; (80027e8 <StartJ4uartport+0x68>)
 800278c:	6800      	ldr	r0, [r0, #0]
 800278e:	f004 fef5 	bl	800757c <xQueueGenericReceive>
 8002792:	2801      	cmp	r0, #1
 8002794:	d003      	beq.n	800279e <StartJ4uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002796:	2001      	movs	r0, #1
 8002798:	f004 fa67 	bl	8006c6a <osDelay>
 800279c:	e7f2      	b.n	8002784 <StartJ4uartport+0x4>
 800279e:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 80027a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80027a4:	429c      	cmp	r4, r3
 80027a6:	d2ed      	bcs.n	8002784 <StartJ4uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80027a8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80027ac:	4423      	add	r3, r4
 80027ae:	3b80      	subs	r3, #128	; 0x80
 80027b0:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80027b4:	ab08      	add	r3, sp, #32
 80027b6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80027ba:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 80027be:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 80027c2:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80027c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ca:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 80027ce:	3401      	adds	r4, #1
 80027d0:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart4,datatosend,3,1);
 80027d2:	2301      	movs	r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	a901      	add	r1, sp, #4
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <StartJ4uartport+0x6c>)
 80027da:	f004 f94e 	bl	8006a7a <HAL_UART_Transmit>
				osDelay(1);
 80027de:	2001      	movs	r0, #1
 80027e0:	f004 fa43 	bl	8006c6a <osDelay>
				if(motornum>=anglevector.servonum)
 80027e4:	e7dc      	b.n	80027a0 <StartJ4uartport+0x20>
 80027e6:	bf00      	nop
 80027e8:	20003f00 	.word	0x20003f00
 80027ec:	2000443c 	.word	0x2000443c

080027f0 <StartJ5uartport>:
}

/* StartJ5uartport function */
//uart3
void StartJ5uartport(void const * argument)
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J5vectorqueueHandle,&anglevector,0)==pdPASS)
 80027f4:	2301      	movs	r3, #1
 80027f6:	2200      	movs	r2, #0
 80027f8:	a902      	add	r1, sp, #8
 80027fa:	4817      	ldr	r0, [pc, #92]	; (8002858 <StartJ5uartport+0x68>)
 80027fc:	6800      	ldr	r0, [r0, #0]
 80027fe:	f004 febd 	bl	800757c <xQueueGenericReceive>
 8002802:	2801      	cmp	r0, #1
 8002804:	d003      	beq.n	800280e <StartJ5uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002806:	2001      	movs	r0, #1
 8002808:	f004 fa2f 	bl	8006c6a <osDelay>
 800280c:	e7f2      	b.n	80027f4 <StartJ5uartport+0x4>
 800280e:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 8002810:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002814:	429c      	cmp	r4, r3
 8002816:	d2ed      	bcs.n	80027f4 <StartJ5uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002818:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800281c:	4423      	add	r3, r4
 800281e:	3b80      	subs	r3, #128	; 0x80
 8002820:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002824:	ab08      	add	r3, sp, #32
 8002826:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800282a:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800282e:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 8002832:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800283a:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 800283e:	3401      	adds	r4, #1
 8002840:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart3,datatosend,3,1);
 8002842:	2301      	movs	r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	a901      	add	r1, sp, #4
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <StartJ5uartport+0x6c>)
 800284a:	f004 f916 	bl	8006a7a <HAL_UART_Transmit>
				osDelay(1);
 800284e:	2001      	movs	r0, #1
 8002850:	f004 fa0b 	bl	8006c6a <osDelay>
				if(motornum>=anglevector.servonum)
 8002854:	e7dc      	b.n	8002810 <StartJ5uartport+0x20>
 8002856:	bf00      	nop
 8002858:	20003edc 	.word	0x20003edc
 800285c:	2000414c 	.word	0x2000414c

08002860 <StartJ6uartport>:
}

/* StartJ6uartport function */
//uart1
void StartJ6uartport(void const * argument)
{
 8002860:	b510      	push	{r4, lr}
 8002862:	b088      	sub	sp, #32
	pvector anglevector;
	uint8_t motornum = 0;
	for(;;)
	{
		//wait for the vector data..
		if(xQueuePeek(J6vectorqueueHandle,&anglevector,0)==pdPASS)
 8002864:	2301      	movs	r3, #1
 8002866:	2200      	movs	r2, #0
 8002868:	a902      	add	r1, sp, #8
 800286a:	4817      	ldr	r0, [pc, #92]	; (80028c8 <StartJ6uartport+0x68>)
 800286c:	6800      	ldr	r0, [r0, #0]
 800286e:	f004 fe85 	bl	800757c <xQueueGenericReceive>
 8002872:	2801      	cmp	r0, #1
 8002874:	d003      	beq.n	800287e <StartJ6uartport+0x1e>
				//delayUs(100);
				osDelay(1);
			}
		}
		else
			osDelay(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f004 f9f7 	bl	8006c6a <osDelay>
 800287c:	e7f2      	b.n	8002864 <StartJ6uartport+0x4>
 800287e:	2400      	movs	r4, #0
				if(motornum>=anglevector.servonum)
 8002880:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002884:	429c      	cmp	r4, r3
 8002886:	d2ed      	bcs.n	8002864 <StartJ6uartport+0x4>
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002888:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800288c:	4423      	add	r3, r4
 800288e:	3b80      	subs	r3, #128	; 0x80
 8002890:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002894:	ab08      	add	r3, sp, #32
 8002896:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800289a:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800289e:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 80028a2:	f88d 2005 	strb.w	r2, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80028a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028aa:	f88d 3006 	strb.w	r3, [sp, #6]
				motornum++;
 80028ae:	3401      	adds	r4, #1
 80028b0:	b2e4      	uxtb	r4, r4
				HAL_UART_Transmit(&huart1,datatosend,3,1);
 80028b2:	2301      	movs	r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	a901      	add	r1, sp, #4
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <StartJ6uartport+0x6c>)
 80028ba:	f004 f8de 	bl	8006a7a <HAL_UART_Transmit>
				osDelay(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f004 f9d3 	bl	8006c6a <osDelay>
				if(motornum>=anglevector.servonum)
 80028c4:	e7dc      	b.n	8002880 <StartJ6uartport+0x20>
 80028c6:	bf00      	nop
 80028c8:	20003ee4 	.word	0x20003ee4
 80028cc:	2000433c 	.word	0x2000433c

080028d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d0:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028d2:	4915      	ldr	r1, [pc, #84]	; (8002928 <SystemInit+0x58>)
 80028d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <SystemInit+0x5c>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80028ee:	681c      	ldr	r4, [r3, #0]
 80028f0:	480f      	ldr	r0, [pc, #60]	; (8002930 <SystemInit+0x60>)
 80028f2:	4020      	ands	r0, r4
 80028f4:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028fa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002902:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002904:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800290a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002912:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002914:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002916:	2201      	movs	r2, #1
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <SystemInit+0x64>)
 800291a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800291c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002920:	608b      	str	r3, [r1, #8]
#endif

}
 8002922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00
 800292c:	58024400 	.word	0x58024400
 8002930:	eaf6ed7f 	.word	0xeaf6ed7f
 8002934:	51008108 	.word	0x51008108

08002938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b510      	push	{r4, lr}
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293a:	2003      	movs	r0, #3
 800293c:	f000 fd4e 	bl	80033dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002940:	2000      	movs	r0, #0
 8002942:	f7ff f9ab 	bl	8001c9c <HAL_InitTick>
 8002946:	b110      	cbz	r0, 800294e <HAL_Init+0x16>
  {
    return HAL_ERROR;
 8002948:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800294a:	4620      	mov	r0, r4
 800294c:	bd10      	pop	{r4, pc}
 800294e:	4604      	mov	r4, r0
  HAL_MspInit();
 8002950:	f7ff f962 	bl	8001c18 <HAL_MspInit>
  return HAL_OK;
 8002954:	e7f9      	b.n	800294a <HAL_Init+0x12>
	...

08002958 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_IncTick+0x10>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4a03      	ldr	r2, [pc, #12]	; (800296c <HAL_IncTick+0x14>)
 800295e:	6811      	ldr	r1, [r2, #0]
 8002960:	440b      	add	r3, r1
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000098 	.word	0x20000098
 800296c:	20000124 	.word	0x20000124

08002970 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <HAL_GetTick+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000124 	.word	0x20000124

0800297c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800297c:	b530      	push	{r4, r5, lr}
 800297e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if(hadc == NULL)
 8002984:	2800      	cmp	r0, #0
 8002986:	f000 8167 	beq.w	8002c58 <HAL_ADC_Init+0x2dc>
 800298a:	4604      	mov	r4, r0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));


  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800298c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800298e:	b1e3      	cbz	r3, 80029ca <HAL_ADC_Init+0x4e>
  }


  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state                        */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002998:	d003      	beq.n	80029a2 <HAL_ADC_Init+0x26>
  {
    /* Exit deep power down mode */
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80029a0:	609a      	str	r2, [r3, #8]
       be relaunched or a previously saved calibration factor
       re-applied once the ADC voltage regulator is enabled   */
  }


  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80029aa:	d11b      	bne.n	80029e4 <HAL_ADC_Init+0x68>
  {
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029b2:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time                                       */
    /* Wait loop initialization and execution                                 */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 80029b4:	4ba9      	ldr	r3, [pc, #676]	; (8002c5c <HAL_ADC_Init+0x2e0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4aa9      	ldr	r2, [pc, #676]	; (8002c60 <HAL_ADC_Init+0x2e4>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0cdb      	lsrs	r3, r3, #19
 80029c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029c4:	005a      	lsls	r2, r3, #1
 80029c6:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80029c8:	e009      	b.n	80029de <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 80029ca:	f7fe fe05 	bl	80015d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80029ce:	2300      	movs	r3, #0
 80029d0:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80029d2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80029d6:	e7db      	b.n	8002990 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80029d8:	9b01      	ldr	r3, [sp, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80029de:	9b01      	ldr	r3, [sp, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f9      	bne.n	80029d8 <HAL_ADC_Init+0x5c>


  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80029ec:	d143      	bne.n	8002a76 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029f0:	f042 0210 	orr.w	r2, r2, #16
 80029f4:	6562      	str	r2, [r4, #84]	; 0x54

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	65a2      	str	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029fe:	2001      	movs	r0, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a02:	f012 0f10 	tst.w	r2, #16
 8002a06:	f040 8120 	bne.w	8002c4a <HAL_ADC_Init+0x2ce>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 8002a0a:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a0c:	f012 0f04 	tst.w	r2, #4
 8002a10:	f040 811b 	bne.w	8002c4a <HAL_ADC_Init+0x2ce>
  {

    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002a14:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a16:	f042 0202 	orr.w	r2, r2, #2
 8002a1a:	6562      	str	r2, [r4, #84]	; 0x54

    /* Configuration of common ADC parameters                                 */

    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8002a1c:	4a91      	ldr	r2, [pc, #580]	; (8002c64 <HAL_ADC_Init+0x2e8>)
 8002a1e:	4992      	ldr	r1, [pc, #584]	; (8002c68 <HAL_ADC_Init+0x2ec>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bf18      	it	ne
 8002a24:	428b      	cmpne	r3, r1
 8002a26:	d128      	bne.n	8002a7a <HAL_ADC_Init+0xfe>
    {
      /* Pointer to the common control register                               */
      tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8002a28:	f501 7140 	add.w	r1, r1, #768	; 0x300
    }

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	2a01      	cmp	r2, #1
 8002a34:	d023      	beq.n	8002a7e <HAL_ADC_Init+0x102>
 8002a36:	2200      	movs	r2, #0
 8002a38:	2a00      	cmp	r2, #0
 8002a3a:	d17a      	bne.n	8002b32 <HAL_ADC_Init+0x1b6>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8002a3c:	4d8a      	ldr	r5, [pc, #552]	; (8002c68 <HAL_ADC_Init+0x2ec>)
 8002a3e:	42ab      	cmp	r3, r5
 8002a40:	d025      	beq.n	8002a8e <HAL_ADC_Init+0x112>
 8002a42:	4d88      	ldr	r5, [pc, #544]	; (8002c64 <HAL_ADC_Init+0x2e8>)
 8002a44:	42ab      	cmp	r3, r5
 8002a46:	d03f      	beq.n	8002ac8 <HAL_ADC_Init+0x14c>
 8002a48:	4b87      	ldr	r3, [pc, #540]	; (8002c68 <HAL_ADC_Init+0x2ec>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d05b      	beq.n	8002b0c <HAL_ADC_Init+0x190>
 8002a54:	4613      	mov	r3, r2
 8002a56:	f013 0f01 	tst.w	r3, #1
 8002a5a:	d160      	bne.n	8002b1e <HAL_ADC_Init+0x1a2>
 8002a5c:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <HAL_ADC_Init+0x2e8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d15b      	bne.n	8002b20 <HAL_ADC_Init+0x1a4>
 8002a68:	4b7e      	ldr	r3, [pc, #504]	; (8002c64 <HAL_ADC_Init+0x2e8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f013 0f01 	tst.w	r3, #1
 8002a70:	d056      	beq.n	8002b20 <HAL_ADC_Init+0x1a4>
 8002a72:	2201      	movs	r2, #1
 8002a74:	e054      	b.n	8002b20 <HAL_ADC_Init+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a76:	2000      	movs	r0, #0
 8002a78:	e7c2      	b.n	8002a00 <HAL_ADC_Init+0x84>
      tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8002a7a:	497c      	ldr	r1, [pc, #496]	; (8002c6c <HAL_ADC_Init+0x2f0>)
 8002a7c:	e7d6      	b.n	8002a2c <HAL_ADC_Init+0xb0>
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f012 0f01 	tst.w	r2, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_Init+0x10e>
 8002a86:	2200      	movs	r2, #0
 8002a88:	e7d6      	b.n	8002a38 <HAL_ADC_Init+0xbc>
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	e7d4      	b.n	8002a38 <HAL_ADC_Init+0xbc>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8002a8e:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <HAL_ADC_Init+0x2e8>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d008      	beq.n	8002aac <HAL_ADC_Init+0x130>
 8002a9a:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <HAL_ADC_Init+0x2f4>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d009      	beq.n	8002aba <HAL_ADC_Init+0x13e>
 8002aa6:	f082 0201 	eor.w	r2, r2, #1
 8002aaa:	e03b      	b.n	8002b24 <HAL_ADC_Init+0x1a8>
 8002aac:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_ADC_Init+0x2e8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f013 0f01 	tst.w	r3, #1
 8002ab4:	d0f1      	beq.n	8002a9a <HAL_ADC_Init+0x11e>
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	e7f5      	b.n	8002aa6 <HAL_ADC_Init+0x12a>
 8002aba:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_ADC_Init+0x2f4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f013 0f01 	tst.w	r3, #1
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_ADC_Init+0x12a>
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	e7ee      	b.n	8002aa6 <HAL_ADC_Init+0x12a>
 8002ac8:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <HAL_ADC_Init+0x2ec>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d00b      	beq.n	8002aec <HAL_ADC_Init+0x170>
 8002ad4:	4b66      	ldr	r3, [pc, #408]	; (8002c70 <HAL_ADC_Init+0x2f4>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d00c      	beq.n	8002afa <HAL_ADC_Init+0x17e>
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	f013 0f01 	tst.w	r3, #1
 8002ae6:	d0b9      	beq.n	8002a5c <HAL_ADC_Init+0xe0>
 8002ae8:	2201      	movs	r2, #1
 8002aea:	e019      	b.n	8002b20 <HAL_ADC_Init+0x1a4>
 8002aec:	4b5e      	ldr	r3, [pc, #376]	; (8002c68 <HAL_ADC_Init+0x2ec>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f013 0f01 	tst.w	r3, #1
 8002af4:	d0ee      	beq.n	8002ad4 <HAL_ADC_Init+0x158>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e7f3      	b.n	8002ae2 <HAL_ADC_Init+0x166>
 8002afa:	4b5d      	ldr	r3, [pc, #372]	; (8002c70 <HAL_ADC_Init+0x2f4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f013 0f01 	tst.w	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_Init+0x18c>
 8002b04:	4613      	mov	r3, r2
 8002b06:	e7ec      	b.n	8002ae2 <HAL_ADC_Init+0x166>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e7ea      	b.n	8002ae2 <HAL_ADC_Init+0x166>
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_ADC_Init+0x2ec>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f013 0f01 	tst.w	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Init+0x19e>
 8002b16:	4613      	mov	r3, r2
 8002b18:	e79d      	b.n	8002a56 <HAL_ADC_Init+0xda>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e79b      	b.n	8002a56 <HAL_ADC_Init+0xda>
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f082 0201 	eor.w	r2, r2, #1
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002b24:	b12a      	cbz	r2, 8002b32 <HAL_ADC_Init+0x1b6>
      /*     HAL_ADCEx_MultiModeConfigChannel())                              */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */

      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 8002b26:	688b      	ldr	r3, [r1, #8]
 8002b28:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002b2c:	6862      	ldr	r2, [r4, #4]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002b32:	7d63      	ldrb	r3, [r4, #21]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b38:	fa92 f2a2 	rbit	r2, r2
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	4093      	lsls	r3, r2
                 hadc->Init.Overrun                                          |
 8002b42:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002b44:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                       |
 8002b46:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.Overrun                                          |
 8002b48:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8002b4a:	7f21      	ldrb	r1, [r4, #28]
 8002b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002b5c:	4313      	orrs	r3, r2

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b5e:	2901      	cmp	r1, #1
 8002b60:	d048      	beq.n	8002bf4 <HAL_ADC_Init+0x278>
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	d003      	beq.n	8002b70 <HAL_ADC_Init+0x1f4>
        && (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 8002b68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b6a:	b109      	cbz	r1, 8002b70 <HAL_ADC_Init+0x1f4>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	4313      	orrs	r3, r2
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b70:	6821      	ldr	r1, [r4, #0]
 8002b72:	68cd      	ldr	r5, [r1, #12]
 8002b74:	4a3f      	ldr	r2, [pc, #252]	; (8002c74 <HAL_ADC_Init+0x2f8>)
 8002b76:	402a      	ands	r2, r5
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    /*  - Boost Mode                      BoostMode                           */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b7c:	6822      	ldr	r2, [r4, #0]
 8002b7e:	6893      	ldr	r3, [r2, #8]
 8002b80:	f013 0f0c 	tst.w	r3, #12
 8002b84:	d127      	bne.n	8002bd6 <HAL_ADC_Init+0x25a>
    {
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002b86:	7d23      	ldrb	r3, [r4, #20]
 8002b88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b8c:	fa91 f1a1 	rbit	r1, r1
 8002b90:	fab1 f181 	clz	r1, r1
 8002b94:	408b      	lsls	r3, r1
                  ADC_CFGR_DMACONTREQ(hadc->Init.ConversionDataManagement) );
 8002b96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002b98:	430b      	orrs	r3, r1

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b9a:	68d5      	ldr	r5, [r2, #12]
 8002b9c:	4936      	ldr	r1, [pc, #216]	; (8002c78 <HAL_ADC_Init+0x2fc>)
 8002b9e:	4029      	ands	r1, r5
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	60d3      	str	r3, [r2, #12]


      if (hadc->Init.OversamplingMode == ENABLE)
 8002ba4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d02e      	beq.n	8002c0a <HAL_ADC_Init+0x28e>
                                         hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	6913      	ldr	r3, [r2, #16]
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6113      	str	r3, [r2, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	6913      	ldr	r3, [r2, #16]
 8002bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6113      	str	r3, [r2, #16]

      /* Configure the BOOST Mode */
      if(hadc->Init.BoostMode == ENABLE)
 8002bc4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d02f      	beq.n	8002c2c <HAL_ADC_Init+0x2b0>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8002bcc:	6822      	ldr	r2, [r4, #0]
 8002bce:	6893      	ldr	r3, [r2, #8]
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd4:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bd6:	68e3      	ldr	r3, [r4, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d02d      	beq.n	8002c38 <HAL_ADC_Init+0x2bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002be0:	f023 030f 	bic.w	r3, r3, #15
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
    }


    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002be6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002be8:	f023 0303 	bic.w	r3, r3, #3
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6563      	str	r3, [r4, #84]	; 0x54
 8002bf2:	e02f      	b.n	8002c54 <HAL_ADC_Init+0x2d8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bf4:	6a22      	ldr	r2, [r4, #32]
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8002bfc:	fa91 f1a1 	rbit	r1, r1
 8002c00:	fab1 f181 	clz	r1, r1
 8002c04:	408a      	lsls	r2, r1
 8002c06:	4313      	orrs	r3, r2
 8002c08:	e7ab      	b.n	8002b62 <HAL_ADC_Init+0x1e6>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c0a:	6821      	ldr	r1, [r4, #0]
 8002c0c:	690a      	ldr	r2, [r1, #16]
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_ADC_Init+0x300>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002c14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c16:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002c1a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002c1c:	432a      	orrs	r2, r5
 8002c1e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002c20:	432a      	orrs	r2, r5
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	610b      	str	r3, [r1, #16]
 8002c2a:	e7c4      	b.n	8002bb6 <HAL_ADC_Init+0x23a>
        SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	6893      	ldr	r3, [r2, #8]
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6093      	str	r3, [r2, #8]
 8002c36:	e7ce      	b.n	8002bd6 <HAL_ADC_Init+0x25a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c38:	6821      	ldr	r1, [r4, #0]
 8002c3a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002c3c:	f023 030f 	bic.w	r3, r3, #15
 8002c40:	69a2      	ldr	r2, [r4, #24]
 8002c42:	3a01      	subs	r2, #1
 8002c44:	4313      	orrs	r3, r2
 8002c46:	630b      	str	r3, [r1, #48]	; 0x30
 8002c48:	e7cd      	b.n	8002be6 <HAL_ADC_Init+0x26a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c4c:	f043 0310 	orr.w	r3, r3, #16
 8002c50:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c52:	2001      	movs	r0, #1


  /* Return function status */
  return tmp_hal_status;

}
 8002c54:	b003      	add	sp, #12
 8002c56:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002c58:	2001      	movs	r0, #1
 8002c5a:	e7fb      	b.n	8002c54 <HAL_ADC_Init+0x2d8>
 8002c5c:	20000090 	.word	0x20000090
 8002c60:	431bde83 	.word	0x431bde83
 8002c64:	40022100 	.word	0x40022100
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	58026300 	.word	0x58026300
 8002c70:	58026000 	.word	0x58026000
 8002c74:	fff0c003 	.word	0xfff0c003
 8002c78:	ffffbffc 	.word	0xffffbffc
 8002c7c:	fc00f81e 	.word	0xfc00f81e

08002c80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8002c84:	2200      	movs	r2, #0
 8002c86:	9201      	str	r2, [sp, #4]
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c88:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8002c8c:	2a01      	cmp	r2, #1
 8002c8e:	f000 82f7 	beq.w	8003280 <HAL_ADC_ConfigChannel+0x600>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2201      	movs	r2, #1
 8002c96:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  /*  - Preselection of ADC inputs                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c9a:	6802      	ldr	r2, [r0, #0]
 8002c9c:	6890      	ldr	r0, [r2, #8]
 8002c9e:	f010 0f04 	tst.w	r0, #4
 8002ca2:	f040 82e1 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x5e8>
  {
    /* ADC channels preselction */
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 8002ca6:	69d0      	ldr	r0, [r2, #28]
 8002ca8:	680d      	ldr	r5, [r1, #0]
 8002caa:	2401      	movs	r4, #1
 8002cac:	40ac      	lsls	r4, r5
 8002cae:	4320      	orrs	r0, r4
 8002cb0:	61d0      	str	r0, [r2, #28]

    /* Regular sequence configuration */
    /* Clear the old SQx bits then set the new ones for the selected rank */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 8002cb2:	684a      	ldr	r2, [r1, #4]
 8002cb4:	2a04      	cmp	r2, #4
 8002cb6:	d84f      	bhi.n	8002d58 <HAL_ADC_ConfigChannel+0xd8>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002cb8:	681e      	ldr	r6, [r3, #0]
 8002cba:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8002cbc:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 8002cc0:	fa90 f4a0 	rbit	r4, r0
 8002cc4:	fab4 f484 	clz	r4, r4
 8002cc8:	fb04 f402 	mul.w	r4, r4, r2
 8002ccc:	271f      	movs	r7, #31
 8002cce:	fa07 f404 	lsl.w	r4, r7, r4
 8002cd2:	ea25 0504 	bic.w	r5, r5, r4
 8002cd6:	680c      	ldr	r4, [r1, #0]
 8002cd8:	fa90 f0a0 	rbit	r0, r0
 8002cdc:	fab0 f080 	clz	r0, r0
 8002ce0:	fb00 f202 	mul.w	r2, r0, r2
 8002ce4:	fa04 f202 	lsl.w	r2, r4, r2
 8002ce8:	432a      	orrs	r2, r5
 8002cea:	6332      	str	r2, [r6, #48]	; 0x30
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	6890      	ldr	r0, [r2, #8]
 8002cf0:	f010 0f0c 	tst.w	r0, #12
 8002cf4:	f040 816c 	bne.w	8002fd0 <HAL_ADC_ConfigChannel+0x350>
    {

      /* Channel sampling time configuration */
      /* Clear the old sample time then set the new one for the selected channel */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cf8:	6808      	ldr	r0, [r1, #0]
 8002cfa:	2809      	cmp	r0, #9
 8002cfc:	f240 8084 	bls.w	8002e08 <HAL_ADC_ConfigChannel+0x188>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002d00:	6996      	ldr	r6, [r2, #24]
 8002d02:	2438      	movs	r4, #56	; 0x38
 8002d04:	fa94 f5a4 	rbit	r5, r4
 8002d08:	fab5 f585 	clz	r5, r5
 8002d0c:	380a      	subs	r0, #10
 8002d0e:	fb00 f505 	mul.w	r5, r0, r5
 8002d12:	2707      	movs	r7, #7
 8002d14:	fa07 f505 	lsl.w	r5, r7, r5
 8002d18:	ea26 0605 	bic.w	r6, r6, r5
 8002d1c:	688d      	ldr	r5, [r1, #8]
 8002d1e:	fa94 f4a4 	rbit	r4, r4
 8002d22:	fab4 f484 	clz	r4, r4
 8002d26:	fb04 f000 	mul.w	r0, r4, r0
 8002d2a:	fa05 f000 	lsl.w	r0, r5, r0
 8002d2e:	4330      	orrs	r0, r6
 8002d30:	6190      	str	r0, [r2, #24]

      /* Configure the offset: offset enable/disable, channel, offset value, Signed saturation feature */
     
      /* Shift the offset in function of the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d32:	6948      	ldr	r0, [r1, #20]
 8002d34:	681c      	ldr	r4, [r3, #0]
 8002d36:	68e2      	ldr	r2, [r4, #12]
 8002d38:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8002d3c:	0052      	lsls	r2, r2, #1
 8002d3e:	fa00 f202 	lsl.w	r2, r0, r2
     
      switch (sConfig->OffsetNumber)
 8002d42:	6908      	ldr	r0, [r1, #16]
 8002d44:	3801      	subs	r0, #1
 8002d46:	2803      	cmp	r0, #3
 8002d48:	f200 8107 	bhi.w	8002f5a <HAL_ADC_ConfigChannel+0x2da>
 8002d4c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002d50:	00980075 	.word	0x00980075
 8002d54:	00e000bc 	.word	0x00e000bc
    else if (sConfig->Rank < 10)
 8002d58:	2a09      	cmp	r2, #9
 8002d5a:	d81b      	bhi.n	8002d94 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->SQR2,
 8002d5c:	681e      	ldr	r6, [r3, #0]
 8002d5e:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8002d60:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 8002d64:	fa90 f5a0 	rbit	r5, r0
 8002d68:	fab5 f585 	clz	r5, r5
 8002d6c:	3a05      	subs	r2, #5
 8002d6e:	fb02 f505 	mul.w	r5, r2, r5
 8002d72:	271f      	movs	r7, #31
 8002d74:	fa07 f505 	lsl.w	r5, r7, r5
 8002d78:	ea24 0405 	bic.w	r4, r4, r5
 8002d7c:	680d      	ldr	r5, [r1, #0]
 8002d7e:	fa90 f0a0 	rbit	r0, r0
 8002d82:	fab0 f080 	clz	r0, r0
 8002d86:	fb00 f202 	mul.w	r2, r0, r2
 8002d8a:	fa05 f202 	lsl.w	r2, r5, r2
 8002d8e:	4322      	orrs	r2, r4
 8002d90:	6372      	str	r2, [r6, #52]	; 0x34
 8002d92:	e7ab      	b.n	8002cec <HAL_ADC_ConfigChannel+0x6c>
    else if (sConfig->Rank < 15)
 8002d94:	2a0e      	cmp	r2, #14
 8002d96:	d81b      	bhi.n	8002dd0 <HAL_ADC_ConfigChannel+0x150>
      MODIFY_REG(hadc->Instance->SQR3,
 8002d98:	681e      	ldr	r6, [r3, #0]
 8002d9a:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8002d9c:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 8002da0:	fa90 f5a0 	rbit	r5, r0
 8002da4:	fab5 f585 	clz	r5, r5
 8002da8:	3a0a      	subs	r2, #10
 8002daa:	fb02 f505 	mul.w	r5, r2, r5
 8002dae:	271f      	movs	r7, #31
 8002db0:	fa07 f505 	lsl.w	r5, r7, r5
 8002db4:	ea24 0405 	bic.w	r4, r4, r5
 8002db8:	680d      	ldr	r5, [r1, #0]
 8002dba:	fa90 f0a0 	rbit	r0, r0
 8002dbe:	fab0 f080 	clz	r0, r0
 8002dc2:	fb00 f202 	mul.w	r2, r0, r2
 8002dc6:	fa05 f202 	lsl.w	r2, r5, r2
 8002dca:	4322      	orrs	r2, r4
 8002dcc:	63b2      	str	r2, [r6, #56]	; 0x38
 8002dce:	e78d      	b.n	8002cec <HAL_ADC_ConfigChannel+0x6c>
      MODIFY_REG(hadc->Instance->SQR4,
 8002dd0:	681e      	ldr	r6, [r3, #0]
 8002dd2:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
 8002dd4:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 8002dd8:	fa90 f4a0 	rbit	r4, r0
 8002ddc:	fab4 f484 	clz	r4, r4
 8002de0:	3a0f      	subs	r2, #15
 8002de2:	fb02 f404 	mul.w	r4, r2, r4
 8002de6:	271f      	movs	r7, #31
 8002de8:	fa07 f404 	lsl.w	r4, r7, r4
 8002dec:	ea25 0504 	bic.w	r5, r5, r4
 8002df0:	680c      	ldr	r4, [r1, #0]
 8002df2:	fa90 f0a0 	rbit	r0, r0
 8002df6:	fab0 f080 	clz	r0, r0
 8002dfa:	fb00 f202 	mul.w	r2, r0, r2
 8002dfe:	fa04 f202 	lsl.w	r2, r4, r2
 8002e02:	432a      	orrs	r2, r5
 8002e04:	63f2      	str	r2, [r6, #60]	; 0x3c
 8002e06:	e771      	b.n	8002cec <HAL_ADC_ConfigChannel+0x6c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002e08:	6956      	ldr	r6, [r2, #20]
 8002e0a:	2438      	movs	r4, #56	; 0x38
 8002e0c:	fa94 f5a4 	rbit	r5, r4
 8002e10:	fab5 f585 	clz	r5, r5
 8002e14:	fb05 f500 	mul.w	r5, r5, r0
 8002e18:	2707      	movs	r7, #7
 8002e1a:	fa07 f505 	lsl.w	r5, r7, r5
 8002e1e:	ea26 0605 	bic.w	r6, r6, r5
 8002e22:	688d      	ldr	r5, [r1, #8]
 8002e24:	fa94 f4a4 	rbit	r4, r4
 8002e28:	fab4 f484 	clz	r4, r4
 8002e2c:	fb04 f000 	mul.w	r0, r4, r0
 8002e30:	fa05 f000 	lsl.w	r0, r5, r0
 8002e34:	4330      	orrs	r0, r6
 8002e36:	6150      	str	r0, [r2, #20]
 8002e38:	e77b      	b.n	8002d32 <HAL_ADC_ConfigChannel+0xb2>
         /* - Enable offset                                                      */
         /* - Set channel number                                                 */
         /* - Set offset value                                                   */
         /* - Set Right shift after offset application                           */
        case ADC_OFFSET_1:
           MODIFY_REG(hadc->Instance->OFR1,
 8002e3a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002e3c:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8002e40:	6808      	ldr	r0, [r1, #0]
 8002e42:	f04f 46f8 	mov.w	r6, #2080374784	; 0x7c000000
 8002e46:	fa96 f6a6 	rbit	r6, r6
 8002e4a:	fab6 f686 	clz	r6, r6
 8002e4e:	40b0      	lsls	r0, r6
 8002e50:	4302      	orrs	r2, r0
 8002e52:	432a      	orrs	r2, r5
 8002e54:	6622      	str	r2, [r4, #96]	; 0x60
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT1, sConfig->OffsetRightShift);
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	6902      	ldr	r2, [r0, #16]
 8002e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5e:	7e0c      	ldrb	r4, [r1, #24]
 8002e60:	4322      	orrs	r2, r4
 8002e62:	6102      	str	r2, [r0, #16]
           /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8002e64:	7e4a      	ldrb	r2, [r1, #25]
 8002e66:	b12a      	cbz	r2, 8002e74 <HAL_ADC_ConfigChannel+0x1f4>
           {
              SET_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002e6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e70:	6602      	str	r2, [r0, #96]	; 0x60
 8002e72:	e0ad      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002e78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e7c:	6602      	str	r2, [r0, #96]	; 0x60
 8002e7e:	e0a7      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
           }
          break;
        
        case ADC_OFFSET_2:
          MODIFY_REG(hadc->Instance->OFR2,
 8002e80:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002e82:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8002e86:	6808      	ldr	r0, [r1, #0]
 8002e88:	f04f 46f8 	mov.w	r6, #2080374784	; 0x7c000000
 8002e8c:	fa96 f6a6 	rbit	r6, r6
 8002e90:	fab6 f686 	clz	r6, r6
 8002e94:	40b0      	lsls	r0, r6
 8002e96:	4302      	orrs	r2, r0
 8002e98:	432a      	orrs	r2, r5
 8002e9a:	6662      	str	r2, [r4, #100]	; 0x64
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT2, (sConfig->OffsetRightShift)<<1);
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	6902      	ldr	r2, [r0, #16]
 8002ea0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ea4:	7e0c      	ldrb	r4, [r1, #24]
 8002ea6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8002eaa:	6102      	str	r2, [r0, #16]
          /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8002eac:	7e4a      	ldrb	r2, [r1, #25]
 8002eae:	b12a      	cbz	r2, 8002ebc <HAL_ADC_ConfigChannel+0x23c>
           {
              SET_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002eb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002eb8:	6642      	str	r2, [r0, #100]	; 0x64
 8002eba:	e089      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002ec0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ec4:	6642      	str	r2, [r0, #100]	; 0x64
 8002ec6:	e083      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
           }
          break;
        
        case ADC_OFFSET_3:
          MODIFY_REG(hadc->Instance->OFR3,
 8002ec8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8002eca:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8002ece:	6808      	ldr	r0, [r1, #0]
 8002ed0:	f04f 46f8 	mov.w	r6, #2080374784	; 0x7c000000
 8002ed4:	fa96 f6a6 	rbit	r6, r6
 8002ed8:	fab6 f686 	clz	r6, r6
 8002edc:	40b0      	lsls	r0, r6
 8002ede:	4302      	orrs	r2, r0
 8002ee0:	432a      	orrs	r2, r5
 8002ee2:	66a2      	str	r2, [r4, #104]	; 0x68
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT3, (sConfig->OffsetRightShift)<<2);
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	6902      	ldr	r2, [r0, #16]
 8002ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eec:	7e0c      	ldrb	r4, [r1, #24]
 8002eee:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8002ef2:	6102      	str	r2, [r0, #16]
          /* Enable or disable the signed saturation bit */
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8002ef4:	7e4a      	ldrb	r2, [r1, #25]
 8002ef6:	b12a      	cbz	r2, 8002f04 <HAL_ADC_ConfigChannel+0x284>
           {
              SET_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002efc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f00:	6682      	str	r2, [r0, #104]	; 0x68
 8002f02:	e065      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
           }
           else
           {
             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f0c:	6682      	str	r2, [r0, #104]	; 0x68
 8002f0e:	e05f      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
           }
          break;
        
        case ADC_OFFSET_4:
          MODIFY_REG(hadc->Instance->OFR4,
 8002f10:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002f12:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002f16:	680e      	ldr	r6, [r1, #0]
 8002f18:	f04f 45f8 	mov.w	r5, #2080374784	; 0x7c000000
 8002f1c:	fa95 f5a5 	rbit	r5, r5
 8002f20:	fab5 f585 	clz	r5, r5
 8002f24:	fa06 f505 	lsl.w	r5, r6, r5
 8002f28:	432a      	orrs	r2, r5
 8002f2a:	4302      	orrs	r2, r0
 8002f2c:	66e2      	str	r2, [r4, #108]	; 0x6c
                   ADC_OFR_FIELDS,
                   ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT4, (sConfig->OffsetRightShift)<<3);
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	6902      	ldr	r2, [r0, #16]
 8002f32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f36:	7e0c      	ldrb	r4, [r1, #24]
 8002f38:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
 8002f3c:	6102      	str	r2, [r0, #16]
          /* Enable or disable the signed saturation bit */
          if(sConfig->OffsetSignedSaturation != DISABLE)
 8002f3e:	7e4a      	ldrb	r2, [r1, #25]
 8002f40:	b12a      	cbz	r2, 8002f4e <HAL_ADC_ConfigChannel+0x2ce>
          {
            SET_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002f46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f4a:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002f4c:	e040      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
          }
          else
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002f52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f56:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002f58:	e03a      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
        /* Case ADC_OFFSET_NONE */
        default :
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f5a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002f5c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8002f60:	6808      	ldr	r0, [r1, #0]
 8002f62:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8002f66:	fa92 f2a2 	rbit	r2, r2
 8002f6a:	fab2 f282 	clz	r2, r2
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	4295      	cmp	r5, r2
 8002f74:	d057      	beq.n	8003026 <HAL_ADC_ConfigChannel+0x3a6>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f76:	681d      	ldr	r5, [r3, #0]
 8002f78:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8002f7a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002f7e:	6808      	ldr	r0, [r1, #0]
 8002f80:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8002f84:	fa92 f2a2 	rbit	r2, r2
 8002f88:	fab2 f282 	clz	r2, r2
 8002f8c:	fa00 f202 	lsl.w	r2, r0, r2
 8002f90:	4294      	cmp	r4, r2
 8002f92:	d04d      	beq.n	8003030 <HAL_ADC_ConfigChannel+0x3b0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f94:	681d      	ldr	r5, [r3, #0]
 8002f96:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8002f98:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002f9c:	6808      	ldr	r0, [r1, #0]
 8002f9e:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8002fa2:	fa92 f2a2 	rbit	r2, r2
 8002fa6:	fab2 f282 	clz	r2, r2
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	4294      	cmp	r4, r2
 8002fb0:	d043      	beq.n	800303a <HAL_ADC_ConfigChannel+0x3ba>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fb2:	681d      	ldr	r5, [r3, #0]
 8002fb4:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8002fb6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002fba:	6808      	ldr	r0, [r1, #0]
 8002fbc:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	fab2 f282 	clz	r2, r2
 8002fc8:	fa00 f202 	lsl.w	r2, r0, r2
 8002fcc:	4294      	cmp	r4, r2
 8002fce:	d039      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x3c4>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	6882      	ldr	r2, [r0, #8]
 8002fd4:	f002 0203 	and.w	r2, r2, #3
 8002fd8:	2a01      	cmp	r2, #1
 8002fda:	d038      	beq.n	800304e <HAL_ADC_ConfigChannel+0x3ce>
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	f040 814c 	bne.w	800327c <HAL_ADC_ConfigChannel+0x5fc>
    {
      /* Configuration of differential mode */
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fe4:	68cc      	ldr	r4, [r1, #12]
 8002fe6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8002fea:	d038      	beq.n	800305e <HAL_ADC_ConfigChannel+0x3de>
      {
        /* Disable differential mode (default mode: single-ended) */
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002fec:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8002ff0:	680e      	ldr	r6, [r1, #0]
 8002ff2:	2501      	movs	r5, #1
 8002ff4:	40b5      	lsls	r5, r6
 8002ff6:	ea24 0405 	bic.w	r4, r4, r5
 8002ffa:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
      /*  paths.                                                                */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */
    
      /* Configuration of common ADC parameters                                 */
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	4ca0      	ldr	r4, [pc, #640]	; (8003284 <HAL_ADC_ConfigChannel+0x604>)
 8003002:	4da1      	ldr	r5, [pc, #644]	; (8003288 <HAL_ADC_ConfigChannel+0x608>)
 8003004:	42a0      	cmp	r0, r4
 8003006:	bf18      	it	ne
 8003008:	42a8      	cmpne	r0, r5
 800300a:	d16b      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x464>
      {
        /* Pointer to the common control register                                 */
        tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 800300c:	f504 7400 	add.w	r4, r4, #512	; 0x200
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
      }
    
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003010:	6809      	ldr	r1, [r1, #0]
 8003012:	2912      	cmp	r1, #18
 8003014:	d068      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0x468>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003016:	2911      	cmp	r1, #17
 8003018:	f000 808e 	beq.w	8003138 <HAL_ADC_ConfigChannel+0x4b8>
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800301c:	2913      	cmp	r1, #19
 800301e:	f000 8090 	beq.w	8003142 <HAL_ADC_ConfigChannel+0x4c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003022:	2000      	movs	r0, #0
 8003024:	e125      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003026:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003028:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800302c:	6622      	str	r2, [r4, #96]	; 0x60
 800302e:	e7a2      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x2f6>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003030:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8003032:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003036:	666a      	str	r2, [r5, #100]	; 0x64
 8003038:	e7ac      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x314>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800303a:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800303c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003040:	66aa      	str	r2, [r5, #104]	; 0x68
 8003042:	e7b6      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x332>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003044:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003046:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800304a:	66ea      	str	r2, [r5, #108]	; 0x6c
 800304c:	e7c0      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x350>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800304e:	6802      	ldr	r2, [r0, #0]
 8003050:	f012 0f01 	tst.w	r2, #1
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x3da>
 8003056:	2200      	movs	r2, #0
 8003058:	e7c1      	b.n	8002fde <HAL_ADC_ConfigChannel+0x35e>
 800305a:	2201      	movs	r2, #1
 800305c:	e7bf      	b.n	8002fde <HAL_ADC_ConfigChannel+0x35e>
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800305e:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8003062:	680e      	ldr	r6, [r1, #0]
 8003064:	2501      	movs	r5, #1
 8003066:	40b5      	lsls	r5, r6
 8003068:	432c      	orrs	r4, r5
 800306a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
        if (sConfig->Channel >= ADC_CHANNEL_9)
 800306e:	6808      	ldr	r0, [r1, #0]
 8003070:	2808      	cmp	r0, #8
 8003072:	d91b      	bls.n	80030ac <HAL_ADC_ConfigChannel+0x42c>
          MODIFY_REG(hadc->Instance->SMPR2,
 8003074:	681f      	ldr	r7, [r3, #0]
 8003076:	69be      	ldr	r6, [r7, #24]
 8003078:	2438      	movs	r4, #56	; 0x38
 800307a:	fa94 f5a4 	rbit	r5, r4
 800307e:	fab5 f585 	clz	r5, r5
 8003082:	3809      	subs	r0, #9
 8003084:	fb00 f505 	mul.w	r5, r0, r5
 8003088:	f04f 0e07 	mov.w	lr, #7
 800308c:	fa0e f505 	lsl.w	r5, lr, r5
 8003090:	ea26 0605 	bic.w	r6, r6, r5
 8003094:	688d      	ldr	r5, [r1, #8]
 8003096:	fa94 f4a4 	rbit	r4, r4
 800309a:	fab4 f484 	clz	r4, r4
 800309e:	fb04 f000 	mul.w	r0, r4, r0
 80030a2:	fa05 f000 	lsl.w	r0, r5, r0
 80030a6:	4330      	orrs	r0, r6
 80030a8:	61b8      	str	r0, [r7, #24]
 80030aa:	e7a8      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x37e>
          MODIFY_REG(hadc->Instance->SMPR1,
 80030ac:	681f      	ldr	r7, [r3, #0]
 80030ae:	697e      	ldr	r6, [r7, #20]
 80030b0:	2438      	movs	r4, #56	; 0x38
 80030b2:	fa94 f5a4 	rbit	r5, r4
 80030b6:	fab5 f585 	clz	r5, r5
 80030ba:	3001      	adds	r0, #1
 80030bc:	fb00 f505 	mul.w	r5, r0, r5
 80030c0:	f04f 0e07 	mov.w	lr, #7
 80030c4:	fa0e f505 	lsl.w	r5, lr, r5
 80030c8:	ea26 0605 	bic.w	r6, r6, r5
 80030cc:	688d      	ldr	r5, [r1, #8]
 80030ce:	fa94 f4a4 	rbit	r4, r4
 80030d2:	fab4 f484 	clz	r4, r4
 80030d6:	fb04 f000 	mul.w	r0, r4, r0
 80030da:	fa05 f000 	lsl.w	r0, r5, r0
 80030de:	4330      	orrs	r0, r6
 80030e0:	6178      	str	r0, [r7, #20]
 80030e2:	e78c      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x37e>
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 80030e4:	4c69      	ldr	r4, [pc, #420]	; (800328c <HAL_ADC_ConfigChannel+0x60c>)
 80030e6:	e793      	b.n	8003010 <HAL_ADC_ConfigChannel+0x390>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030e8:	68a5      	ldr	r5, [r4, #8]
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030ea:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80030ee:	d192      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x396>
      {
        /* Configuration of common ADC parameters (continuation)                */
    
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80030f0:	6885      	ldr	r5, [r0, #8]
 80030f2:	f005 0503 	and.w	r5, r5, #3
 80030f6:	2d01      	cmp	r5, #1
 80030f8:	d029      	beq.n	800314e <HAL_ADC_ConfigChannel+0x4ce>
 80030fa:	2a00      	cmp	r2, #0
 80030fc:	d13c      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x4f8>
 80030fe:	4d62      	ldr	r5, [pc, #392]	; (8003288 <HAL_ADC_ConfigChannel+0x608>)
 8003100:	42a8      	cmp	r0, r5
 8003102:	d02a      	beq.n	800315a <HAL_ADC_ConfigChannel+0x4da>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8003104:	4d5f      	ldr	r5, [pc, #380]	; (8003284 <HAL_ADC_ConfigChannel+0x604>)
 8003106:	42a8      	cmp	r0, r5
 8003108:	d04a      	beq.n	80031a0 <HAL_ADC_ConfigChannel+0x520>
 800310a:	4d5f      	ldr	r5, [pc, #380]	; (8003288 <HAL_ADC_ConfigChannel+0x608>)
 800310c:	68ad      	ldr	r5, [r5, #8]
 800310e:	f005 0503 	and.w	r5, r5, #3
 8003112:	2d01      	cmp	r5, #1
 8003114:	d067      	beq.n	80031e6 <HAL_ADC_ConfigChannel+0x566>
 8003116:	4615      	mov	r5, r2
 8003118:	f015 0f01 	tst.w	r5, #1
 800311c:	d16c      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x578>
 800311e:	4d59      	ldr	r5, [pc, #356]	; (8003284 <HAL_ADC_ConfigChannel+0x604>)
 8003120:	68ad      	ldr	r5, [r5, #8]
 8003122:	f005 0503 	and.w	r5, r5, #3
 8003126:	2d01      	cmp	r5, #1
 8003128:	d167      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x57a>
 800312a:	4d56      	ldr	r5, [pc, #344]	; (8003284 <HAL_ADC_ConfigChannel+0x604>)
 800312c:	682d      	ldr	r5, [r5, #0]
 800312e:	f015 0f01 	tst.w	r5, #1
 8003132:	d062      	beq.n	80031fa <HAL_ADC_ConfigChannel+0x57a>
 8003134:	2201      	movs	r2, #1
 8003136:	e060      	b.n	80031fa <HAL_ADC_ConfigChannel+0x57a>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003138:	68a5      	ldr	r5, [r4, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
 800313a:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 800313e:	d0d7      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0x470>
 8003140:	e76c      	b.n	800301c <HAL_ADC_ConfigChannel+0x39c>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003142:	68a5      	ldr	r5, [r4, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003144:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8003148:	d0d2      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0x470>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314a:	2000      	movs	r0, #0
 800314c:	e091      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 800314e:	6805      	ldr	r5, [r0, #0]
 8003150:	f015 0f01 	tst.w	r5, #1
 8003154:	d0d1      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x47a>
 8003156:	2201      	movs	r2, #1
 8003158:	e7cf      	b.n	80030fa <HAL_ADC_ConfigChannel+0x47a>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 800315a:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800315e:	68ad      	ldr	r5, [r5, #8]
 8003160:	f005 0503 	and.w	r5, r5, #3
 8003164:	2d01      	cmp	r5, #1
 8003166:	d00d      	beq.n	8003184 <HAL_ADC_ConfigChannel+0x504>
 8003168:	4d49      	ldr	r5, [pc, #292]	; (8003290 <HAL_ADC_ConfigChannel+0x610>)
 800316a:	68ad      	ldr	r5, [r5, #8]
 800316c:	f005 0503 	and.w	r5, r5, #3
 8003170:	2d01      	cmp	r5, #1
 8003172:	d00e      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x512>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8003174:	2a00      	cmp	r2, #0
 8003176:	d042      	beq.n	80031fe <HAL_ADC_ConfigChannel+0x57e>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800317a:	f042 0220 	orr.w	r2, r2, #32
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
    
          tmp_hal_status = HAL_ERROR;
 8003180:	2001      	movs	r0, #1
 8003182:	e076      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8003184:	4d3f      	ldr	r5, [pc, #252]	; (8003284 <HAL_ADC_ConfigChannel+0x604>)
 8003186:	682d      	ldr	r5, [r5, #0]
 8003188:	f015 0f01 	tst.w	r5, #1
 800318c:	d0ec      	beq.n	8003168 <HAL_ADC_ConfigChannel+0x4e8>
 800318e:	2201      	movs	r2, #1
 8003190:	e7f0      	b.n	8003174 <HAL_ADC_ConfigChannel+0x4f4>
 8003192:	4d3f      	ldr	r5, [pc, #252]	; (8003290 <HAL_ADC_ConfigChannel+0x610>)
 8003194:	682d      	ldr	r5, [r5, #0]
 8003196:	f015 0f01 	tst.w	r5, #1
 800319a:	d0eb      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x4f4>
 800319c:	2201      	movs	r2, #1
 800319e:	e7e9      	b.n	8003174 <HAL_ADC_ConfigChannel+0x4f4>
 80031a0:	f5a5 7580 	sub.w	r5, r5, #256	; 0x100
 80031a4:	68ad      	ldr	r5, [r5, #8]
 80031a6:	f005 0503 	and.w	r5, r5, #3
 80031aa:	2d01      	cmp	r5, #1
 80031ac:	d00b      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x546>
 80031ae:	4d38      	ldr	r5, [pc, #224]	; (8003290 <HAL_ADC_ConfigChannel+0x610>)
 80031b0:	68ad      	ldr	r5, [r5, #8]
 80031b2:	f005 0503 	and.w	r5, r5, #3
 80031b6:	2d01      	cmp	r5, #1
 80031b8:	d00c      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x554>
 80031ba:	4615      	mov	r5, r2
 80031bc:	f015 0f01 	tst.w	r5, #1
 80031c0:	d0ad      	beq.n	800311e <HAL_ADC_ConfigChannel+0x49e>
 80031c2:	2201      	movs	r2, #1
 80031c4:	e019      	b.n	80031fa <HAL_ADC_ConfigChannel+0x57a>
 80031c6:	4d30      	ldr	r5, [pc, #192]	; (8003288 <HAL_ADC_ConfigChannel+0x608>)
 80031c8:	682d      	ldr	r5, [r5, #0]
 80031ca:	f015 0f01 	tst.w	r5, #1
 80031ce:	d0ee      	beq.n	80031ae <HAL_ADC_ConfigChannel+0x52e>
 80031d0:	2501      	movs	r5, #1
 80031d2:	e7f3      	b.n	80031bc <HAL_ADC_ConfigChannel+0x53c>
 80031d4:	4d2e      	ldr	r5, [pc, #184]	; (8003290 <HAL_ADC_ConfigChannel+0x610>)
 80031d6:	682d      	ldr	r5, [r5, #0]
 80031d8:	f015 0f01 	tst.w	r5, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x562>
 80031de:	4615      	mov	r5, r2
 80031e0:	e7ec      	b.n	80031bc <HAL_ADC_ConfigChannel+0x53c>
 80031e2:	2501      	movs	r5, #1
 80031e4:	e7ea      	b.n	80031bc <HAL_ADC_ConfigChannel+0x53c>
 80031e6:	4d28      	ldr	r5, [pc, #160]	; (8003288 <HAL_ADC_ConfigChannel+0x608>)
 80031e8:	682d      	ldr	r5, [r5, #0]
 80031ea:	f015 0f01 	tst.w	r5, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x574>
 80031f0:	4615      	mov	r5, r2
 80031f2:	e791      	b.n	8003118 <HAL_ADC_ConfigChannel+0x498>
 80031f4:	2501      	movs	r5, #1
 80031f6:	e78f      	b.n	8003118 <HAL_ADC_ConfigChannel+0x498>
 80031f8:	2201      	movs	r2, #1
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d1bc      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x4f8>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 80031fe:	2912      	cmp	r1, #18
 8003200:	d005      	beq.n	800320e <HAL_ADC_ConfigChannel+0x58e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 8003202:	2911      	cmp	r1, #17
 8003204:	d01c      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x5c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && (hadc->Instance == ADC3))
 8003206:	2913      	cmp	r1, #19
 8003208:	d023      	beq.n	8003252 <HAL_ADC_ConfigChannel+0x5d2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320a:	2000      	movs	r0, #0
 800320c:	e031      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 800320e:	4a20      	ldr	r2, [pc, #128]	; (8003290 <HAL_ADC_ConfigChannel+0x610>)
 8003210:	4290      	cmp	r0, r2
 8003212:	d1f6      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x582>
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003214:	68a2      	ldr	r2, [r4, #8]
 8003216:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800321a:	60a2      	str	r2, [r4, #8]
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_ADC_ConfigChannel+0x614>)
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	491d      	ldr	r1, [pc, #116]	; (8003298 <HAL_ADC_ConfigChannel+0x618>)
 8003222:	fbb2 f1f1 	udiv	r1, r2, r1
 8003226:	2278      	movs	r2, #120	; 0x78
 8003228:	fb02 f201 	mul.w	r2, r2, r1
 800322c:	9201      	str	r2, [sp, #4]
            while(wait_loop_index != 0)
 800322e:	e002      	b.n	8003236 <HAL_ADC_ConfigChannel+0x5b6>
              wait_loop_index--;
 8003230:	9a01      	ldr	r2, [sp, #4]
 8003232:	3a01      	subs	r2, #1
 8003234:	9201      	str	r2, [sp, #4]
            while(wait_loop_index != 0)
 8003236:	9a01      	ldr	r2, [sp, #4]
 8003238:	2a00      	cmp	r2, #0
 800323a:	d1f9      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x5b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323c:	2000      	movs	r0, #0
 800323e:	e018      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <HAL_ADC_ConfigChannel+0x610>)
 8003242:	4290      	cmp	r0, r2
 8003244:	d1df      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x586>
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003246:	68a2      	ldr	r2, [r4, #8]
 8003248:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800324c:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800324e:	2000      	movs	r0, #0
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003250:	e00f      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && (hadc->Instance == ADC3))
 8003252:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <HAL_ADC_ConfigChannel+0x610>)
 8003254:	4290      	cmp	r0, r2
 8003256:	d001      	beq.n	800325c <HAL_ADC_ConfigChannel+0x5dc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003258:	2000      	movs	r0, #0
 800325a:	e00a      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800325c:	68a2      	ldr	r2, [r4, #8]
 800325e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003262:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003264:	2000      	movs	r0, #0
 8003266:	e004      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800326a:	f042 0220 	orr.w	r2, r2, #32
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003270:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003278:	b003      	add	sp, #12
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327c:	2000      	movs	r0, #0
 800327e:	e7f8      	b.n	8003272 <HAL_ADC_ConfigChannel+0x5f2>
  __HAL_LOCK(hadc);
 8003280:	2002      	movs	r0, #2
 8003282:	e7f9      	b.n	8003278 <HAL_ADC_ConfigChannel+0x5f8>
 8003284:	40022100 	.word	0x40022100
 8003288:	40022000 	.word	0x40022000
 800328c:	58026300 	.word	0x58026300
 8003290:	58026000 	.word	0x58026000
 8003294:	20000090 	.word	0x20000090
 8003298:	001e8480 	.word	0x001e8480

0800329c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800329c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80032a0:	2a01      	cmp	r2, #1
 80032a2:	f000 8094 	beq.w	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x132>
{
 80032a6:	b430      	push	{r4, r5}
 80032a8:	b09a      	sub	sp, #104	; 0x68
 80032aa:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80032ac:	2201      	movs	r2, #1
 80032ae:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032b2:	6802      	ldr	r2, [r0, #0]
 80032b4:	4847      	ldr	r0, [pc, #284]	; (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80032b6:	4282      	cmp	r2, r0
 80032b8:	d032      	beq.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 80032ba:	2000      	movs	r0, #0
 80032bc:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80032be:	9801      	ldr	r0, [sp, #4]
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d031      	beq.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  }
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                           */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032c4:	6892      	ldr	r2, [r2, #8]
 80032c6:	f012 0f04 	tst.w	r2, #4
 80032ca:	d16d      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave) == RESET) )
 80032cc:	6882      	ldr	r2, [r0, #8]
 80032ce:	f012 0f04 	tst.w	r2, #4
 80032d2:	d169      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    tmpADC_Common = ADC12_COMMON_REGISTER(hadc);

    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d4:	680a      	ldr	r2, [r1, #0]
 80032d6:	2a00      	cmp	r2, #0
 80032d8:	d03d      	beq.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0xba>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032da:	4c3f      	ldr	r4, [pc, #252]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80032dc:	68a2      	ldr	r2, [r4, #8]
 80032de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80032e2:	684d      	ldr	r5, [r1, #4]
 80032e4:	432a      	orrs	r2, r5
 80032e6:	60a2      	str	r2, [r4, #8]
      /*      from 1 to 9 clock cycles for 14 bits,                             */
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80032e8:	681c      	ldr	r4, [r3, #0]
 80032ea:	68a2      	ldr	r2, [r4, #8]
 80032ec:	f002 0203 	and.w	r2, r2, #3
 80032f0:	2a01      	cmp	r2, #1
 80032f2:	d022      	beq.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80032f4:	2200      	movs	r2, #0
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	d161      	bne.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0x122>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80032fa:	6884      	ldr	r4, [r0, #8]
 80032fc:	f004 0403 	and.w	r4, r4, #3
 8003300:	2c01      	cmp	r4, #1
 8003302:	d022      	beq.n	800334a <HAL_ADCEx_MultiModeConfigChannel+0xae>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8003304:	2a00      	cmp	r2, #0
 8003306:	d15c      	bne.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
      {
        MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 8003308:	4c33      	ldr	r4, [pc, #204]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800330a:	68a0      	ldr	r0, [r4, #8]
 800330c:	f5a2 6272 	sub.w	r2, r2, #3872	; 0xf20
 8003310:	4002      	ands	r2, r0
 8003312:	6808      	ldr	r0, [r1, #0]
 8003314:	6889      	ldr	r1, [r1, #8]
 8003316:	4301      	orrs	r1, r0
 8003318:	430a      	orrs	r2, r1
 800331a:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 800331c:	2000      	movs	r0, #0
 800331e:	e048      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003320:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003324:	9001      	str	r0, [sp, #4]
 8003326:	e7ca      	b.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332a:	f042 0220 	orr.w	r2, r2, #32
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003336:	2001      	movs	r0, #1
 8003338:	e03e      	b.n	80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	f012 0f01 	tst.w	r2, #1
 8003340:	d101      	bne.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003342:	2200      	movs	r2, #0
 8003344:	e7d7      	b.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8003346:	2201      	movs	r2, #1
 8003348:	e7d5      	b.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 800334a:	6800      	ldr	r0, [r0, #0]
 800334c:	f010 0f01 	tst.w	r0, #1
 8003350:	d0d8      	beq.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x68>
 8003352:	2201      	movs	r2, #1
 8003354:	e7d6      	b.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x68>
               multimode->Mode | multimode->TwoSamplingDelay );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003356:	4920      	ldr	r1, [pc, #128]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003358:	688a      	ldr	r2, [r1, #8]
 800335a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800335e:	608a      	str	r2, [r1, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	688a      	ldr	r2, [r1, #8]
 8003364:	f002 0203 	and.w	r2, r2, #3
 8003368:	2a01      	cmp	r2, #1
 800336a:	d00f      	beq.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 800336c:	2200      	movs	r2, #0
 800336e:	bb52      	cbnz	r2, 80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8003370:	6881      	ldr	r1, [r0, #8]
 8003372:	f001 0103 	and.w	r1, r1, #3
 8003376:	2901      	cmp	r1, #1
 8003378:	d010      	beq.n	800339c <HAL_ADCEx_MultiModeConfigChannel+0x100>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 800337a:	bb32      	cbnz	r2, 80033ca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800337c:	4916      	ldr	r1, [pc, #88]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800337e:	6888      	ldr	r0, [r1, #8]
 8003380:	f5a2 6272 	sub.w	r2, r2, #3872	; 0xf20
 8003384:	4002      	ands	r2, r0
 8003386:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 8003388:	2000      	movs	r0, #0
 800338a:	e012      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 800338c:	680a      	ldr	r2, [r1, #0]
 800338e:	f012 0f01 	tst.w	r2, #1
 8003392:	d101      	bne.n	8003398 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
 8003394:	2200      	movs	r2, #0
 8003396:	e7ea      	b.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8003398:	2201      	movs	r2, #1
 800339a:	e7e8      	b.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0xd2>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 800339c:	6801      	ldr	r1, [r0, #0]
 800339e:	f011 0f01 	tst.w	r1, #1
 80033a2:	d0ea      	beq.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0xde>
 80033a4:	2201      	movs	r2, #1
 80033a6:	e7e8      	b.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0xde>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033aa:	f042 0220 	orr.w	r2, r2, #32
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status  = HAL_ERROR;
 80033b0:	2001      	movs	r0, #1
  }


  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status ;
}
 80033b8:	b01a      	add	sp, #104	; 0x68
 80033ba:	bc30      	pop	{r4, r5}
 80033bc:	4770      	bx	lr
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 80033be:	2000      	movs	r0, #0
 80033c0:	e7f7      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80033c2:	2000      	movs	r0, #0
 80033c4:	e7f5      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80033c6:	2000      	movs	r0, #0
 80033c8:	e7f3      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80033ca:	2000      	movs	r0, #0
 80033cc:	e7f1      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 80033ce:	2002      	movs	r0, #2
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40022000 	.word	0x40022000
 80033d8:	40022300 	.word	0x40022300

080033dc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033dc:	4906      	ldr	r1, [pc, #24]	; (80033f8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80033de:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80033e8:	0200      	lsls	r0, r0, #8
 80033ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80033f0:	4a02      	ldr	r2, [pc, #8]	; (80033fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80033f2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80033f4:	60ca      	str	r2, [r1, #12]
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00
 80033fc:	05fa0000 	.word	0x05fa0000

08003400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_NVIC_SetPriority+0x54>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340a:	f1c3 0407 	rsb	r4, r3, #7
 800340e:	2c04      	cmp	r4, #4
 8003410:	bf28      	it	cs
 8003412:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003414:	1d1d      	adds	r5, r3, #4
 8003416:	2d06      	cmp	r5, #6
 8003418:	d913      	bls.n	8003442 <HAL_NVIC_SetPriority+0x42>
 800341a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	2501      	movs	r5, #1
 800341e:	fa05 f404 	lsl.w	r4, r5, r4
 8003422:	3c01      	subs	r4, #1
 8003424:	4021      	ands	r1, r4
 8003426:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	fa05 f303 	lsl.w	r3, r5, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003432:	2800      	cmp	r0, #0
 8003434:	db07      	blt.n	8003446 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	0109      	lsls	r1, r1, #4
 8003438:	b2c9      	uxtb	r1, r1
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_NVIC_SetPriority+0x58>)
 800343c:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800343e:	bc30      	pop	{r4, r5}
 8003440:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003442:	2300      	movs	r3, #0
 8003444:	e7ea      	b.n	800341c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003446:	f000 000f 	and.w	r0, r0, #15
 800344a:	0109      	lsls	r1, r1, #4
 800344c:	b2c9      	uxtb	r1, r1
 800344e:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_NVIC_SetPriority+0x5c>)
 8003450:	5419      	strb	r1, [r3, r0]
 8003452:	e7f4      	b.n	800343e <HAL_NVIC_SetPriority+0x3e>
 8003454:	e000ed00 	.word	0xe000ed00
 8003458:	e000e400 	.word	0xe000e400
 800345c:	e000ed14 	.word	0xe000ed14

08003460 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003460:	2800      	cmp	r0, #0
 8003462:	db08      	blt.n	8003476 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003464:	0942      	lsrs	r2, r0, #5
 8003466:	f000 001f 	and.w	r0, r0, #31
 800346a:	2301      	movs	r3, #1
 800346c:	fa03 f000 	lsl.w	r0, r3, r0
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <HAL_NVIC_EnableIRQ+0x18>)
 8003472:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100

0800347c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800347c:	3801      	subs	r0, #1
 800347e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003482:	d20a      	bcs.n	800349a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_SYSTICK_Config+0x24>)
 8003486:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003488:	21f0      	movs	r1, #240	; 0xf0
 800348a:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <HAL_SYSTICK_Config+0x28>)
 800348c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	2000      	movs	r0, #0
 8003492:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003494:	2207      	movs	r2, #7
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800349a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e010 	.word	0xe000e010
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80034a8:	2804      	cmp	r0, #4
 80034aa:	d005      	beq.n	80034b8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80034ac:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80034b8:	4a02      	ldr	r2, [pc, #8]	; (80034c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80034ba:	6813      	ldr	r3, [r2, #0]
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4770      	bx	lr
 80034c4:	e000e010 	.word	0xe000e010

080034c8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034c8:	6802      	ldr	r2, [r0, #0]
 80034ca:	b2d3      	uxtb	r3, r2
 80034cc:	3b10      	subs	r3, #16
 80034ce:	4909      	ldr	r1, [pc, #36]	; (80034f4 <DMA_CalcBaseAndBitshift+0x2c>)
 80034d0:	fba1 1303 	umull	r1, r3, r1, r3
 80034d4:	091b      	lsrs	r3, r3, #4

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034d6:	4908      	ldr	r1, [pc, #32]	; (80034f8 <DMA_CalcBaseAndBitshift+0x30>)
 80034d8:	5cc9      	ldrb	r1, [r1, r3]
 80034da:	65c1      	str	r1, [r0, #92]	; 0x5c

  if (stream_number > 3U)
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d804      	bhi.n	80034ea <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <DMA_CalcBaseAndBitshift+0x34>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 80034e6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80034e8:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <DMA_CalcBaseAndBitshift+0x34>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	6583      	str	r3, [r0, #88]	; 0x58
 80034f2:	e7f8      	b.n	80034e6 <DMA_CalcBaseAndBitshift+0x1e>
 80034f4:	aaaaaaab 	.word	0xaaaaaaab
 80034f8:	0800842c 	.word	0x0800842c
 80034fc:	fffffc00 	.word	0xfffffc00

08003500 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003500:	6983      	ldr	r3, [r0, #24]
 8003502:	b99b      	cbnz	r3, 800352c <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8003504:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003506:	2b01      	cmp	r3, #1
 8003508:	d00a      	beq.n	8003520 <DMA_CheckFifoParam+0x20>
 800350a:	b11b      	cbz	r3, 8003514 <DMA_CheckFifoParam+0x14>
 800350c:	2b02      	cmp	r3, #2
 800350e:	d001      	beq.n	8003514 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2000      	movs	r0, #0
 8003512:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003514:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003516:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800351a:	d12e      	bne.n	800357a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2000      	movs	r0, #0
 800351e:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003520:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003522:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003526:	d02a      	beq.n	800357e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2000      	movs	r0, #0
 800352a:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800352c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003530:	d006      	beq.n	8003540 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003532:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003534:	2b02      	cmp	r3, #2
 8003536:	d92a      	bls.n	800358e <DMA_CheckFifoParam+0x8e>
 8003538:	2b03      	cmp	r3, #3
 800353a:	d016      	beq.n	800356a <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 800353c:	2000      	movs	r0, #0
 800353e:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8003540:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003542:	2b03      	cmp	r3, #3
 8003544:	d803      	bhi.n	800354e <DMA_CheckFifoParam+0x4e>
 8003546:	e8df f003 	tbb	[pc, r3]
 800354a:	041c      	.short	0x041c
 800354c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2000      	movs	r0, #0
 8003550:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003552:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003554:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003558:	d115      	bne.n	8003586 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2000      	movs	r0, #0
 800355c:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800355e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003564:	d011      	beq.n	800358a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2000      	movs	r0, #0
 8003568:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800356c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003570:	d001      	beq.n	8003576 <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 8003572:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8003574:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2000      	movs	r0, #0
 8003578:	4770      	bx	lr
          status = HAL_ERROR;
 800357a:	2001      	movs	r0, #1
 800357c:	4770      	bx	lr
          status = HAL_ERROR;
 800357e:	2001      	movs	r0, #1
 8003580:	4770      	bx	lr
        status = HAL_ERROR;
 8003582:	2001      	movs	r0, #1
 8003584:	4770      	bx	lr
          status = HAL_ERROR;
 8003586:	2001      	movs	r0, #1
 8003588:	4770      	bx	lr
          status = HAL_ERROR;
 800358a:	2001      	movs	r0, #1
 800358c:	4770      	bx	lr
        status = HAL_ERROR;
 800358e:	2001      	movs	r0, #1
 8003590:	4770      	bx	lr
	...

08003594 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = 0U;
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 8003594:	6803      	ldr	r3, [r0, #0]

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 8003596:	4a15      	ldr	r2, [pc, #84]	; (80035ec <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003598:	441a      	add	r2, r3
 800359a:	2a8c      	cmp	r2, #140	; 0x8c
 800359c:	d915      	bls.n	80035ca <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
  }
  else
  {
    /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	3a10      	subs	r2, #16
 80035a2:	4913      	ldr	r1, [pc, #76]	; (80035f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80035a4:	fba1 1202 	umull	r1, r2, r1, r2
 80035a8:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035aa:	4912      	ldr	r1, [pc, #72]	; (80035f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80035ac:	4419      	add	r1, r3
 80035ae:	29a8      	cmp	r1, #168	; 0xa8
 80035b0:	d800      	bhi.n	80035b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x20>
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
 80035b2:	3208      	adds	r2, #8
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80035be:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80035c0:	2301      	movs	r3, #1
 80035c2:	fa03 f202 	lsl.w	r2, r3, r2
 80035c6:	6682      	str	r2, [r0, #104]	; 0x68
 80035c8:	4770      	bx	lr
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3b08      	subs	r3, #8
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80035d8:	441a      	add	r2, r3
 80035da:	0092      	lsls	r2, r2, #2
 80035dc:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80035e0:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80035e2:	2201      	movs	r2, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	6683      	str	r3, [r0, #104]	; 0x68
 80035ea:	4770      	bx	lr
 80035ec:	a7fdabf8 	.word	0xa7fdabf8
 80035f0:	aaaaaaab 	.word	0xaaaaaaab
 80035f4:	bffdfbf0 	.word	0xbffdfbf0
 80035f8:	10008200 	.word	0x10008200
 80035fc:	40020880 	.word	0x40020880
 8003600:	cccccccd 	.word	0xcccccccd
 8003604:	16009600 	.word	0x16009600
 8003608:	58025880 	.word	0x58025880

0800360c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800360c:	b410      	push	{r4}
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 800360e:	6804      	ldr	r4, [r0, #0]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003610:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003612:	1e53      	subs	r3, r2, #1
 8003614:	2b07      	cmp	r3, #7
 8003616:	d80d      	bhi.n	8003634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 8003618:	490b      	ldr	r1, [pc, #44]	; (8003648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x3c>)
 800361a:	4421      	add	r1, r4
 800361c:	298c      	cmp	r1, #140	; 0x8c
 800361e:	d80c      	bhi.n	800363a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x2e>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003620:	490a      	ldr	r1, [pc, #40]	; (800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003622:	4411      	add	r1, r2
 8003624:	0089      	lsls	r1, r1, #2
 8003626:	66c1      	str	r1, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003628:	4a09      	ldr	r2, [pc, #36]	; (8003650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800362a:	6702      	str	r2, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 800362c:	2201      	movs	r2, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8003634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003638:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800363a:	4906      	ldr	r1, [pc, #24]	; (8003654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800363c:	4411      	add	r1, r2
 800363e:	0089      	lsls	r1, r1, #2
 8003640:	66c1      	str	r1, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003642:	4a05      	ldr	r2, [pc, #20]	; (8003658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4c>)
 8003644:	6702      	str	r2, [r0, #112]	; 0x70
 8003646:	e7f1      	b.n	800362c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>
 8003648:	a7fdabf8 	.word	0xa7fdabf8
 800364c:	1600963f 	.word	0x1600963f
 8003650:	58025940 	.word	0x58025940
 8003654:	1000823f 	.word	0x1000823f
 8003658:	40020940 	.word	0x40020940

0800365c <HAL_DMA_Init>:
{
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003660:	f7ff f986 	bl	8002970 <HAL_GetTick>
  if(hdma == NULL)
 8003664:	2c00      	cmp	r4, #0
 8003666:	f000 80c2 	beq.w	80037ee <HAL_DMA_Init+0x192>
 800366a:	4605      	mov	r5, r0
  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_DMA_Init+0x198>)
 8003670:	4413      	add	r3, r2
 8003672:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 8003676:	d855      	bhi.n	8003724 <HAL_DMA_Init+0xc8>
    __HAL_UNLOCK(hdma);
 8003678:	2300      	movs	r3, #0
 800367a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6013      	str	r3, [r2, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	f012 0f01 	tst.w	r2, #1
 8003694:	d00b      	beq.n	80036ae <HAL_DMA_Init+0x52>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003696:	f7ff f96b 	bl	8002970 <HAL_GetTick>
 800369a:	1b40      	subs	r0, r0, r5
 800369c:	2805      	cmp	r0, #5
 800369e:	d9f5      	bls.n	800368c <HAL_DMA_Init+0x30>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a0:	2320      	movs	r3, #32
 80036a2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80036a4:	2303      	movs	r3, #3
 80036a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 80036aa:	2001      	movs	r0, #1
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036ae:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b0:	4951      	ldr	r1, [pc, #324]	; (80037f8 <HAL_DMA_Init+0x19c>)
 80036b2:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 80036b4:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b6:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 80036b8:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ba:	6920      	ldr	r0, [r4, #16]
 80036bc:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036be:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c2:	69a0      	ldr	r0, [r4, #24]
 80036c4:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80036c6:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c8:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80036ca:	6a20      	ldr	r0, [r4, #32]
 80036cc:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 80036ce:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80036d2:	2904      	cmp	r1, #4
 80036d4:	d011      	beq.n	80036fa <HAL_DMA_Init+0x9e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80036d6:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036d8:	6826      	ldr	r6, [r4, #0]
 80036da:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036dc:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80036e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e2:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d00d      	beq.n	8003704 <HAL_DMA_Init+0xa8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036e8:	6175      	str	r5, [r6, #20]
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7ff feec 	bl	80034c8 <DMA_CalcBaseAndBitshift>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80036f2:	233f      	movs	r3, #63	; 0x3f
 80036f4:	4093      	lsls	r3, r2
 80036f6:	6083      	str	r3, [r0, #8]
 80036f8:	e046      	b.n	8003788 <HAL_DMA_Init+0x12c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80036fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80036fe:	4301      	orrs	r1, r0
 8003700:	430a      	orrs	r2, r1
 8003702:	e7e8      	b.n	80036d6 <HAL_DMA_Init+0x7a>
      registerValue |= hdma->Init.FIFOThreshold;
 8003704:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003706:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ec      	beq.n	80036e8 <HAL_DMA_Init+0x8c>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800370e:	4620      	mov	r0, r4
 8003710:	f7ff fef6 	bl	8003500 <DMA_CheckFifoParam>
 8003714:	2800      	cmp	r0, #0
 8003716:	d0e7      	beq.n	80036e8 <HAL_DMA_Init+0x8c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003718:	2340      	movs	r3, #64	; 0x40
 800371a:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800371c:	2001      	movs	r0, #1
 800371e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8003722:	bd70      	pop	{r4, r5, r6, pc}
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 8003724:	4b35      	ldr	r3, [pc, #212]	; (80037fc <HAL_DMA_Init+0x1a0>)
 8003726:	4413      	add	r3, r2
 8003728:	2b8c      	cmp	r3, #140	; 0x8c
 800372a:	d84c      	bhi.n	80037c6 <HAL_DMA_Init+0x16a>
    __HAL_UNLOCK(hdma);
 800372c:	2300      	movs	r3, #0
 800372e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8003732:	2302      	movs	r3, #2
 8003734:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003738:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 800373a:	4931      	ldr	r1, [pc, #196]	; (8003800 <HAL_DMA_Init+0x1a4>)
 800373c:	4019      	ands	r1, r3
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800373e:	68a3      	ldr	r3, [r4, #8]
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d03e      	beq.n	80037c2 <HAL_DMA_Init+0x166>
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d039      	beq.n	80037bc <HAL_DMA_Init+0x160>
 8003748:	2300      	movs	r3, #0
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800374a:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800374c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003750:	6920      	ldr	r0, [r4, #16]
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003752:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003756:	6960      	ldr	r0, [r4, #20]
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003758:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800375c:	69a0      	ldr	r0, [r4, #24]
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800375e:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8003762:	69e0      	ldr	r0, [r4, #28]
 8003764:	08c0      	lsrs	r0, r0, #3
 8003766:	f000 0020 	and.w	r0, r0, #32
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800376a:	4303      	orrs	r3, r0
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 800376c:	6a20      	ldr	r0, [r4, #32]
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 800376e:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8003772:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003774:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_DMA_Init+0x1a0>)
 800377a:	4413      	add	r3, r2
 800377c:	4a21      	ldr	r2, [pc, #132]	; (8003804 <HAL_DMA_Init+0x1a8>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	65e3      	str	r3, [r4, #92]	; 0x5c
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003788:	4620      	mov	r0, r4
 800378a:	f7ff ff03 	bl	8003594 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800378e:	68a3      	ldr	r3, [r4, #8]
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d01f      	beq.n	80037d4 <HAL_DMA_Init+0x178>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003794:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003796:	7922      	ldrb	r2, [r4, #4]
 8003798:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800379c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800379e:	605a      	str	r2, [r3, #4]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037a0:	6863      	ldr	r3, [r4, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	2b07      	cmp	r3, #7
 80037a6:	d918      	bls.n	80037da <HAL_DMA_Init+0x17e>
    hdma->DMAmuxRequestGen = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	66e3      	str	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80037ac:	6723      	str	r3, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037ae:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b0:	2000      	movs	r0, #0
 80037b2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 80037bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037c0:	e7c3      	b.n	800374a <HAL_DMA_Init+0xee>
 80037c2:	2310      	movs	r3, #16
 80037c4:	e7c1      	b.n	800374a <HAL_DMA_Init+0xee>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037c6:	2340      	movs	r3, #64	; 0x40
 80037c8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037ca:	2303      	movs	r3, #3
 80037cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80037d0:	2001      	movs	r0, #1
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037d4:	2300      	movs	r3, #0
 80037d6:	6063      	str	r3, [r4, #4]
 80037d8:	e7dc      	b.n	8003794 <HAL_DMA_Init+0x138>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff ff16 	bl	800360c <DMA_CalcDMAMUXRequestGenBaseAndMask>
     hdma->DMAmuxRequestGen->RGCR = 0U;
 80037e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80037e8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	e7e0      	b.n	80037b0 <HAL_DMA_Init+0x154>
    return HAL_ERROR;
 80037ee:	2001      	movs	r0, #1
}
 80037f0:	bd70      	pop	{r4, r5, r6, pc}
 80037f2:	bf00      	nop
 80037f4:	bffdfff0 	.word	0xbffdfff0
 80037f8:	fe10803f 	.word	0xfe10803f
 80037fc:	a7fdabf8 	.word	0xa7fdabf8
 8003800:	ffff800f 	.word	0xffff800f
 8003804:	cccccccd 	.word	0xcccccccd

08003808 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003808:	2800      	cmp	r0, #0
 800380a:	d04e      	beq.n	80038aa <HAL_DMA_Abort_IT+0xa2>
{
 800380c:	b508      	push	{r3, lr}
 800380e:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003810:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	2a02      	cmp	r2, #2
 8003818:	d003      	beq.n	8003822 <HAL_DMA_Abort_IT+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	6542      	str	r2, [r0, #84]	; 0x54
    return HAL_ERROR;
 800381e:	2001      	movs	r0, #1
 8003820:	bd08      	pop	{r3, pc}
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8003822:	6802      	ldr	r2, [r0, #0]
 8003824:	4923      	ldr	r1, [pc, #140]	; (80038b4 <HAL_DMA_Abort_IT+0xac>)
 8003826:	4411      	add	r1, r2
 8003828:	f5b1 6f95 	cmp.w	r1, #1192	; 0x4a8
 800382c:	d92f      	bls.n	800388e <HAL_DMA_Abort_IT+0x86>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800382e:	6811      	ldr	r1, [r2, #0]
 8003830:	f021 010e 	bic.w	r1, r1, #14
 8003834:	6011      	str	r1, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8003836:	6801      	ldr	r1, [r0, #0]
 8003838:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_DMA_Abort_IT+0xac>)
 800383a:	440a      	add	r2, r1
 800383c:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8003840:	d82e      	bhi.n	80038a0 <HAL_DMA_Abort_IT+0x98>
 8003842:	680a      	ldr	r2, [r1, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	600a      	str	r2, [r1, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800384a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800384c:	680a      	ldr	r2, [r1, #0]
 800384e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003852:	600a      	str	r2, [r1, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8003854:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003856:	2201      	movs	r2, #1
 8003858:	408a      	lsls	r2, r1
 800385a:	4917      	ldr	r1, [pc, #92]	; (80038b8 <HAL_DMA_Abort_IT+0xb0>)
 800385c:	604a      	str	r2, [r1, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800385e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003860:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003862:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003864:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003866:	b132      	cbz	r2, 8003876 <HAL_DMA_Abort_IT+0x6e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003868:	6811      	ldr	r1, [r2, #0]
 800386a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800386e:	6011      	str	r1, [r2, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003872:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8003874:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8003882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003884:	b19a      	cbz	r2, 80038ae <HAL_DMA_Abort_IT+0xa6>
 8003886:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8003888:	4790      	blx	r2
  return HAL_OK;
 800388a:	2000      	movs	r0, #0
 800388c:	bd08      	pop	{r3, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 800388e:	2104      	movs	r1, #4
 8003890:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003894:	6813      	ldr	r3, [r2, #0]
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800389c:	2000      	movs	r0, #0
 800389e:	bd08      	pop	{r3, pc}
      __HAL_DMA_DISABLE(hdma);
 80038a0:	680a      	ldr	r2, [r1, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	600a      	str	r2, [r1, #0]
 80038a8:	e7cf      	b.n	800384a <HAL_DMA_Abort_IT+0x42>
    return HAL_ERROR;
 80038aa:	2001      	movs	r0, #1
 80038ac:	4770      	bx	lr
  return HAL_OK;
 80038ae:	2000      	movs	r0, #0
}
 80038b0:	bd08      	pop	{r3, pc}
 80038b2:	bf00      	nop
 80038b4:	bffdfff0 	.word	0xbffdfff0
 80038b8:	58025400 	.word	0x58025400

080038bc <HAL_DMA_IRQHandler>:
{
 80038bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038be:	b083      	sub	sp, #12
 80038c0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038c6:	4b90      	ldr	r3, [pc, #576]	; (8003b08 <HAL_DMA_IRQHandler+0x24c>)
 80038c8:	681d      	ldr	r5, [r3, #0]
 80038ca:	4b90      	ldr	r3, [pc, #576]	; (8003b0c <HAL_DMA_IRQHandler+0x250>)
 80038cc:	fba3 3505 	umull	r3, r5, r3, r5
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d0:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80038d2:	683e      	ldr	r6, [r7, #0]
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 80038d4:	6802      	ldr	r2, [r0, #0]
 80038d6:	4b8e      	ldr	r3, [pc, #568]	; (8003b10 <HAL_DMA_IRQHandler+0x254>)
 80038d8:	4413      	add	r3, r2
 80038da:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 80038de:	f200 811d 	bhi.w	8003b1c <HAL_DMA_IRQHandler+0x260>
 80038e2:	0aad      	lsrs	r5, r5, #10
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038e4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80038e6:	2308      	movs	r3, #8
 80038e8:	408b      	lsls	r3, r1
 80038ea:	421e      	tst	r6, r3
 80038ec:	d00f      	beq.n	800390e <HAL_DMA_IRQHandler+0x52>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038ee:	6813      	ldr	r3, [r2, #0]
 80038f0:	f013 0f04 	tst.w	r3, #4
 80038f4:	d00b      	beq.n	800390e <HAL_DMA_IRQHandler+0x52>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	6013      	str	r3, [r2, #0]
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038fe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003900:	2308      	movs	r3, #8
 8003902:	4093      	lsls	r3, r2
 8003904:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003906:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800390e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003910:	4b80      	ldr	r3, [pc, #512]	; (8003b14 <HAL_DMA_IRQHandler+0x258>)
 8003912:	4093      	lsls	r3, r2
 8003914:	421e      	tst	r6, r3
 8003916:	d00e      	beq.n	8003936 <HAL_DMA_IRQHandler+0x7a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003918:	6821      	ldr	r1, [r4, #0]
 800391a:	4a7d      	ldr	r2, [pc, #500]	; (8003b10 <HAL_DMA_IRQHandler+0x254>)
 800391c:	440a      	add	r2, r1
 800391e:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8003922:	d83a      	bhi.n	800399a <HAL_DMA_IRQHandler+0xde>
 8003924:	694a      	ldr	r2, [r1, #20]
 8003926:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800392a:	b122      	cbz	r2, 8003936 <HAL_DMA_IRQHandler+0x7a>
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800392c:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800392e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003936:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003938:	4b77      	ldr	r3, [pc, #476]	; (8003b18 <HAL_DMA_IRQHandler+0x25c>)
 800393a:	4093      	lsls	r3, r2
 800393c:	421e      	tst	r6, r3
 800393e:	d00e      	beq.n	800395e <HAL_DMA_IRQHandler+0xa2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003940:	6821      	ldr	r1, [r4, #0]
 8003942:	4a73      	ldr	r2, [pc, #460]	; (8003b10 <HAL_DMA_IRQHandler+0x254>)
 8003944:	440a      	add	r2, r1
 8003946:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 800394a:	d829      	bhi.n	80039a0 <HAL_DMA_IRQHandler+0xe4>
 800394c:	680a      	ldr	r2, [r1, #0]
 800394e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003952:	b122      	cbz	r2, 800395e <HAL_DMA_IRQHandler+0xa2>
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003954:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003956:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800395e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003960:	2310      	movs	r3, #16
 8003962:	4093      	lsls	r3, r2
 8003964:	421e      	tst	r6, r3
 8003966:	d033      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x114>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003968:	6821      	ldr	r1, [r4, #0]
 800396a:	4a69      	ldr	r2, [pc, #420]	; (8003b10 <HAL_DMA_IRQHandler+0x254>)
 800396c:	440a      	add	r2, r1
 800396e:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8003972:	d818      	bhi.n	80039a6 <HAL_DMA_IRQHandler+0xea>
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800397a:	b34a      	cbz	r2, 80039d0 <HAL_DMA_IRQHandler+0x114>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800397c:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003986:	d017      	beq.n	80039b8 <HAL_DMA_IRQHandler+0xfc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800398e:	d10e      	bne.n	80039ae <HAL_DMA_IRQHandler+0xf2>
            if(hdma->XferHalfCpltCallback != NULL)
 8003990:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003992:	b1eb      	cbz	r3, 80039d0 <HAL_DMA_IRQHandler+0x114>
              hdma->XferHalfCpltCallback(hdma);
 8003994:	4620      	mov	r0, r4
 8003996:	4798      	blx	r3
 8003998:	e01a      	b.n	80039d0 <HAL_DMA_IRQHandler+0x114>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800399a:	680a      	ldr	r2, [r1, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	e7c4      	b.n	800392a <HAL_DMA_IRQHandler+0x6e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039a0:	680a      	ldr	r2, [r1, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	e7d5      	b.n	8003952 <HAL_DMA_IRQHandler+0x96>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039a6:	680a      	ldr	r2, [r1, #0]
 80039a8:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80039ac:	e7e5      	b.n	800397a <HAL_DMA_IRQHandler+0xbe>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80039ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80039b0:	b173      	cbz	r3, 80039d0 <HAL_DMA_IRQHandler+0x114>
              hdma->XferM1HalfCpltCallback(hdma);
 80039b2:	4620      	mov	r0, r4
 80039b4:	4798      	blx	r3
 80039b6:	e00b      	b.n	80039d0 <HAL_DMA_IRQHandler+0x114>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	f412 7f80 	tst.w	r2, #256	; 0x100
 80039be:	d103      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x10c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f022 0208 	bic.w	r2, r2, #8
 80039c6:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80039c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039ca:	b10b      	cbz	r3, 80039d0 <HAL_DMA_IRQHandler+0x114>
            hdma->XferHalfCpltCallback(hdma);
 80039cc:	4620      	mov	r0, r4
 80039ce:	4798      	blx	r3
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80039d2:	2320      	movs	r3, #32
 80039d4:	4093      	lsls	r3, r2
 80039d6:	421e      	tst	r6, r3
 80039d8:	d05f      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x1de>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039da:	6821      	ldr	r1, [r4, #0]
 80039dc:	4a4c      	ldr	r2, [pc, #304]	; (8003b10 <HAL_DMA_IRQHandler+0x254>)
 80039de:	440a      	add	r2, r1
 80039e0:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 80039e4:	d819      	bhi.n	8003a1a <HAL_DMA_IRQHandler+0x15e>
 80039e6:	680a      	ldr	r2, [r1, #0]
 80039e8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d054      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x1de>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039f0:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039f2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d012      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x166>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003a04:	d037      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x1ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003a0c:	d12e      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x1b0>
            if(hdma->XferM1CpltCallback != NULL)
 8003a0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d042      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x1de>
              hdma->XferM1CpltCallback(hdma);
 8003a14:	4620      	mov	r0, r4
 8003a16:	4798      	blx	r3
 8003a18:	e03f      	b.n	8003a9a <HAL_DMA_IRQHandler+0x1de>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a1a:	680a      	ldr	r2, [r1, #0]
 8003a1c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003a20:	e7e4      	b.n	80039ec <HAL_DMA_IRQHandler+0x130>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	6813      	ldr	r3, [r2, #0]
 8003a26:	f023 0316 	bic.w	r3, r3, #22
 8003a2a:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	6953      	ldr	r3, [r2, #20]
 8003a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a34:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a38:	b1a3      	cbz	r3, 8003a64 <HAL_DMA_IRQHandler+0x1a8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	6813      	ldr	r3, [r2, #0]
 8003a3e:	f023 0308 	bic.w	r3, r3, #8
 8003a42:	6013      	str	r3, [r2, #0]
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a44:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a46:	233f      	movs	r3, #63	; 0x3f
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8003a58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d049      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x236>
            hdma->XferAbortCallback(hdma);
 8003a5e:	4620      	mov	r0, r4
 8003a60:	4798      	blx	r3
 8003a62:	e046      	b.n	8003af2 <HAL_DMA_IRQHandler+0x236>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e7      	bne.n	8003a3a <HAL_DMA_IRQHandler+0x17e>
 8003a6a:	e7eb      	b.n	8003a44 <HAL_DMA_IRQHandler+0x188>
            if(hdma->XferCpltCallback != NULL)
 8003a6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a6e:	b1a3      	cbz	r3, 8003a9a <HAL_DMA_IRQHandler+0x1de>
              hdma->XferCpltCallback(hdma);
 8003a70:	4620      	mov	r0, r4
 8003a72:	4798      	blx	r3
 8003a74:	e011      	b.n	8003a9a <HAL_DMA_IRQHandler+0x1de>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003a7c:	d109      	bne.n	8003a92 <HAL_DMA_IRQHandler+0x1d6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	f022 0210 	bic.w	r2, r2, #16
 8003a84:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 8003a86:	2300      	movs	r3, #0
 8003a88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8003a92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a94:	b10b      	cbz	r3, 8003a9a <HAL_DMA_IRQHandler+0x1de>
            hdma->XferCpltCallback(hdma);
 8003a96:	4620      	mov	r0, r4
 8003a98:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a9c:	b34b      	cbz	r3, 8003af2 <HAL_DMA_IRQHandler+0x236>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003aa0:	f013 0f01 	tst.w	r3, #1
 8003aa4:	d021      	beq.n	8003aea <HAL_DMA_IRQHandler+0x22e>
        hdma->State = HAL_DMA_STATE_ABORT;
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <HAL_DMA_IRQHandler+0x254>)
 8003ab0:	441a      	add	r2, r3
 8003ab2:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8003ab6:	d81e      	bhi.n	8003af6 <HAL_DMA_IRQHandler+0x23a>
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8003ac0:	9b01      	ldr	r3, [sp, #4]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	429d      	cmp	r5, r3
 8003ac8:	d304      	bcc.n	8003ad4 <HAL_DMA_IRQHandler+0x218>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET);
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f013 0f01 	tst.w	r3, #1
 8003ad2:	d1f5      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0x204>
        __HAL_UNLOCK(hdma);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f013 0f01 	tst.w	r3, #1
 8003ae2:	d00d      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x244>
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8003aea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003aec:	b10b      	cbz	r3, 8003af2 <HAL_DMA_IRQHandler+0x236>
        hdma->XferErrorCallback(hdma);
 8003aee:	4620      	mov	r0, r4
 8003af0:	4798      	blx	r3
}
 8003af2:	b003      	add	sp, #12
 8003af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_DMA_DISABLE(hdma);
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e7df      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x204>
          hdma->State = HAL_DMA_STATE_READY;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8003b06:	e7f0      	b.n	8003aea <HAL_DMA_IRQHandler+0x22e>
 8003b08:	20000090 	.word	0x20000090
 8003b0c:	1b4e81b5 	.word	0x1b4e81b5
 8003b10:	bffdfff0 	.word	0xbffdfff0
 8003b14:	00800001 	.word	0x00800001
 8003b18:	00800004 	.word	0x00800004
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET)  /*D3 domain BDMA */
 8003b1c:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <HAL_DMA_IRQHandler+0x338>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	2b8c      	cmp	r3, #140	; 0x8c
 8003b22:	d8e6      	bhi.n	8003af2 <HAL_DMA_IRQHandler+0x236>
    if ((RESET != (BDMA->ISR & (BDMA_FLAG_HT0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_HTIE)))
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_DMA_IRQHandler+0x33c>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	408b      	lsls	r3, r1
 8003b2e:	4218      	tst	r0, r3
 8003b30:	d018      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x2a8>
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	f013 0f04 	tst.w	r3, #4
 8003b38:	d014      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x2a8>
        if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8003b3a:	6813      	ldr	r3, [r2, #0]
 8003b3c:	f013 0f20 	tst.w	r3, #32
 8003b40:	d103      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x28e>
          (*ccr_reg) &= ~BDMA_CCR_HTIE;
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	6013      	str	r3, [r2, #0]
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 8003b4a:	492b      	ldr	r1, [pc, #172]	; (8003bf8 <HAL_DMA_IRQHandler+0x33c>)
 8003b4c:	684b      	ldr	r3, [r1, #4]
 8003b4e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003b50:	2204      	movs	r2, #4
 8003b52:	4082      	lsls	r2, r0
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
       if(hdma->XferHalfCpltCallback != NULL)
 8003b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0c9      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x236>
          hdma->XferHalfCpltCallback(hdma);
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4798      	blx	r3
 8003b62:	e7c6      	b.n	8003af2 <HAL_DMA_IRQHandler+0x236>
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 8003b64:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_DMA_IRQHandler+0x33c>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	2302      	movs	r3, #2
 8003b6a:	408b      	lsls	r3, r1
 8003b6c:	4218      	tst	r0, r3
 8003b6e:	d01e      	beq.n	8003bae <HAL_DMA_IRQHandler+0x2f2>
 8003b70:	6813      	ldr	r3, [r2, #0]
 8003b72:	f013 0f02 	tst.w	r3, #2
 8003b76:	d01a      	beq.n	8003bae <HAL_DMA_IRQHandler+0x2f2>
      if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8003b78:	6813      	ldr	r3, [r2, #0]
 8003b7a:	f013 0f20 	tst.w	r3, #32
 8003b7e:	d109      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x2d8>
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 8003b80:	6813      	ldr	r3, [r2, #0]
 8003b82:	f023 030a 	bic.w	r3, r3, #10
 8003b86:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 8003b94:	4918      	ldr	r1, [pc, #96]	; (8003bf8 <HAL_DMA_IRQHandler+0x33c>)
 8003b96:	684b      	ldr	r3, [r1, #4]
 8003b98:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	4082      	lsls	r2, r0
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
      if(hdma->XferCpltCallback != NULL)
 8003ba2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0a4      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x236>
        hdma->XferCpltCallback(hdma);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	4798      	blx	r3
 8003bac:	e7a1      	b.n	8003af2 <HAL_DMA_IRQHandler+0x236>
    else if (( RESET != (BDMA->ISR & (BDMA_FLAG_TE0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TEIE)))
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_DMA_IRQHandler+0x33c>)
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	fa03 f101 	lsl.w	r1, r3, r1
 8003bb8:	4208      	tst	r0, r1
 8003bba:	d09a      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x236>
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	f013 0f08 	tst.w	r3, #8
 8003bc2:	d096      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x236>
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 8003bc4:	6813      	ldr	r3, [r2, #0]
 8003bc6:	f023 030e 	bic.w	r3, r3, #14
 8003bca:	6013      	str	r3, [r2, #0]
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 8003bcc:	480a      	ldr	r0, [pc, #40]	; (8003bf8 <HAL_DMA_IRQHandler+0x33c>)
 8003bce:	6842      	ldr	r2, [r0, #4]
 8003bd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	fa03 f101 	lsl.w	r1, r3, r1
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	6042      	str	r2, [r0, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bdc:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003bde:	2200      	movs	r2, #0
 8003be0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003be4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003be8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d081      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x236>
        hdma->XferErrorCallback(hdma);
 8003bee:	4620      	mov	r0, r4
 8003bf0:	4798      	blx	r3
 8003bf2:	e77e      	b.n	8003af2 <HAL_DMA_IRQHandler+0x236>
 8003bf4:	a7fdabf8 	.word	0xa7fdabf8
 8003bf8:	58025400 	.word	0x58025400

08003bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfe:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c00:	2400      	movs	r4, #0
 8003c02:	e03b      	b.n	8003c7c <HAL_GPIO_Init+0x80>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c04:	2609      	movs	r6, #9
 8003c06:	e000      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003c08:	2600      	movs	r6, #0
 8003c0a:	fa06 f60e 	lsl.w	r6, r6, lr
 8003c0e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c10:	3302      	adds	r3, #2
 8003c12:	4e70      	ldr	r6, [pc, #448]	; (8003dd4 <HAL_GPIO_Init+0x1d8>)
 8003c14:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8003c18:	4b6f      	ldr	r3, [pc, #444]	; (8003dd8 <HAL_GPIO_Init+0x1dc>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8003c1c:	43eb      	mvns	r3, r5
 8003c1e:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c22:	684f      	ldr	r7, [r1, #4]
 8003c24:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003c28:	d001      	beq.n	8003c2e <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8003c2a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI_Ptr->IMR1 = temp;
 8003c2e:	4a6a      	ldr	r2, [pc, #424]	; (8003dd8 <HAL_GPIO_Init+0x1dc>)
 8003c30:	6016      	str	r6, [r2, #0]

        temp = EXTI_Ptr->EMR1;
 8003c32:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	ea03 0206 	and.w	r2, r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c38:	684f      	ldr	r7, [r1, #4]
 8003c3a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003c3e:	d001      	beq.n	8003c44 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8003c40:	ea45 0206 	orr.w	r2, r5, r6
        }
        EXTI_Ptr->EMR1 = temp;
 8003c44:	4e64      	ldr	r6, [pc, #400]	; (8003dd8 <HAL_GPIO_Init+0x1dc>)
 8003c46:	6072      	str	r2, [r6, #4]
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4c:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003c4e:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c52:	684f      	ldr	r7, [r1, #4]
 8003c54:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003c58:	d001      	beq.n	8003c5e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003c5a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR1 = temp;
 8003c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c62:	6016      	str	r6, [r2, #0]

        temp = EXTI->FTSR1;
 8003c64:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003c66:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c68:	684e      	ldr	r6, [r1, #4]
 8003c6a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003c6e:	d001      	beq.n	8003c74 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8003c70:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR1 = temp;
 8003c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c78:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c7a:	3401      	adds	r4, #1
 8003c7c:	2c0f      	cmp	r4, #15
 8003c7e:	f200 80a6 	bhi.w	8003dce <HAL_GPIO_Init+0x1d2>
    ioposition = ((uint32_t)0x01) << position;
 8003c82:	2301      	movs	r3, #1
 8003c84:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c86:	680a      	ldr	r2, [r1, #0]
 8003c88:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	d1f4      	bne.n	8003c7a <HAL_GPIO_Init+0x7e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c90:	684a      	ldr	r2, [r1, #4]
 8003c92:	2a12      	cmp	r2, #18
 8003c94:	bf18      	it	ne
 8003c96:	2a02      	cmpne	r2, #2
 8003c98:	d112      	bne.n	8003cc0 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->AFR[position >> 3];
 8003c9a:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8003c9e:	f10e 0e08 	add.w	lr, lr, #8
 8003ca2:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ca6:	f004 0607 	and.w	r6, r4, #7
 8003caa:	00b6      	lsls	r6, r6, #2
 8003cac:	270f      	movs	r7, #15
 8003cae:	40b7      	lsls	r7, r6
 8003cb0:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cb4:	690f      	ldr	r7, [r1, #16]
 8003cb6:	fa07 f606 	lsl.w	r6, r7, r6
 8003cba:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8003cbc:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8003cc0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cc2:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f20e 	lsl.w	r2, r2, lr
 8003ccc:	43d2      	mvns	r2, r2
 8003cce:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cd0:	684f      	ldr	r7, [r1, #4]
 8003cd2:	f007 0703 	and.w	r7, r7, #3
 8003cd6:	fa07 f70e 	lsl.w	r7, r7, lr
 8003cda:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8003cdc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cde:	684e      	ldr	r6, [r1, #4]
 8003ce0:	1e77      	subs	r7, r6, #1
 8003ce2:	2e11      	cmp	r6, #17
 8003ce4:	bf18      	it	ne
 8003ce6:	2f01      	cmpne	r7, #1
 8003ce8:	d901      	bls.n	8003cee <HAL_GPIO_Init+0xf2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cea:	2e12      	cmp	r6, #18
 8003cec:	d10f      	bne.n	8003d0e <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8003cee:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cf0:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cf2:	68cf      	ldr	r7, [r1, #12]
 8003cf4:	fa07 f70e 	lsl.w	r7, r7, lr
 8003cf8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8003cfa:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003cfc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cfe:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d02:	684e      	ldr	r6, [r1, #4]
 8003d04:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8003d08:	40a6      	lsls	r6, r4
 8003d0a:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8003d0c:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8003d0e:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d10:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d12:	688b      	ldr	r3, [r1, #8]
 8003d14:	fa03 f30e 	lsl.w	r3, r3, lr
 8003d18:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8003d1a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d1c:	684b      	ldr	r3, [r1, #4]
 8003d1e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d22:	d0aa      	beq.n	8003c7a <HAL_GPIO_Init+0x7e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_GPIO_Init+0x1e0>)
 8003d26:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003d2a:	f042 0202 	orr.w	r2, r2, #2
 8003d2e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003d3e:	08a3      	lsrs	r3, r4, #2
 8003d40:	1c9e      	adds	r6, r3, #2
 8003d42:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <HAL_GPIO_Init+0x1d8>)
 8003d44:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d48:	f004 0603 	and.w	r6, r4, #3
 8003d4c:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8003d50:	260f      	movs	r6, #15
 8003d52:	fa06 f60e 	lsl.w	r6, r6, lr
 8003d56:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d5a:	4f21      	ldr	r7, [pc, #132]	; (8003de0 <HAL_GPIO_Init+0x1e4>)
 8003d5c:	42b8      	cmp	r0, r7
 8003d5e:	f43f af53 	beq.w	8003c08 <HAL_GPIO_Init+0xc>
 8003d62:	4e20      	ldr	r6, [pc, #128]	; (8003de4 <HAL_GPIO_Init+0x1e8>)
 8003d64:	42b0      	cmp	r0, r6
 8003d66:	d022      	beq.n	8003dae <HAL_GPIO_Init+0x1b2>
 8003d68:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d6c:	42b0      	cmp	r0, r6
 8003d6e:	d020      	beq.n	8003db2 <HAL_GPIO_Init+0x1b6>
 8003d70:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d74:	42b0      	cmp	r0, r6
 8003d76:	d01e      	beq.n	8003db6 <HAL_GPIO_Init+0x1ba>
 8003d78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d7c:	42b0      	cmp	r0, r6
 8003d7e:	d01c      	beq.n	8003dba <HAL_GPIO_Init+0x1be>
 8003d80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d84:	42b0      	cmp	r0, r6
 8003d86:	d01a      	beq.n	8003dbe <HAL_GPIO_Init+0x1c2>
 8003d88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d8c:	42b0      	cmp	r0, r6
 8003d8e:	d018      	beq.n	8003dc2 <HAL_GPIO_Init+0x1c6>
 8003d90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d94:	42b0      	cmp	r0, r6
 8003d96:	d016      	beq.n	8003dc6 <HAL_GPIO_Init+0x1ca>
 8003d98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d9c:	42b0      	cmp	r0, r6
 8003d9e:	d014      	beq.n	8003dca <HAL_GPIO_Init+0x1ce>
 8003da0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003da4:	42b0      	cmp	r0, r6
 8003da6:	f43f af2d 	beq.w	8003c04 <HAL_GPIO_Init+0x8>
 8003daa:	260a      	movs	r6, #10
 8003dac:	e72d      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003dae:	2601      	movs	r6, #1
 8003db0:	e72b      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003db2:	2602      	movs	r6, #2
 8003db4:	e729      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003db6:	2603      	movs	r6, #3
 8003db8:	e727      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003dba:	2604      	movs	r6, #4
 8003dbc:	e725      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003dbe:	2605      	movs	r6, #5
 8003dc0:	e723      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003dc2:	2606      	movs	r6, #6
 8003dc4:	e721      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003dc6:	2607      	movs	r6, #7
 8003dc8:	e71f      	b.n	8003c0a <HAL_GPIO_Init+0xe>
 8003dca:	2608      	movs	r6, #8
 8003dcc:	e71d      	b.n	8003c0a <HAL_GPIO_Init+0xe>
      }      
    }
  }
}
 8003dce:	b003      	add	sp, #12
 8003dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	58000400 	.word	0x58000400
 8003dd8:	58000080 	.word	0x58000080
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	58020000 	.word	0x58020000
 8003de4:	58020400 	.word	0x58020400

08003de8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de8:	b90a      	cbnz	r2, 8003dee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8003dea:	8341      	strh	r1, [r0, #26]
 8003dec:	4770      	bx	lr
    GPIOx->BSRRL = GPIO_Pin;
 8003dee:	8301      	strh	r1, [r0, #24]
 8003df0:	4770      	bx	lr

08003df2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003df2:	6943      	ldr	r3, [r0, #20]
 8003df4:	4059      	eors	r1, r3
 8003df6:	6141      	str	r1, [r0, #20]
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e00:	6803      	ldr	r3, [r0, #0]
 8003e02:	f013 0f01 	tst.w	r3, #1
 8003e06:	d03b      	beq.n	8003e80 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e08:	4bad      	ldr	r3, [pc, #692]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d02c      	beq.n	8003e6e <HAL_RCC_OscConfig+0x72>
 8003e14:	4baa      	ldr	r3, [pc, #680]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e1c:	2b18      	cmp	r3, #24
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e20:	6863      	ldr	r3, [r4, #4]
 8003e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e26:	d055      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xd8>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d159      	bne.n	8003ee0 <HAL_RCC_OscConfig+0xe4>
 8003e2c:	4ba4      	ldr	r3, [pc, #656]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3e:	6863      	ldr	r3, [r4, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d064      	beq.n	8003f0e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe fd94 	bl	8002970 <HAL_GetTick>
 8003e48:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b9d      	ldr	r3, [pc, #628]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e52:	d115      	bne.n	8003e80 <HAL_RCC_OscConfig+0x84>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fe fd8c 	bl	8002970 <HAL_GetTick>
 8003e58:	1b40      	subs	r0, r0, r5
 8003e5a:	2864      	cmp	r0, #100	; 0x64
 8003e5c:	d9f5      	bls.n	8003e4a <HAL_RCC_OscConfig+0x4e>
          {
            return HAL_TIMEOUT;
 8003e5e:	2003      	movs	r0, #3
 8003e60:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e62:	4b97      	ldr	r3, [pc, #604]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d1d8      	bne.n	8003e20 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6e:	4b94      	ldr	r3, [pc, #592]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e76:	d003      	beq.n	8003e80 <HAL_RCC_OscConfig+0x84>
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8274 	beq.w	8004368 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	f013 0f02 	tst.w	r3, #2
 8003e86:	f000 8084 	beq.w	8003f92 <HAL_RCC_OscConfig+0x196>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e8a:	4b8d      	ldr	r3, [pc, #564]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f013 0f38 	tst.w	r3, #56	; 0x38
 8003e92:	d050      	beq.n	8003f36 <HAL_RCC_OscConfig+0x13a>
 8003e94:	4b8a      	ldr	r3, [pc, #552]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e9c:	2b18      	cmp	r3, #24
 8003e9e:	d045      	beq.n	8003f2c <HAL_RCC_OscConfig+0x130>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea0:	68e3      	ldr	r3, [r4, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80ad 	beq.w	8004002 <HAL_RCC_OscConfig+0x206>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ea8:	4985      	ldr	r1, [pc, #532]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003eaa:	680a      	ldr	r2, [r1, #0]
 8003eac:	f022 0219 	bic.w	r2, r2, #25
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fd5c 	bl	8002970 <HAL_GetTick>
 8003eb8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eba:	4b81      	ldr	r3, [pc, #516]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f013 0f04 	tst.w	r3, #4
 8003ec2:	f040 808e 	bne.w	8003fe2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec6:	f7fe fd53 	bl	8002970 <HAL_GetTick>
 8003eca:	1b40      	subs	r0, r0, r5
 8003ecc:	2802      	cmp	r0, #2
 8003ece:	d9f4      	bls.n	8003eba <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 8003ed0:	2003      	movs	r0, #3
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed4:	4a7a      	ldr	r2, [pc, #488]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e7ae      	b.n	8003e3e <HAL_RCC_OscConfig+0x42>
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_OscConfig+0xfe>
 8003ee6:	4b76      	ldr	r3, [pc, #472]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e7a1      	b.n	8003e3e <HAL_RCC_OscConfig+0x42>
 8003efa:	4b71      	ldr	r3, [pc, #452]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e797      	b.n	8003e3e <HAL_RCC_OscConfig+0x42>
        tickstart = HAL_GetTick();
 8003f0e:	f7fe fd2f 	bl	8002970 <HAL_GetTick>
 8003f12:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f14:	4b6a      	ldr	r3, [pc, #424]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f1c:	d0b0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x84>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f1e:	f7fe fd27 	bl	8002970 <HAL_GetTick>
 8003f22:	1b40      	subs	r0, r0, r5
 8003f24:	2864      	cmp	r0, #100	; 0x64
 8003f26:	d9f5      	bls.n	8003f14 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8003f28:	2003      	movs	r0, #3
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f2c:	4b64      	ldr	r3, [pc, #400]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	f013 0f03 	tst.w	r3, #3
 8003f34:	d1b4      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f36:	4b62      	ldr	r3, [pc, #392]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f013 0f04 	tst.w	r3, #4
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCC_OscConfig+0x14c>
 8003f40:	68e3      	ldr	r3, [r4, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8212 	beq.w	800436c <HAL_RCC_OscConfig+0x570>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f48:	4a5d      	ldr	r2, [pc, #372]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	f023 0319 	bic.w	r3, r3, #25
 8003f50:	68e1      	ldr	r1, [r4, #12]
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f56:	f7fe fd0b 	bl	8002970 <HAL_GetTick>
 8003f5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f013 0f04 	tst.w	r3, #4
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x178>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fe fd03 	bl	8002970 <HAL_GetTick>
 8003f6a:	1b40      	subs	r0, r0, r5
 8003f6c:	2802      	cmp	r0, #2
 8003f6e:	d9f5      	bls.n	8003f5c <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8003f70:	2003      	movs	r0, #3
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f74:	4852      	ldr	r0, [pc, #328]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003f76:	6843      	ldr	r3, [r0, #4]
 8003f78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f7c:	6921      	ldr	r1, [r4, #16]
 8003f7e:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 8003f82:	fa92 f2a2 	rbit	r2, r2
 8003f86:	fab2 f282 	clz	r2, r2
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	6043      	str	r3, [r0, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	f013 0f10 	tst.w	r3, #16
 8003f98:	d066      	beq.n	8004068 <HAL_RCC_OscConfig+0x26c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f9a:	4b49      	ldr	r3, [pc, #292]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d047      	beq.n	8004036 <HAL_RCC_OscConfig+0x23a>
 8003fa6:	4b46      	ldr	r3, [pc, #280]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fae:	2b18      	cmp	r3, #24
 8003fb0:	d03b      	beq.n	800402a <HAL_RCC_OscConfig+0x22e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003fb2:	69e3      	ldr	r3, [r4, #28]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8085 	beq.w	80040c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003fba:	4a41      	ldr	r2, [pc, #260]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003fbc:	6813      	ldr	r3, [r2, #0]
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fcd4 	bl	8002970 <HAL_GetTick>
 8003fc8:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8003fca:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fd2:	d164      	bne.n	800409e <HAL_RCC_OscConfig+0x2a2>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fd4:	f7fe fccc 	bl	8002970 <HAL_GetTick>
 8003fd8:	1b40      	subs	r0, r0, r5
 8003fda:	2802      	cmp	r0, #2
 8003fdc:	d9f5      	bls.n	8003fca <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8003fde:	2003      	movs	r0, #3
 8003fe0:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe2:	4837      	ldr	r0, [pc, #220]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8003fe4:	6843      	ldr	r3, [r0, #4]
 8003fe6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fea:	6921      	ldr	r1, [r4, #16]
 8003fec:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 8003ff0:	fa92 f2a2 	rbit	r2, r2
 8003ff4:	fab2 f282 	clz	r2, r2
 8003ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	6043      	str	r3, [r0, #4]
 8004000:	e7c7      	b.n	8003f92 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_DISABLE();
 8004002:	4a2f      	ldr	r2, [pc, #188]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8004004:	6813      	ldr	r3, [r2, #0]
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800400c:	f7fe fcb0 	bl	8002970 <HAL_GetTick>
 8004010:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f013 0f04 	tst.w	r3, #4
 800401a:	d0ba      	beq.n	8003f92 <HAL_RCC_OscConfig+0x196>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401c:	f7fe fca8 	bl	8002970 <HAL_GetTick>
 8004020:	1b40      	subs	r0, r0, r5
 8004022:	2802      	cmp	r0, #2
 8004024:	d9f5      	bls.n	8004012 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004026:	2003      	movs	r0, #3
 8004028:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800402a:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d1bd      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800403e:	d004      	beq.n	800404a <HAL_RCC_OscConfig+0x24e>
 8004040:	69e3      	ldr	r3, [r4, #28]
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d001      	beq.n	800404a <HAL_RCC_OscConfig+0x24e>
        return HAL_ERROR;
 8004046:	2001      	movs	r0, #1
 8004048:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800404a:	481d      	ldr	r0, [pc, #116]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 800404c:	6843      	ldr	r3, [r0, #4]
 800404e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004052:	6a21      	ldr	r1, [r4, #32]
 8004054:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8004058:	fa92 f2a2 	rbit	r2, r2
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	fa01 f202 	lsl.w	r2, r1, r2
 8004064:	4313      	orrs	r3, r2
 8004066:	6043      	str	r3, [r0, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	f013 0f08 	tst.w	r3, #8
 800406e:	d051      	beq.n	8004114 <HAL_RCC_OscConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004070:	6963      	ldr	r3, [r4, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03a      	beq.n	80040ec <HAL_RCC_OscConfig+0x2f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8004078:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fe fc76 	bl	8002970 <HAL_GetTick>
 8004084:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	f013 0f02 	tst.w	r3, #2
 800408e:	d141      	bne.n	8004114 <HAL_RCC_OscConfig+0x318>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004090:	f7fe fc6e 	bl	8002970 <HAL_GetTick>
 8004094:	1b40      	subs	r0, r0, r5
 8004096:	2802      	cmp	r0, #2
 8004098:	d9f5      	bls.n	8004086 <HAL_RCC_OscConfig+0x28a>
        {
          return HAL_TIMEOUT;
 800409a:	2003      	movs	r0, #3
 800409c:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800409e:	4808      	ldr	r0, [pc, #32]	; (80040c0 <HAL_RCC_OscConfig+0x2c4>)
 80040a0:	6843      	ldr	r3, [r0, #4]
 80040a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80040a6:	6a21      	ldr	r1, [r4, #32]
 80040a8:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80040ac:	fa92 f2a2 	rbit	r2, r2
 80040b0:	fab2 f282 	clz	r2, r2
 80040b4:	fa01 f202 	lsl.w	r2, r1, r2
 80040b8:	4313      	orrs	r3, r2
 80040ba:	6043      	str	r3, [r0, #4]
 80040bc:	e7d4      	b.n	8004068 <HAL_RCC_OscConfig+0x26c>
 80040be:	bf00      	nop
 80040c0:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 80040c4:	4aac      	ldr	r2, [pc, #688]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040ce:	f7fe fc4f 	bl	8002970 <HAL_GetTick>
 80040d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 80040d4:	4ba8      	ldr	r3, [pc, #672]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040dc:	d0c4      	beq.n	8004068 <HAL_RCC_OscConfig+0x26c>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040de:	f7fe fc47 	bl	8002970 <HAL_GetTick>
 80040e2:	1b40      	subs	r0, r0, r5
 80040e4:	2802      	cmp	r0, #2
 80040e6:	d9f5      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2d8>
            return HAL_TIMEOUT;
 80040e8:	2003      	movs	r0, #3
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ec:	4aa2      	ldr	r2, [pc, #648]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 80040ee:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fe fc3b 	bl	8002970 <HAL_GetTick>
 80040fa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	4b9e      	ldr	r3, [pc, #632]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	f013 0f02 	tst.w	r3, #2
 8004104:	d006      	beq.n	8004114 <HAL_RCC_OscConfig+0x318>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004106:	f7fe fc33 	bl	8002970 <HAL_GetTick>
 800410a:	1b40      	subs	r0, r0, r5
 800410c:	2802      	cmp	r0, #2
 800410e:	d9f5      	bls.n	80040fc <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8004110:	2003      	movs	r0, #3
 8004112:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	f013 0f20 	tst.w	r3, #32
 800411a:	d029      	beq.n	8004170 <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800411c:	69a3      	ldr	r3, [r4, #24]
 800411e:	b19b      	cbz	r3, 8004148 <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004120:	4a95      	ldr	r2, [pc, #596]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004122:	6813      	ldr	r3, [r2, #0]
 8004124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004128:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 800412a:	f7fe fc21 	bl	8002970 <HAL_GetTick>
 800412e:	4605      	mov	r5, r0
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004130:	4b91      	ldr	r3, [pc, #580]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004138:	d11a      	bne.n	8004170 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800413a:	f7fe fc19 	bl	8002970 <HAL_GetTick>
 800413e:	1b40      	subs	r0, r0, r5
 8004140:	2802      	cmp	r0, #2
 8004142:	d9f5      	bls.n	8004130 <HAL_RCC_OscConfig+0x334>
        {
          return HAL_TIMEOUT;
 8004144:	2003      	movs	r0, #3
 8004146:	bd38      	pop	{r3, r4, r5, pc}
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004148:	4a8b      	ldr	r2, [pc, #556]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004150:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8004152:	f7fe fc0d 	bl	8002970 <HAL_GetTick>
 8004156:	4605      	mov	r5, r0
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004158:	4b87      	ldr	r3, [pc, #540]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004160:	d006      	beq.n	8004170 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004162:	f7fe fc05 	bl	8002970 <HAL_GetTick>
 8004166:	1b40      	subs	r0, r0, r5
 8004168:	2802      	cmp	r0, #2
 800416a:	d9f5      	bls.n	8004158 <HAL_RCC_OscConfig+0x35c>
        {
          return HAL_TIMEOUT;
 800416c:	2003      	movs	r0, #3
 800416e:	bd38      	pop	{r3, r4, r5, pc}
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	f013 0f04 	tst.w	r3, #4
 8004176:	d121      	bne.n	80041bc <HAL_RCC_OscConfig+0x3c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80f8 	beq.w	8004370 <HAL_RCC_OscConfig+0x574>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004180:	4a7d      	ldr	r2, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004182:	6912      	ldr	r2, [r2, #16]
 8004184:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004188:	2a18      	cmp	r2, #24
 800418a:	f000 80f3 	beq.w	8004374 <HAL_RCC_OscConfig+0x578>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418e:	2b02      	cmp	r3, #2
 8004190:	d075      	beq.n	800427e <HAL_RCC_OscConfig+0x482>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004192:	4a79      	ldr	r2, [pc, #484]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004194:	6813      	ldr	r3, [r2, #0]
 8004196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800419a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe fbe8 	bl	8002970 <HAL_GetTick>
 80041a0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	4b75      	ldr	r3, [pc, #468]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041aa:	f000 80db 	beq.w	8004364 <HAL_RCC_OscConfig+0x568>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fe fbdf 	bl	8002970 <HAL_GetTick>
 80041b2:	1b00      	subs	r0, r0, r4
 80041b4:	2802      	cmp	r0, #2
 80041b6:	d9f4      	bls.n	80041a2 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 80041b8:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
    PWR->CR1 |= PWR_CR1_DBP;
 80041bc:	4a6f      	ldr	r2, [pc, #444]	; (800437c <HAL_RCC_OscConfig+0x580>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80041c6:	f7fe fbd3 	bl	8002970 <HAL_GetTick>
 80041ca:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041cc:	4b6b      	ldr	r3, [pc, #428]	; (800437c <HAL_RCC_OscConfig+0x580>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041d4:	d106      	bne.n	80041e4 <HAL_RCC_OscConfig+0x3e8>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041d6:	f7fe fbcb 	bl	8002970 <HAL_GetTick>
 80041da:	1b40      	subs	r0, r0, r5
 80041dc:	2864      	cmp	r0, #100	; 0x64
 80041de:	d9f5      	bls.n	80041cc <HAL_RCC_OscConfig+0x3d0>
        return HAL_TIMEOUT;
 80041e0:	2003      	movs	r0, #3
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e4:	68a3      	ldr	r3, [r4, #8]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d01c      	beq.n	8004224 <HAL_RCC_OscConfig+0x428>
 80041ea:	bb0b      	cbnz	r3, 8004230 <HAL_RCC_OscConfig+0x434>
 80041ec:	4b62      	ldr	r3, [pc, #392]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 80041ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	671a      	str	r2, [r3, #112]	; 0x70
 80041f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041f8:	f022 0204 	bic.w	r2, r2, #4
 80041fc:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	b363      	cbz	r3, 800425c <HAL_RCC_OscConfig+0x460>
      tickstart = HAL_GetTick();
 8004202:	f7fe fbb5 	bl	8002970 <HAL_GetTick>
 8004206:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f013 0f02 	tst.w	r3, #2
 8004210:	d1b2      	bne.n	8004178 <HAL_RCC_OscConfig+0x37c>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fe fbad 	bl	8002970 <HAL_GetTick>
 8004216:	1b40      	subs	r0, r0, r5
 8004218:	f241 3388 	movw	r3, #5000	; 0x1388
 800421c:	4298      	cmp	r0, r3
 800421e:	d9f3      	bls.n	8004208 <HAL_RCC_OscConfig+0x40c>
          return HAL_TIMEOUT;
 8004220:	2003      	movs	r0, #3
 8004222:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	4a54      	ldr	r2, [pc, #336]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004226:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6713      	str	r3, [r2, #112]	; 0x70
 800422e:	e7e6      	b.n	80041fe <HAL_RCC_OscConfig+0x402>
 8004230:	2b05      	cmp	r3, #5
 8004232:	d009      	beq.n	8004248 <HAL_RCC_OscConfig+0x44c>
 8004234:	4b50      	ldr	r3, [pc, #320]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004236:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	671a      	str	r2, [r3, #112]	; 0x70
 800423e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004240:	f022 0204 	bic.w	r2, r2, #4
 8004244:	671a      	str	r2, [r3, #112]	; 0x70
 8004246:	e7da      	b.n	80041fe <HAL_RCC_OscConfig+0x402>
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 800424a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800424c:	f042 0204 	orr.w	r2, r2, #4
 8004250:	671a      	str	r2, [r3, #112]	; 0x70
 8004252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	671a      	str	r2, [r3, #112]	; 0x70
 800425a:	e7d0      	b.n	80041fe <HAL_RCC_OscConfig+0x402>
      tickstart = HAL_GetTick();
 800425c:	f7fe fb88 	bl	8002970 <HAL_GetTick>
 8004260:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004262:	4b45      	ldr	r3, [pc, #276]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f013 0f02 	tst.w	r3, #2
 800426a:	d085      	beq.n	8004178 <HAL_RCC_OscConfig+0x37c>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fe fb80 	bl	8002970 <HAL_GetTick>
 8004270:	1b40      	subs	r0, r0, r5
 8004272:	f241 3388 	movw	r3, #5000	; 0x1388
 8004276:	4298      	cmp	r0, r3
 8004278:	d9f3      	bls.n	8004262 <HAL_RCC_OscConfig+0x466>
          return HAL_TIMEOUT;
 800427a:	2003      	movs	r0, #3
 800427c:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_PLL_DISABLE();
 800427e:	4a3e      	ldr	r2, [pc, #248]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004280:	6813      	ldr	r3, [r2, #0]
 8004282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004286:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004288:	f7fe fb72 	bl	8002970 <HAL_GetTick>
 800428c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004296:	d006      	beq.n	80042a6 <HAL_RCC_OscConfig+0x4aa>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004298:	f7fe fb6a 	bl	8002970 <HAL_GetTick>
 800429c:	1b40      	subs	r0, r0, r5
 800429e:	2802      	cmp	r0, #2
 80042a0:	d9f5      	bls.n	800428e <HAL_RCC_OscConfig+0x492>
            return HAL_TIMEOUT;
 80042a2:	2003      	movs	r0, #3
 80042a4:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 80042a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80042aa:	4a35      	ldr	r2, [pc, #212]	; (8004380 <HAL_RCC_OscConfig+0x584>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80042b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80042b2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80042b6:	430a      	orrs	r2, r1
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28
 80042ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80042bc:	3a01      	subs	r2, #1
 80042be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042c4:	3901      	subs	r1, #1
 80042c6:	0249      	lsls	r1, r1, #9
 80042c8:	b289      	uxth	r1, r1
 80042ca:	430a      	orrs	r2, r1
 80042cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042ce:	3901      	subs	r1, #1
 80042d0:	0409      	lsls	r1, r1, #16
 80042d2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80042d6:	430a      	orrs	r2, r1
 80042d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80042da:	3901      	subs	r1, #1
 80042dc:	0609      	lsls	r1, r1, #24
 80042de:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80042e2:	430a      	orrs	r2, r1
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042e8:	4a26      	ldr	r2, [pc, #152]	; (8004384 <HAL_RCC_OscConfig+0x588>)
 80042ea:	400a      	ands	r2, r1
 80042ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80042ee:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80042f2:	fa91 f1a1 	rbit	r1, r1
 80042f6:	fab1 f181 	clz	r1, r1
 80042fa:	fa00 f101 	lsl.w	r1, r0, r1
 80042fe:	430a      	orrs	r2, r1
 8004300:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	f022 020c 	bic.w	r2, r2, #12
 8004308:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800430a:	430a      	orrs	r2, r1
 800430c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	f022 0202 	bic.w	r2, r2, #2
 8004314:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004316:	430a      	orrs	r2, r1
 8004318:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004324:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004328:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800432a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004340:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004342:	f7fe fb15 	bl	8002970 <HAL_GetTick>
 8004346:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_OscConfig+0x57c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004350:	d106      	bne.n	8004360 <HAL_RCC_OscConfig+0x564>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004352:	f7fe fb0d 	bl	8002970 <HAL_GetTick>
 8004356:	1b00      	subs	r0, r0, r4
 8004358:	2802      	cmp	r0, #2
 800435a:	d9f5      	bls.n	8004348 <HAL_RCC_OscConfig+0x54c>
            return HAL_TIMEOUT;
 800435c:	2003      	movs	r0, #3
 800435e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004360:	2000      	movs	r0, #0
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	2000      	movs	r0, #0
 8004366:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8004368:	2001      	movs	r0, #1
 800436a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800436c:	2001      	movs	r0, #1
 800436e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004370:	2000      	movs	r0, #0
 8004372:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004374:	2001      	movs	r0, #1
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	58024400 	.word	0x58024400
 800437c:	58024800 	.word	0x58024800
 8004380:	fffffc0c 	.word	0xfffffc0c
 8004384:	ffff0007 	.word	0xffff0007

08004388 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004388:	4b6d      	ldr	r3, [pc, #436]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004390:	2b10      	cmp	r3, #16
 8004392:	f000 80d2 	beq.w	800453a <HAL_RCC_GetSysClockFreq+0x1b2>
 8004396:	2b18      	cmp	r3, #24
 8004398:	d010      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0x34>
 800439a:	b10b      	cbz	r3, 80043a0 <HAL_RCC_GetSysClockFreq+0x18>
      }
      
    break;

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800439c:	4869      	ldr	r0, [pc, #420]	; (8004544 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800439e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a0:	4b67      	ldr	r3, [pc, #412]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f013 0f20 	tst.w	r3, #32
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_GetSysClockFreq+0x26>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043aa:	4867      	ldr	r0, [pc, #412]	; (8004548 <HAL_RCC_GetSysClockFreq+0x1c0>)
  default:
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
 80043ac:	4770      	bx	lr
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043ae:	4b64      	ldr	r3, [pc, #400]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80043b6:	4864      	ldr	r0, [pc, #400]	; (8004548 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80043b8:	40d8      	lsrs	r0, r3
 80043ba:	4770      	bx	lr
{
 80043bc:	b4f0      	push	{r4, r5, r6, r7}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043be:	4d60      	ldr	r5, [pc, #384]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043c0:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80043c2:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80043c6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80043c8:	f3c7 1705 	ubfx	r7, r7, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80043cc:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 80043ce:	f006 0601 	and.w	r6, r6, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80043d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80043d4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80043d8:	fb03 f306 	mul.w	r3, r3, r6
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80043e4:	2c01      	cmp	r4, #1
 80043e6:	d060      	beq.n	80044aa <HAL_RCC_GetSysClockFreq+0x122>
 80043e8:	b1f4      	cbz	r4, 8004428 <HAL_RCC_GetSysClockFreq+0xa0>
 80043ea:	2c02      	cmp	r4, #2
 80043ec:	f000 8089 	beq.w	8004502 <HAL_RCC_GetSysClockFreq+0x17a>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80043f0:	4b54      	ldr	r3, [pc, #336]	; (8004544 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043f2:	fbb3 f3f7 	udiv	r3, r3, r7
 80043f6:	ee07 3a10 	vmov	s14, r3
 80043fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80043fe:	4b50      	ldr	r3, [pc, #320]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	eddf 6a51 	vldr	s13, [pc, #324]	; 800454c <HAL_RCC_GetSysClockFreq+0x1c4>
 800440a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800440e:	ee06 3a90 	vmov	s13, r3
 8004412:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8004426:	e05b      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x158>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004428:	4b45      	ldr	r3, [pc, #276]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f013 0f20 	tst.w	r3, #32
 8004430:	d01f      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0xea>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004432:	4a43      	ldr	r2, [pc, #268]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004434:	6813      	ldr	r3, [r2, #0]
 8004436:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800443a:	4843      	ldr	r0, [pc, #268]	; (8004548 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800443c:	40d8      	lsrs	r0, r3
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800443e:	fbb0 f3f7 	udiv	r3, r0, r7
 8004442:	ee07 3a10 	vmov	s14, r3
 8004446:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800444a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800444c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004450:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800454c <HAL_RCC_GetSysClockFreq+0x1c4>
 8004454:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004458:	ee06 3a90 	vmov	s13, r3
 800445c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004470:	e036      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x158>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8004472:	4835      	ldr	r0, [pc, #212]	; (8004548 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004474:	fbb0 f3f7 	udiv	r3, r0, r7
 8004478:	ee07 3a10 	vmov	s14, r3
 800447c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004480:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004488:	eddf 6a30 	vldr	s13, [pc, #192]	; 800454c <HAL_RCC_GetSysClockFreq+0x1c4>
 800448c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004490:	ee06 3a90 	vmov	s13, r3
 8004494:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044a8:	e01a      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x158>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80044aa:	4926      	ldr	r1, [pc, #152]	; (8004544 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044ac:	fbb1 f3f7 	udiv	r3, r1, r7
 80044b0:	ee07 3a10 	vmov	s14, r3
 80044b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044b8:	4b21      	ldr	r3, [pc, #132]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c0:	eddf 6a22 	vldr	s13, [pc, #136]	; 800454c <HAL_RCC_GetSysClockFreq+0x1c4>
 80044c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044c8:	ee06 3a90 	vmov	s13, r3
 80044cc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80044d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044dc:	ee27 7a27 	vmul.f32	s14, s14, s15
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 80044e0:	4b17      	ldr	r3, [pc, #92]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80044e8:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fa:	ee17 0a90 	vmov	r0, s15
}
 80044fe:	bcf0      	pop	{r4, r5, r6, r7}
 8004500:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <HAL_RCC_GetSysClockFreq+0x1c8>)
 8004504:	fbb2 f3f7 	udiv	r3, r2, r7
 8004508:	ee07 3a10 	vmov	s14, r3
 800450c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004518:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800454c <HAL_RCC_GetSysClockFreq+0x1c4>
 800451c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004520:	ee06 3a90 	vmov	s13, r3
 8004524:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004534:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8004538:	e7d2      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x158>
    sysclockfreq = HSE_VALUE;
 800453a:	4805      	ldr	r0, [pc, #20]	; (8004550 <HAL_RCC_GetSysClockFreq+0x1c8>)
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	58024400 	.word	0x58024400
 8004544:	003d0900 	.word	0x003d0900
 8004548:	03d09000 	.word	0x03d09000
 800454c:	39000000 	.word	0x39000000
 8004550:	007a1200 	.word	0x007a1200

08004554 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004554:	4b77      	ldr	r3, [pc, #476]	; (8004734 <HAL_RCC_ClockConfig+0x1e0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	428b      	cmp	r3, r1
 800455e:	d20c      	bcs.n	800457a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004560:	4a74      	ldr	r2, [pc, #464]	; (8004734 <HAL_RCC_ClockConfig+0x1e0>)
 8004562:	6813      	ldr	r3, [r2, #0]
 8004564:	f023 0307 	bic.w	r3, r3, #7
 8004568:	430b      	orrs	r3, r1
 800456a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800456c:	6813      	ldr	r3, [r2, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	4299      	cmp	r1, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8004576:	2001      	movs	r0, #1
 8004578:	4770      	bx	lr
{
 800457a:	b570      	push	{r4, r5, r6, lr}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	6803      	ldr	r3, [r0, #0]
 800457e:	f013 0f02 	tst.w	r3, #2
 8004582:	d006      	beq.n	8004592 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004584:	4a6c      	ldr	r2, [pc, #432]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 8004586:	6993      	ldr	r3, [r2, #24]
 8004588:	f023 030f 	bic.w	r3, r3, #15
 800458c:	68c4      	ldr	r4, [r0, #12]
 800458e:	4323      	orrs	r3, r4
 8004590:	6193      	str	r3, [r2, #24]
 8004592:	460d      	mov	r5, r1
 8004594:	4604      	mov	r4, r0
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004596:	6803      	ldr	r3, [r0, #0]
 8004598:	f013 0f01 	tst.w	r3, #1
 800459c:	d072      	beq.n	8004684 <HAL_RCC_ClockConfig+0x130>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800459e:	4a66      	ldr	r2, [pc, #408]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 80045a0:	6993      	ldr	r3, [r2, #24]
 80045a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045a6:	6881      	ldr	r1, [r0, #8]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ac:	6843      	ldr	r3, [r0, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d027      	beq.n	8004602 <HAL_RCC_ClockConfig+0xae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d02b      	beq.n	800460e <HAL_RCC_ClockConfig+0xba>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d030      	beq.n	800461c <HAL_RCC_ClockConfig+0xc8>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ba:	4a5f      	ldr	r2, [pc, #380]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	f012 0f04 	tst.w	r2, #4
 80045c2:	f000 80b5 	beq.w	8004730 <HAL_RCC_ClockConfig+0x1dc>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	495c      	ldr	r1, [pc, #368]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 80045c8:	690a      	ldr	r2, [r1, #16]
 80045ca:	f022 0207 	bic.w	r2, r2, #7
 80045ce:	4313      	orrs	r3, r2
 80045d0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80045d2:	f7fe f9cd 	bl	8002970 <HAL_GetTick>
 80045d6:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d025      	beq.n	800462a <HAL_RCC_ClockConfig+0xd6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d032      	beq.n	8004648 <HAL_RCC_ClockConfig+0xf4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d03f      	beq.n	8004666 <HAL_RCC_ClockConfig+0x112>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80045e6:	4b54      	ldr	r3, [pc, #336]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f013 0f38 	tst.w	r3, #56	; 0x38
 80045ee:	d049      	beq.n	8004684 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f0:	f7fe f9be 	bl	8002970 <HAL_GetTick>
 80045f4:	1b80      	subs	r0, r0, r6
 80045f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045fa:	4298      	cmp	r0, r3
 80045fc:	d9f3      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x92>
            return HAL_TIMEOUT;
 80045fe:	2003      	movs	r0, #3
 8004600:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004608:	d1dd      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 800460a:	2001      	movs	r0, #1
 800460c:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460e:	4a4a      	ldr	r2, [pc, #296]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004616:	d1d6      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8004618:	2001      	movs	r0, #1
 800461a:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 800461c:	4a46      	ldr	r2, [pc, #280]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004624:	d1cf      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8004626:	2001      	movs	r0, #1
 8004628:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800462a:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004632:	2b10      	cmp	r3, #16
 8004634:	d026      	beq.n	8004684 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004636:	f7fe f99b 	bl	8002970 <HAL_GetTick>
 800463a:	1b80      	subs	r0, r0, r6
 800463c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004640:	4298      	cmp	r0, r3
 8004642:	d9f2      	bls.n	800462a <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8004644:	2003      	movs	r0, #3
 8004646:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004648:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004650:	2b18      	cmp	r3, #24
 8004652:	d017      	beq.n	8004684 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fe f98c 	bl	8002970 <HAL_GetTick>
 8004658:	1b80      	subs	r0, r0, r6
 800465a:	f241 3388 	movw	r3, #5000	; 0x1388
 800465e:	4298      	cmp	r0, r3
 8004660:	d9f2      	bls.n	8004648 <HAL_RCC_ClockConfig+0xf4>
            return HAL_TIMEOUT;
 8004662:	2003      	movs	r0, #3
 8004664:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8004666:	4b34      	ldr	r3, [pc, #208]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466e:	2b08      	cmp	r3, #8
 8004670:	d008      	beq.n	8004684 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004672:	f7fe f97d 	bl	8002970 <HAL_GetTick>
 8004676:	1b80      	subs	r0, r0, r6
 8004678:	f241 3388 	movw	r3, #5000	; 0x1388
 800467c:	4298      	cmp	r0, r3
 800467e:	d9f2      	bls.n	8004666 <HAL_RCC_ClockConfig+0x112>
            return HAL_TIMEOUT;
 8004680:	2003      	movs	r0, #3
 8004682:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004684:	4b2b      	ldr	r3, [pc, #172]	; (8004734 <HAL_RCC_ClockConfig+0x1e0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	429d      	cmp	r5, r3
 800468e:	d20c      	bcs.n	80046aa <HAL_RCC_ClockConfig+0x156>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004690:	4a28      	ldr	r2, [pc, #160]	; (8004734 <HAL_RCC_ClockConfig+0x1e0>)
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	f023 0307 	bic.w	r3, r3, #7
 8004698:	432b      	orrs	r3, r5
 800469a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800469c:	6813      	ldr	r3, [r2, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	429d      	cmp	r5, r3
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_ClockConfig+0x156>
      return HAL_ERROR;
 80046a6:	2001      	movs	r0, #1
}
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	f013 0f04 	tst.w	r3, #4
 80046b0:	d006      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046b2:	4a21      	ldr	r2, [pc, #132]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 80046b4:	6993      	ldr	r3, [r2, #24]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	6921      	ldr	r1, [r4, #16]
 80046bc:	430b      	orrs	r3, r1
 80046be:	6193      	str	r3, [r2, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f013 0f08 	tst.w	r3, #8
 80046c6:	d006      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x182>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 80046ca:	69d3      	ldr	r3, [r2, #28]
 80046cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d0:	6961      	ldr	r1, [r4, #20]
 80046d2:	430b      	orrs	r3, r1
 80046d4:	61d3      	str	r3, [r2, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	f013 0f10 	tst.w	r3, #16
 80046dc:	d006      	beq.n	80046ec <HAL_RCC_ClockConfig+0x198>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046de:	4a16      	ldr	r2, [pc, #88]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 80046e0:	69d3      	ldr	r3, [r2, #28]
 80046e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046e6:	69a1      	ldr	r1, [r4, #24]
 80046e8:	430b      	orrs	r3, r1
 80046ea:	61d3      	str	r3, [r2, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	f013 0f20 	tst.w	r3, #32
 80046f2:	d006      	beq.n	8004702 <HAL_RCC_ClockConfig+0x1ae>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046f4:	4a10      	ldr	r2, [pc, #64]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 80046f6:	6a13      	ldr	r3, [r2, #32]
 80046f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fc:	69e1      	ldr	r1, [r4, #28]
 80046fe:	430b      	orrs	r3, r1
 8004700:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8004702:	f7ff fe41 	bl	8004388 <HAL_RCC_GetSysClockFreq>
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <HAL_RCC_ClockConfig+0x1e4>)
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800470e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004712:	fa92 f2a2 	rbit	r2, r2
 8004716:	fab2 f282 	clz	r2, r2
 800471a:	40d3      	lsrs	r3, r2
 800471c:	4a07      	ldr	r2, [pc, #28]	; (800473c <HAL_RCC_ClockConfig+0x1e8>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	40d8      	lsrs	r0, r3
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004724:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004726:	2000      	movs	r0, #0
 8004728:	f7fd fab8 	bl	8001c9c <HAL_InitTick>
  return HAL_OK;
 800472c:	2000      	movs	r0, #0
 800472e:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8004730:	2001      	movs	r0, #1
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	52002000 	.word	0x52002000
 8004738:	58024400 	.word	0x58024400
 800473c:	0800841c 	.word	0x0800841c
 8004740:	20000090 	.word	0x20000090

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8004746:	f001 f863 	bl	8005810 <HAL_RCCEx_GetD1SysClockFreq>
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_RCC_GetHCLKFreq+0x28>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	2201      	movs	r2, #1
 8004754:	fa92 f2a2 	rbit	r2, r2
 8004758:	fab2 f282 	clz	r2, r2
 800475c:	40d3      	lsrs	r3, r2
 800475e:	4a04      	ldr	r2, [pc, #16]	; (8004770 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004760:	5cd3      	ldrb	r3, [r2, r3]
 8004762:	40d8      	lsrs	r0, r3
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCC_GetHCLKFreq+0x30>)
 8004766:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8004768:	bd08      	pop	{r3, pc}
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400
 8004770:	0800841c 	.word	0x0800841c
 8004774:	20000094 	.word	0x20000094

08004778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004778:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 800477a:	f7ff ffe3 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004786:	2210      	movs	r2, #16
 8004788:	fa92 f2a2 	rbit	r2, r2
 800478c:	fab2 f282 	clz	r2, r2
 8004790:	40d3      	lsrs	r3, r2
 8004792:	4a03      	ldr	r2, [pc, #12]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004794:	5cd3      	ldrb	r3, [r2, r3]
}
 8004796:	40d8      	lsrs	r0, r3
 8004798:	bd08      	pop	{r3, pc}
 800479a:	bf00      	nop
 800479c:	58024400 	.word	0x58024400
 80047a0:	0800841c 	.word	0x0800841c

080047a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 80047a6:	f7ff ffcd 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b6:	fa92 f2a2 	rbit	r2, r2
 80047ba:	fab2 f282 	clz	r2, r2
 80047be:	40d3      	lsrs	r3, r2
 80047c0:	4a02      	ldr	r2, [pc, #8]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c2:	5cd3      	ldrb	r3, [r2, r3]
}
 80047c4:	40d8      	lsrs	r0, r3
 80047c6:	bd08      	pop	{r3, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	0800841c 	.word	0x0800841c

080047d0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80047d0:	233f      	movs	r3, #63	; 0x3f
 80047d2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047d4:	4b11      	ldr	r3, [pc, #68]	; (800481c <HAL_RCC_GetClockConfig+0x4c>)
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	f002 0207 	and.w	r2, r2, #7
 80047dc:	6042      	str	r2, [r0, #4]

  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80047e4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	f002 020f 	and.w	r2, r2, #15
 80047ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80047f4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80047fc:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004804:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800480c:	61c3      	str	r3, [r0, #28]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800480e:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_RCC_GetClockConfig+0x50>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	600b      	str	r3, [r1, #0]
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	58024400 	.word	0x58024400
 8004820:	52002000 	.word	0x52002000

08004824 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8004824:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  
  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004826:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <RCCEx_PLL2_Config+0xbc>)
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b03      	cmp	r3, #3
 8004830:	d053      	beq.n	80048da <RCCEx_PLL2_Config+0xb6>
 8004832:	4605      	mov	r5, r0
  
  
  else    
  {  
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004834:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <RCCEx_PLL2_Config+0xbc>)
 8004836:	6813      	ldr	r3, [r2, #0]
 8004838:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800483c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483e:	f7fe f897 	bl	8002970 <HAL_GetTick>
 8004842:	4604      	mov	r4, r0
    
    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004844:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <RCCEx_PLL2_Config+0xbc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800484c:	d006      	beq.n	800485c <RCCEx_PLL2_Config+0x38>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800484e:	f7fe f88f 	bl	8002970 <HAL_GetTick>
 8004852:	1b00      	subs	r0, r0, r4
 8004854:	2802      	cmp	r0, #2
 8004856:	d9f5      	bls.n	8004844 <RCCEx_PLL2_Config+0x20>
      {
        return HAL_TIMEOUT;
 8004858:	2003      	movs	r0, #3
 800485a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    
    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800485c:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <RCCEx_PLL2_Config+0xbc>)
 800485e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004860:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004864:	6829      	ldr	r1, [r5, #0]
 8004866:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800486a:	6293      	str	r3, [r2, #40]	; 0x28
 800486c:	686b      	ldr	r3, [r5, #4]
 800486e:	3b01      	subs	r3, #1
 8004870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004874:	68a9      	ldr	r1, [r5, #8]
 8004876:	3901      	subs	r1, #1
 8004878:	0249      	lsls	r1, r1, #9
 800487a:	b289      	uxth	r1, r1
 800487c:	430b      	orrs	r3, r1
 800487e:	68e9      	ldr	r1, [r5, #12]
 8004880:	3901      	subs	r1, #1
 8004882:	0409      	lsls	r1, r1, #16
 8004884:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004888:	430b      	orrs	r3, r1
 800488a:	6929      	ldr	r1, [r5, #16]
 800488c:	3901      	subs	r1, #1
 800488e:	0609      	lsls	r1, r1, #24
 8004890:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004894:	430b      	orrs	r3, r1
 8004896:	6393      	str	r3, [r2, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);
    
    /* Select PLL2 input reference frequency range: VCI */  
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004898:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800489a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800489e:	6969      	ldr	r1, [r5, #20]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80048a6:	f023 0320 	bic.w	r3, r3, #32
 80048aa:	69a9      	ldr	r1, [r5, #24]
 80048ac:	430b      	orrs	r3, r1
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    
    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048b6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7fe f85a 	bl	8002970 <HAL_GetTick>
 80048bc:	4604      	mov	r4, r0
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <RCCEx_PLL2_Config+0xbc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80048c6:	d106      	bne.n	80048d6 <RCCEx_PLL2_Config+0xb2>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048c8:	f7fe f852 	bl	8002970 <HAL_GetTick>
 80048cc:	1b00      	subs	r0, r0, r4
 80048ce:	2802      	cmp	r0, #2
 80048d0:	d9f5      	bls.n	80048be <RCCEx_PLL2_Config+0x9a>
      {
        return HAL_TIMEOUT;
 80048d2:	2003      	movs	r0, #3
    
  }
  
  
  return status;
}
 80048d4:	bd38      	pop	{r3, r4, r5, pc}
  return status;
 80048d6:	2000      	movs	r0, #0
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80048da:	2001      	movs	r0, #1
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	58024400 	.word	0x58024400

080048e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80048e4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
  
  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048e6:	4b2e      	ldr	r3, [pc, #184]	; (80049a0 <RCCEx_PLL3_Config+0xbc>)
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d053      	beq.n	800499a <RCCEx_PLL3_Config+0xb6>
 80048f2:	4605      	mov	r5, r0
  
  
  else    
  { 
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <RCCEx_PLL3_Config+0xbc>)
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fe:	f7fe f837 	bl	8002970 <HAL_GetTick>
 8004902:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8004904:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <RCCEx_PLL3_Config+0xbc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800490c:	d006      	beq.n	800491c <RCCEx_PLL3_Config+0x38>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800490e:	f7fe f82f 	bl	8002970 <HAL_GetTick>
 8004912:	1b00      	subs	r0, r0, r4
 8004914:	2802      	cmp	r0, #2
 8004916:	d9f5      	bls.n	8004904 <RCCEx_PLL3_Config+0x20>
      {
        return HAL_TIMEOUT;
 8004918:	2003      	movs	r0, #3
 800491a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    
    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800491c:	4a20      	ldr	r2, [pc, #128]	; (80049a0 <RCCEx_PLL3_Config+0xbc>)
 800491e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004920:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004924:	6829      	ldr	r1, [r5, #0]
 8004926:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800492a:	6293      	str	r3, [r2, #40]	; 0x28
 800492c:	686b      	ldr	r3, [r5, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004934:	68a9      	ldr	r1, [r5, #8]
 8004936:	3901      	subs	r1, #1
 8004938:	0249      	lsls	r1, r1, #9
 800493a:	b289      	uxth	r1, r1
 800493c:	430b      	orrs	r3, r1
 800493e:	68e9      	ldr	r1, [r5, #12]
 8004940:	3901      	subs	r1, #1
 8004942:	0409      	lsls	r1, r1, #16
 8004944:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004948:	430b      	orrs	r3, r1
 800494a:	6929      	ldr	r1, [r5, #16]
 800494c:	3901      	subs	r1, #1
 800494e:	0609      	lsls	r1, r1, #24
 8004950:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004954:	430b      	orrs	r3, r1
 8004956:	6413      	str	r3, [r2, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);
    
    /* Select PLL3 input reference frequency range: VCI */  
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004958:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800495a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800495e:	6969      	ldr	r1, [r5, #20]
 8004960:	430b      	orrs	r3, r1
 8004962:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004964:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004966:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800496a:	69a9      	ldr	r1, [r5, #24]
 800496c:	430b      	orrs	r3, r1
 800496e:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    
    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004970:	6813      	ldr	r3, [r2, #0]
 8004972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004976:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004978:	f7fd fffa 	bl	8002970 <HAL_GetTick>
 800497c:	4604      	mov	r4, r0
    
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <RCCEx_PLL3_Config+0xbc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004986:	d106      	bne.n	8004996 <RCCEx_PLL3_Config+0xb2>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004988:	f7fd fff2 	bl	8002970 <HAL_GetTick>
 800498c:	1b00      	subs	r0, r0, r4
 800498e:	2802      	cmp	r0, #2
 8004990:	d9f5      	bls.n	800497e <RCCEx_PLL3_Config+0x9a>
      {
        return HAL_TIMEOUT;
 8004992:	2003      	movs	r0, #3
    
  }
  
  
  return status;
}
 8004994:	bd38      	pop	{r3, r4, r5, pc}
  return status;
 8004996:	2000      	movs	r0, #0
 8004998:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800499a:	2001      	movs	r0, #1
 800499c:	bd38      	pop	{r3, r4, r5, pc}
 800499e:	bf00      	nop
 80049a0:	58024400 	.word	0x58024400

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 80049a8:	6803      	ldr	r3, [r0, #0]
 80049aa:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80049ae:	d034      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80049b0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b6:	d01a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80049b8:	d911      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80049ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049be:	d020      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80049c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049c4:	d127      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x72>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c6:	2600      	movs	r6, #0
    if(ret == HAL_OK)
 80049c8:	2e00      	cmp	r6, #0
 80049ca:	d134      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x92>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049cc:	4aa1      	ldr	r2, [pc, #644]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80049ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80049d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049da:	4635      	mov	r5, r6
 80049dc:	e01f      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80049de:	b9d3      	cbnz	r3, 8004a16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e0:	4a9c      	ldr	r2, [pc, #624]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80049e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ea:	2600      	movs	r6, #0
      break;
 80049ec:	e7ec      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ee:	4a99      	ldr	r2, [pc, #612]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80049f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049f6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80049f8:	3004      	adds	r0, #4
 80049fa:	f7ff ff13 	bl	8004824 <RCCEx_PLL2_Config>
 80049fe:	4606      	mov	r6, r0
      break;
 8004a00:	e7e2      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004a02:	4a94      	ldr	r2, [pc, #592]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004a0c:	3024      	adds	r0, #36	; 0x24
 8004a0e:	f7ff ff69 	bl	80048e4 <RCCEx_PLL3_Config>
 8004a12:	4606      	mov	r6, r0
      break;
 8004a14:	e7d8      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
      ret = HAL_ERROR;
 8004a16:	2601      	movs	r6, #1
 8004a18:	e7d6      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a1a:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a1c:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a24:	d017      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d83e      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a2c:	e8df f003 	tbb	[pc, r3]
 8004a30:	0a322805 	.word	0x0a322805
 8004a34:	0a          	.byte	0x0a
 8004a35:	00          	.byte	0x00
      status |= ret;
 8004a36:	4635      	mov	r5, r6
 8004a38:	e7f1      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a3a:	4a86      	ldr	r2, [pc, #536]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a3c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a42:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004a44:	2e00      	cmp	r6, #0
 8004a46:	d132      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a48:	4a82      	ldr	r2, [pc, #520]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a4a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a4c:	f023 0307 	bic.w	r3, r3, #7
 8004a50:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004a52:	430b      	orrs	r3, r1
 8004a54:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23)
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a5c:	d03e      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x138>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d053      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a64:	d826      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a66:	b363      	cbz	r3, 8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d128      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a6c:	4a79      	ldr	r2, [pc, #484]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a74:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a76:	1d20      	adds	r0, r4, #4
 8004a78:	f7ff fed4 	bl	8004824 <RCCEx_PLL2_Config>
 8004a7c:	4606      	mov	r6, r0
      break;
 8004a7e:	e025      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a80:	4a74      	ldr	r2, [pc, #464]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a88:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a8a:	1d20      	adds	r0, r4, #4
 8004a8c:	f7ff feca 	bl	8004824 <RCCEx_PLL2_Config>
 8004a90:	4606      	mov	r6, r0
      break;
 8004a92:	e7d7      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004a94:	4a6f      	ldr	r2, [pc, #444]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004a96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004a9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004aa2:	f7ff ff1f 	bl	80048e4 <RCCEx_PLL3_Config>
 8004aa6:	4606      	mov	r6, r0
      break;
 8004aa8:	e7cc      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      ret = HAL_ERROR;
 8004aaa:	2601      	movs	r6, #1
 8004aac:	e7ca      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      status |= ret;
 8004aae:	4335      	orrs	r5, r6
 8004ab0:	b2ed      	uxtb	r5, r5
 8004ab2:	e7d0      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8004ab6:	d009      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abc:	d006      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 8004abe:	2601      	movs	r6, #1
 8004ac0:	e004      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac2:	4a64      	ldr	r2, [pc, #400]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004ac4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004acc:	bb4e      	cbnz	r6, 8004b22 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ace:	4a61      	ldr	r2, [pc, #388]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004ad0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004ad2:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004ad6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A)
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ae2:	d037      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ae4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aec:	d04a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8004aee:	d81b      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004af0:	b313      	cbz	r3, 8004b38 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af6:	d11d      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004af8:	4a56      	ldr	r2, [pc, #344]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004afa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004afc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b00:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004b02:	1d20      	adds	r0, r4, #4
 8004b04:	f7ff fe8e 	bl	8004824 <RCCEx_PLL2_Config>
 8004b08:	4606      	mov	r6, r0
      break;
 8004b0a:	e01a      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004b0c:	4a51      	ldr	r2, [pc, #324]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b14:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004b16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b1a:	f7ff fee3 	bl	80048e4 <RCCEx_PLL3_Config>
 8004b1e:	4606      	mov	r6, r0
      break;
 8004b20:	e7d4      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x128>
      status |= ret;
 8004b22:	4335      	orrs	r5, r6
 8004b24:	b2ed      	uxtb	r5, r5
 8004b26:	e7d9      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x138>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b32:	d006      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      ret = HAL_ERROR;
 8004b34:	2601      	movs	r6, #1
 8004b36:	e004      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b38:	4a46      	ldr	r2, [pc, #280]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004b42:	bb56      	cbnz	r6, 8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b44:	4a43      	ldr	r2, [pc, #268]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004b48:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004b4c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004b5a:	d037      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b5c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b64:	d03f      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004b66:	d81b      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8004b68:	b313      	cbz	r3, 8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004b6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b6e:	d11d      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b70:	4a38      	ldr	r2, [pc, #224]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004b7a:	1d20      	adds	r0, r4, #4
 8004b7c:	f7ff fe52 	bl	8004824 <RCCEx_PLL2_Config>
 8004b80:	4606      	mov	r6, r0
      break;
 8004b82:	e01a      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004b84:	4a33      	ldr	r2, [pc, #204]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004b8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b92:	f7ff fea7 	bl	80048e4 <RCCEx_PLL3_Config>
 8004b96:	4606      	mov	r6, r0
      break;
 8004b98:	e7d3      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      status |= ret;
 8004b9a:	4335      	orrs	r5, r6
 8004b9c:	b2ed      	uxtb	r5, r5
 8004b9e:	e7d9      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ba0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ba4:	d009      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004baa:	d006      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = HAL_ERROR;
 8004bac:	2601      	movs	r6, #1
 8004bae:	e004      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004bb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004bba:	b9fe      	cbnz	r6, 8004bfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bbc:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004bbe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004bc0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004bc4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004bd2:	d026      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch(PeriphClkInit->QspiClockSelection)
 8004bd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004bda:	d912      	bls.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d03b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d016      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004be4:	e00e      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004be6:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004be8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bee:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004bf0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004bf4:	f7ff fe76 	bl	80048e4 <RCCEx_PLL3_Config>
 8004bf8:	4606      	mov	r6, r0
      break;
 8004bfa:	e7de      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x216>
      status |= ret;
 8004bfc:	4335      	orrs	r5, r6
 8004bfe:	b2ed      	uxtb	r5, r5
 8004c00:	e7e4      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->QspiClockSelection)
 8004c02:	b133      	cbz	r3, 8004c12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
      ret = HAL_ERROR;
 8004c04:	2601      	movs	r6, #1
 8004c06:	e004      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c08:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004c0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c10:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004c12:	bb5e      	cbnz	r6, 8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c14:	4a0f      	ldr	r2, [pc, #60]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004c16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004c18:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004c1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123)
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004c28:	d039      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c30:	f000 8084 	beq.w	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004c34:	d81d      	bhi.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004c36:	b323      	cbz	r3, 8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3c:	d11f      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004c40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c46:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004c48:	1d20      	adds	r0, r4, #4
 8004c4a:	f7ff fdeb 	bl	8004824 <RCCEx_PLL2_Config>
 8004c4e:	4606      	mov	r6, r0
      break;
 8004c50:	e01c      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004c52:	bf00      	nop
 8004c54:	58024400 	.word	0x58024400
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c58:	4a8b      	ldr	r2, [pc, #556]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004c62:	1d20      	adds	r0, r4, #4
 8004c64:	f7ff fdde 	bl	8004824 <RCCEx_PLL2_Config>
 8004c68:	4606      	mov	r6, r0
      break;
 8004c6a:	e7d2      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
      status |= ret;
 8004c6c:	4335      	orrs	r5, r6
 8004c6e:	b2ed      	uxtb	r5, r5
 8004c70:	e7d7      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c76:	d009      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7c:	d006      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = HAL_ERROR;
 8004c7e:	2601      	movs	r6, #1
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c82:	4a81      	ldr	r2, [pc, #516]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004c8c:	2e00      	cmp	r6, #0
 8004c8e:	d160      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c90:	4a7d      	ldr	r2, [pc, #500]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c92:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45)
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004ca4:	d01a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ca6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cac:	d05f      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8004cae:	d853      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8004cb0:	b15b      	cbz	r3, 8004cca <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb6:	d158      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cb8:	4a73      	ldr	r2, [pc, #460]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004cc2:	1d20      	adds	r0, r4, #4
 8004cc4:	f7ff fdae 	bl	8004824 <RCCEx_PLL2_Config>
 8004cc8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004cca:	2e00      	cmp	r6, #0
 8004ccc:	d15a      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cce:	4a6e      	ldr	r2, [pc, #440]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cd0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004cd2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004cd6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6)
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004ce2:	d01c      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ce4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cec:	d058      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004cee:	d84c      	bhi.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004cf0:	b15b      	cbz	r3, 8004d0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 8004cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf6:	d151      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cf8:	4a63      	ldr	r2, [pc, #396]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d00:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004d02:	1d20      	adds	r0, r4, #4
 8004d04:	f7ff fd8e 	bl	8004824 <RCCEx_PLL2_Config>
 8004d08:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d153      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d0e:	4a5e      	ldr	r2, [pc, #376]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004d12:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004d16:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN)
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004d24:	d057      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch(PeriphClkInit->FdcanClockSelection)
 8004d26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d2c:	d046      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d32:	d05b      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x448>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d046      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      ret = HAL_ERROR;
 8004d38:	2601      	movs	r6, #1
 8004d3a:	e044      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004d3c:	4a52      	ldr	r2, [pc, #328]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d44:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004d46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d4a:	f7ff fdcb 	bl	80048e4 <RCCEx_PLL3_Config>
 8004d4e:	4606      	mov	r6, r0
      break;
 8004d50:	e79c      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      status |= ret;
 8004d52:	4335      	orrs	r5, r6
 8004d54:	b2ed      	uxtb	r5, r5
 8004d56:	e7a2      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d5c:	d0b5      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004d5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d62:	d0b2      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d68:	d0af      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = HAL_ERROR;
 8004d6a:	2601      	movs	r6, #1
 8004d6c:	e7ad      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004d6e:	4a46      	ldr	r2, [pc, #280]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d76:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004d78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d7c:	f7ff fdb2 	bl	80048e4 <RCCEx_PLL3_Config>
 8004d80:	4606      	mov	r6, r0
      break;
 8004d82:	e7a2      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x326>
      status |= ret;
 8004d84:	4335      	orrs	r5, r6
 8004d86:	b2ed      	uxtb	r5, r5
 8004d88:	e7a8      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8e:	d0bc      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 8004d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d94:	d0b9      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 8004d96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d9a:	d0b6      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = HAL_ERROR;
 8004d9c:	2601      	movs	r6, #1
 8004d9e:	e7b4      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004da0:	4a39      	ldr	r2, [pc, #228]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004da4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004da8:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004daa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004dae:	f7ff fd99 	bl	80048e4 <RCCEx_PLL3_Config>
 8004db2:	4606      	mov	r6, r0
      break;
 8004db4:	e7a9      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x366>
      status |= ret;
 8004db6:	4335      	orrs	r5, r6
 8004db8:	b2ed      	uxtb	r5, r5
 8004dba:	e7b0      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8004dbc:	4a32      	ldr	r2, [pc, #200]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dbe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004dc6:	b9de      	cbnz	r6, 8004e00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dc8:	4a2f      	ldr	r2, [pc, #188]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004dcc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004dd0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC)
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004ddc:	d021      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    switch(PeriphClkInit->FmcClockSelection)
 8004dde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d84c      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004de4:	e8df f003 	tbb	[pc, r3]
 8004de8:	14410f14 	.word	0x14410f14
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004df6:	1d20      	adds	r0, r4, #4
 8004df8:	f7ff fd14 	bl	8004824 <RCCEx_PLL2_Config>
 8004dfc:	4606      	mov	r6, r0
      break;
 8004dfe:	e7e2      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      status |= ret;
 8004e00:	4335      	orrs	r5, r6
 8004e02:	b2ed      	uxtb	r5, r5
 8004e04:	e7e7      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e06:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004e10:	2e00      	cmp	r6, #0
 8004e12:	d136      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e14:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004e28:	d130      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16)
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	f013 0f01 	tst.w	r3, #1
 8004e30:	f000 80a3 	beq.w	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e34:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004e36:	2b28      	cmp	r3, #40	; 0x28
 8004e38:	f200 80b6 	bhi.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e3c:	e8df f003 	tbb	[pc, r3]
 8004e40:	b4b4b495 	.word	0xb4b4b495
 8004e44:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e48:	b4b4b48c 	.word	0xb4b4b48c
 8004e4c:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e50:	b4b4b4a9 	.word	0xb4b4b4a9
 8004e54:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e58:	b4b4b495 	.word	0xb4b4b495
 8004e5c:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e60:	b4b4b495 	.word	0xb4b4b495
 8004e64:	b4b4b4b4 	.word	0xb4b4b4b4
 8004e68:	95          	.byte	0x95
 8004e69:	00          	.byte	0x00
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e6a:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e72:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e74:	1d20      	adds	r0, r4, #4
 8004e76:	f7ff fcd5 	bl	8004824 <RCCEx_PLL2_Config>
 8004e7a:	4606      	mov	r6, r0
      break;
 8004e7c:	e7c8      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      ret = HAL_ERROR;
 8004e7e:	2601      	movs	r6, #1
 8004e80:	e7c6      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status |= ret;
 8004e82:	4335      	orrs	r5, r6
 8004e84:	b2ed      	uxtb	r5, r5
 8004e86:	e7cc      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004e88:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e8c:	4a62      	ldr	r2, [pc, #392]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004e96:	f7fd fd6b 	bl	8002970 <HAL_GetTick>
 8004e9a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e9c:	4b5e      	ldr	r3, [pc, #376]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fd fd63 	bl	8002970 <HAL_GetTick>
 8004eaa:	1bc0      	subs	r0, r0, r7
 8004eac:	2864      	cmp	r0, #100	; 0x64
 8004eae:	d9f5      	bls.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = HAL_TIMEOUT;
 8004eb0:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8004eb2:	2e00      	cmp	r6, #0
 8004eb4:	d14d      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004eb6:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004ebe:	4053      	eors	r3, r2
 8004ec0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004ec4:	d00c      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec6:	4b55      	ldr	r3, [pc, #340]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004ec8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ece:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004ed0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004ed4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004ed8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004edc:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004ede:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ee0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee8:	d015      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
      if(ret == HAL_OK)
 8004eea:	bb7e      	cbnz	r6, 8004f4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eec:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004ef0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004ef4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004ef8:	d01e      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004efa:	4a48      	ldr	r2, [pc, #288]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004efc:	6913      	ldr	r3, [r2, #16]
 8004efe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f02:	6113      	str	r3, [r2, #16]
 8004f04:	4945      	ldr	r1, [pc, #276]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f06:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004f08:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004f0c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004f10:	4313      	orrs	r3, r2
 8004f12:	670b      	str	r3, [r1, #112]	; 0x70
 8004f14:	e789      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x486>
        tickstart = HAL_GetTick();
 8004f16:	f7fd fd2b 	bl	8002970 <HAL_GetTick>
 8004f1a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	4b3f      	ldr	r3, [pc, #252]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	f013 0f02 	tst.w	r3, #2
 8004f24:	d1e1      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x546>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fd fd23 	bl	8002970 <HAL_GetTick>
 8004f2a:	1bc0      	subs	r0, r0, r7
 8004f2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f30:	4298      	cmp	r0, r3
 8004f32:	d9f3      	bls.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x578>
            ret = HAL_TIMEOUT;
 8004f34:	2603      	movs	r6, #3
 8004f36:	e7d8      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x546>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f38:	4838      	ldr	r0, [pc, #224]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f3a:	6902      	ldr	r2, [r0, #16]
 8004f3c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004f40:	4937      	ldr	r1, [pc, #220]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8004f42:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8004f46:	4313      	orrs	r3, r2
 8004f48:	6103      	str	r3, [r0, #16]
 8004f4a:	e7db      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x560>
        status |= ret;
 8004f4c:	4335      	orrs	r5, r6
 8004f4e:	b2ed      	uxtb	r5, r5
 8004f50:	e76b      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x486>
      status |= ret;
 8004f52:	4335      	orrs	r5, r6
 8004f54:	b2ed      	uxtb	r5, r5
 8004f56:	e768      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x486>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f58:	4a30      	ldr	r2, [pc, #192]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f60:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004f62:	1d20      	adds	r0, r4, #4
 8004f64:	f7ff fc5e 	bl	8004824 <RCCEx_PLL2_Config>
 8004f68:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004f6a:	b9fe      	cbnz	r6, 8004fac <HAL_RCCEx_PeriphCLKConfig+0x608>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f6c:	4a2b      	ldr	r2, [pc, #172]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f6e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004f70:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004f74:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004f76:	430b      	orrs	r3, r1
 8004f78:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578)
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	f013 0f02 	tst.w	r3, #2
 8004f80:	d028      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004f82:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d841      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x668>
 8004f88:	e8df f003 	tbb	[pc, r3]
 8004f8c:	1c35131c 	.word	0x1c35131c
 8004f90:	1c1c      	.short	0x1c1c
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004f92:	4a22      	ldr	r2, [pc, #136]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004f94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004fa0:	f7ff fca0 	bl	80048e4 <RCCEx_PLL3_Config>
 8004fa4:	4606      	mov	r6, r0
      break;
 8004fa6:	e7e0      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = HAL_ERROR;
 8004fa8:	2601      	movs	r6, #1
 8004faa:	e7de      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      status |= ret;
 8004fac:	4335      	orrs	r5, r6
 8004fae:	b2ed      	uxtb	r5, r5
 8004fb0:	e7e3      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fb2:	4a1a      	ldr	r2, [pc, #104]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004fb4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fba:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004fbc:	1d20      	adds	r0, r4, #4
 8004fbe:	f7ff fc31 	bl	8004824 <RCCEx_PLL2_Config>
 8004fc2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004fc4:	bb26      	cbnz	r6, 8005010 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004fc8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	f013 0f04 	tst.w	r3, #4
 8004fda:	d037      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004fdc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	f200 80e0 	bhi.w	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8004fe6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004fea:	0026      	.short	0x0026
 8004fec:	00d3001d 	.word	0x00d3001d
 8004ff0:	00260026 	.word	0x00260026
 8004ff4:	0026      	.short	0x0026
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8004ff8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ffa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005000:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005004:	f7ff fc6e 	bl	80048e4 <RCCEx_PLL3_Config>
 8005008:	4606      	mov	r6, r0
      break;
 800500a:	e7db      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      ret = HAL_ERROR;
 800500c:	2601      	movs	r6, #1
 800500e:	e7d9      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      status |= ret;
 8005010:	4335      	orrs	r5, r6
 8005012:	b2ed      	uxtb	r5, r5
 8005014:	e7de      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8005016:	bf00      	nop
 8005018:	58024800 	.word	0x58024800
 800501c:	58024400 	.word	0x58024400
 8005020:	00ffffcf 	.word	0x00ffffcf
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005024:	4abb      	ldr	r2, [pc, #748]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005026:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800502c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800502e:	1d20      	adds	r0, r4, #4
 8005030:	f7ff fbf8 	bl	8004824 <RCCEx_PLL2_Config>
 8005034:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005036:	2e00      	cmp	r6, #0
 8005038:	f040 80b7 	bne.w	80051aa <HAL_RCCEx_PeriphCLKConfig+0x806>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800503c:	4ab5      	ldr	r2, [pc, #724]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800503e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005040:	f023 0307 	bic.w	r3, r3, #7
 8005044:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005048:	430b      	orrs	r3, r1
 800504a:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f013 0f20 	tst.w	r3, #32
 8005052:	d020      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005054:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505c:	f000 80b6 	beq.w	80051cc <HAL_RCCEx_PeriphCLKConfig+0x828>
 8005060:	f200 80a6 	bhi.w	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005064:	b163      	cbz	r3, 8005080 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8005066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506a:	f040 80ad 	bne.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800506e:	4aa9      	ldr	r2, [pc, #676]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005070:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005076:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8005078:	1d20      	adds	r0, r4, #4
 800507a:	f7ff fbd3 	bl	8004824 <RCCEx_PLL2_Config>
 800507e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005080:	2e00      	cmp	r6, #0
 8005082:	f040 80ae 	bne.w	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005086:	4aa3      	ldr	r2, [pc, #652]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005088:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800508a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800508e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005092:	430b      	orrs	r3, r1
 8005094:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	f013 0f40 	tst.w	r3, #64	; 0x40
 800509c:	d020      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800509e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80050a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a6:	f000 80ad 	beq.w	8005204 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80050aa:	f200 809d 	bhi.w	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80050ae:	b163      	cbz	r3, 80050ca <HAL_RCCEx_PeriphCLKConfig+0x726>
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	f040 80a4 	bne.w	8005200 <HAL_RCCEx_PeriphCLKConfig+0x85c>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050b8:	4a96      	ldr	r2, [pc, #600]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80050ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050c0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80050c2:	1d20      	adds	r0, r4, #4
 80050c4:	f7ff fbae 	bl	8004824 <RCCEx_PLL2_Config>
 80050c8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	f040 80a5 	bne.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050d0:	4a90      	ldr	r2, [pc, #576]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80050d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80050d8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80050dc:	430b      	orrs	r3, r1
 80050de:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345)
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050e6:	d020      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x786>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050e8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80050ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f0:	f000 80a4 	beq.w	800523c <HAL_RCCEx_PeriphCLKConfig+0x898>
 80050f4:	f200 8094 	bhi.w	8005220 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80050f8:	b163      	cbz	r3, 8005114 <HAL_RCCEx_PeriphCLKConfig+0x770>
 80050fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fe:	f040 809b 	bne.w	8005238 <HAL_RCCEx_PeriphCLKConfig+0x894>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005102:	4a84      	ldr	r2, [pc, #528]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005104:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800510c:	1d20      	adds	r0, r4, #4
 800510e:	f7ff fb89 	bl	8004824 <RCCEx_PLL2_Config>
 8005112:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005114:	2e00      	cmp	r6, #0
 8005116:	f040 809c 	bne.w	8005252 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800511a:	4a7e      	ldr	r2, [pc, #504]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800511c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800511e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005122:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005126:	430b      	orrs	r3, r1
 8005128:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123)
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f013 0f08 	tst.w	r3, #8
 8005130:	d00b      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005132:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	f000 808d 	beq.w	8005258 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800513e:	4975      	ldr	r1, [pc, #468]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005140:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005142:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005146:	4313      	orrs	r3, r2
 8005148:	654b      	str	r3, [r1, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	f013 0f10 	tst.w	r3, #16
 8005150:	d00b      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005152:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515a:	f000 8087 	beq.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800515e:	496d      	ldr	r1, [pc, #436]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005160:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005162:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005166:	4313      	orrs	r3, r2
 8005168:	658b      	str	r3, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005170:	f000 8098 	beq.w	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x900>
    switch(PeriphClkInit->AdcClockSelection)
 8005174:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	f000 80a3 	beq.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x922>
 8005180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005184:	f000 8085 	beq.w	8005292 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d079      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
      ret = HAL_ERROR;
 800518c:	2601      	movs	r6, #1
 800518e:	e080      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8005190:	4a60      	ldr	r2, [pc, #384]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005192:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005198:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800519a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800519e:	f7ff fba1 	bl	80048e4 <RCCEx_PLL3_Config>
 80051a2:	4606      	mov	r6, r0
      break;
 80051a4:	e747      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x692>
      ret = HAL_ERROR;
 80051a6:	2601      	movs	r6, #1
 80051a8:	e745      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x692>
      status |= ret;
 80051aa:	4335      	orrs	r5, r6
 80051ac:	b2ed      	uxtb	r5, r5
 80051ae:	e74d      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b4:	f43f af64 	beq.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80051b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051bc:	f43f af60 	beq.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80051c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051c4:	f43f af5c 	beq.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      ret = HAL_ERROR;
 80051c8:	2601      	movs	r6, #1
 80051ca:	e759      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80051cc:	4a51      	ldr	r2, [pc, #324]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80051ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051d4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80051d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051da:	f7ff fb83 	bl	80048e4 <RCCEx_PLL3_Config>
 80051de:	4606      	mov	r6, r0
      break;
 80051e0:	e74e      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      status |= ret;
 80051e2:	4335      	orrs	r5, r6
 80051e4:	b2ed      	uxtb	r5, r5
 80051e6:	e756      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80051e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ec:	f43f af6d 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x726>
 80051f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051f4:	f43f af69 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x726>
 80051f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051fc:	f43f af65 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x726>
      ret = HAL_ERROR;
 8005200:	2601      	movs	r6, #1
 8005202:	e762      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x726>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8005204:	4a43      	ldr	r2, [pc, #268]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005206:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800520e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005212:	f7ff fb67 	bl	80048e4 <RCCEx_PLL3_Config>
 8005216:	4606      	mov	r6, r0
      break;
 8005218:	e757      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x726>
      status |= ret;
 800521a:	4335      	orrs	r5, r6
 800521c:	b2ed      	uxtb	r5, r5
 800521e:	e75f      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005224:	f43f af76 	beq.w	8005114 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8005228:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800522c:	f43f af72 	beq.w	8005114 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8005230:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005234:	f43f af6e 	beq.w	8005114 <HAL_RCCEx_PeriphCLKConfig+0x770>
      ret = HAL_ERROR;
 8005238:	2601      	movs	r6, #1
 800523a:	e76b      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x770>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 800523c:	4a35      	ldr	r2, [pc, #212]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 800523e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005246:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800524a:	f7ff fb4b 	bl	80048e4 <RCCEx_PLL3_Config>
 800524e:	4606      	mov	r6, r0
      break;
 8005250:	e760      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x770>
      status |= ret;
 8005252:	4335      	orrs	r5, r6
 8005254:	b2ed      	uxtb	r5, r5
 8005256:	e768      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x786>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005258:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800525c:	f7ff fb42 	bl	80048e4 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005260:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005262:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005268:	62d3      	str	r3, [r2, #44]	; 0x2c
 800526a:	e76e      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800526c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005270:	f7ff fb38 	bl	80048e4 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005274:	4a27      	ldr	r2, [pc, #156]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005276:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005278:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800527c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800527e:	e774      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005280:	4a24      	ldr	r2, [pc, #144]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005282:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005288:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800528a:	1d20      	adds	r0, r4, #4
 800528c:	f7ff faca 	bl	8004824 <RCCEx_PLL2_Config>
 8005290:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005292:	bb1e      	cbnz	r6, 80052dc <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005294:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8005296:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005298:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800529c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80052aa:	d028      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x95a>
    switch(PeriphClkInit->UsbClockSelection)
 80052ac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80052b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052b4:	d030      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80052b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052ba:	d017      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x948>
 80052bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c0:	d00f      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      ret = HAL_ERROR;
 80052c2:	2601      	movs	r6, #1
 80052c4:	e012      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80052c6:	4a13      	ldr	r2, [pc, #76]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80052c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ce:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80052d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052d4:	f7ff fb06 	bl	80048e4 <RCCEx_PLL3_Config>
 80052d8:	4606      	mov	r6, r0
      break;
 80052da:	e7da      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      status |= ret;
 80052dc:	4335      	orrs	r5, r6
 80052de:	b2ed      	uxtb	r5, r5
 80052e0:	e7e0      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x900>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e2:	4a0c      	ldr	r2, [pc, #48]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80052e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ea:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80052ec:	b9fe      	cbnz	r6, 800532e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 80052f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80052f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80052f6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC)
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005304:	d023      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    switch(PeriphClkInit->SdmmcClockSelection)
 8005306:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005308:	b1a3      	cbz	r3, 8005334 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d032      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = HAL_ERROR;
 8005310:	2601      	movs	r6, #1
 8005312:	e014      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8005314:	58024400 	.word	0x58024400
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005318:	4a4d      	ldr	r2, [pc, #308]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 800531a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800531c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005320:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005322:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005326:	f7ff fadd 	bl	80048e4 <RCCEx_PLL3_Config>
 800532a:	4606      	mov	r6, r0
      break;
 800532c:	e7de      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x948>
      status |= ret;
 800532e:	4335      	orrs	r5, r6
 8005330:	b2ed      	uxtb	r5, r5
 8005332:	e7e4      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8005334:	4a46      	ldr	r2, [pc, #280]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005336:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800533e:	bb26      	cbnz	r6, 800538a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005340:	4a43      	ldr	r2, [pc, #268]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005342:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005348:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800534a:	430b      	orrs	r3, r1
 800534c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005354:	d11c      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800535c:	d035      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa26>
    switch(PeriphClkInit->RngClockSelection)
 800535e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005364:	d023      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005366:	d91f      	bls.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d024      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
 800536e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005372:	d11a      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005374:	e020      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005376:	4a36      	ldr	r2, [pc, #216]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005378:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800537a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8005380:	1d20      	adds	r0, r4, #4
 8005382:	f7ff fa4f 	bl	8004824 <RCCEx_PLL2_Config>
 8005386:	4606      	mov	r6, r0
      break;
 8005388:	e7d9      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x99a>
      status |= ret;
 800538a:	4335      	orrs	r5, r6
 800538c:	b2ed      	uxtb	r5, r5
 800538e:	e7de      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8005390:	4a2f      	ldr	r2, [pc, #188]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005392:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005394:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005398:	62d3      	str	r3, [r2, #44]	; 0x2c
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800539a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800539e:	f7ff faa1 	bl	80048e4 <RCCEx_PLL3_Config>
 80053a2:	4305      	orrs	r5, r0
 80053a4:	b2ed      	uxtb	r5, r5
 80053a6:	e7d6      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
    switch(PeriphClkInit->RngClockSelection)
 80053a8:	b133      	cbz	r3, 80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      ret = HAL_ERROR;
 80053aa:	2601      	movs	r6, #1
 80053ac:	e004      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ae:	4a28      	ldr	r2, [pc, #160]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80053b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80053b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80053b8:	2e00      	cmp	r6, #0
 80053ba:	d13d      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xa94>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053bc:	4a24      	ldr	r2, [pc, #144]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80053be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80053c6:	430b      	orrs	r3, r1
 80053c8:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80053d0:	d006      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053d2:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80053d4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80053d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053da:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80053dc:	430b      	orrs	r3, r1
 80053de:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1)
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80053e6:	d007      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053e8:	4a19      	ldr	r2, [pc, #100]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 80053ea:	6913      	ldr	r3, [r2, #16]
 80053ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80053f4:	430b      	orrs	r3, r1
 80053f6:	6113      	str	r3, [r2, #16]
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80053fe:	d006      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005400:	4a13      	ldr	r2, [pc, #76]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005402:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005408:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800540a:	430b      	orrs	r3, r1
 800540c:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_TIM))
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005414:	d009      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xa86>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005416:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800541e:	611a      	str	r2, [r3, #16]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8005426:	430a      	orrs	r2, r1
 8005428:	611a      	str	r2, [r3, #16]
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_CKPER))
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	db06      	blt.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
  if (status == HAL_OK)
 8005430:	b105      	cbz	r5, 8005434 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  return HAL_ERROR;
 8005432:	2501      	movs	r5, #1
}
 8005434:	4628      	mov	r0, r5
 8005436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      status |= ret;
 8005438:	4335      	orrs	r5, r6
 800543a:	b2ed      	uxtb	r5, r5
 800543c:	e7c5      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa26>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800543e:	4a04      	ldr	r2, [pc, #16]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xaac>)
 8005440:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005442:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005446:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005448:	430b      	orrs	r3, r1
 800544a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800544c:	e7f0      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 800544e:	bf00      	nop
 8005450:	58024400 	.word	0x58024400

08005454 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005454:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8005456:	f7ff f975 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005462:	2210      	movs	r2, #16
 8005464:	fa92 f2a2 	rbit	r2, r2
 8005468:	fab2 f282 	clz	r2, r2
 800546c:	40d3      	lsrs	r3, r2
 800546e:	4a03      	ldr	r2, [pc, #12]	; (800547c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005470:	5cd3      	ldrb	r3, [r2, r3]
}
 8005472:	40d8      	lsrs	r0, r3
 8005474:	bd08      	pop	{r3, pc}
 8005476:	bf00      	nop
 8005478:	58024400 	.word	0x58024400
 800547c:	0800841c 	.word	0x0800841c

08005480 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8005480:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005482:	4c6c      	ldr	r4, [pc, #432]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8005484:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005486:	f007 0703 	and.w	r7, r7, #3
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800548a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800548c:	f3c1 3e05 	ubfx	lr, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8005490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005492:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005496:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8005498:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 800549c:	fb06 f603 	mul.w	r6, r6, r3
 80054a0:	ee07 6a90 	vmov	s15, r6
 80054a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  switch (pllsource)
 80054a8:	2f01      	cmp	r7, #1
 80054aa:	d060      	beq.n	800556e <HAL_RCCEx_GetPLL2ClockFreq+0xee>
 80054ac:	b1f7      	cbz	r7, 80054ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054ae:	2f02      	cmp	r7, #2
 80054b0:	f000 80a4 	beq.w	80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x17c>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80054b4:	4b60      	ldr	r3, [pc, #384]	; (8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x1b8>)
 80054b6:	fbb3 f3fe 	udiv	r3, r3, lr
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	4b5c      	ldr	r3, [pc, #368]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ca:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800563c <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 80054ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054d2:	ee06 3a90 	vmov	s13, r3
 80054d6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80054da:	ee36 7a87 	vadd.f32	s14, s13, s14
 80054de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80054e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 80054ea:	e05b      	b.n	80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054ec:	4b51      	ldr	r3, [pc, #324]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f013 0f20 	tst.w	r3, #32
 80054f4:	d01f      	beq.n	8005536 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054f6:	4a4f      	ldr	r2, [pc, #316]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 80054f8:	6813      	ldr	r3, [r2, #0]
 80054fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054fe:	4d50      	ldr	r5, [pc, #320]	; (8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1c0>)
 8005500:	40dd      	lsrs	r5, r3
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8005502:	fbb5 f3fe 	udiv	r3, r5, lr
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005514:	eddf 6a49 	vldr	s13, [pc, #292]	; 800563c <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8005518:	ee27 7a26 	vmul.f32	s14, s14, s13
 800551c:	ee06 3a90 	vmov	s13, r3
 8005520:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005524:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800552c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005534:	e036      	b.n	80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8005536:	4c42      	ldr	r4, [pc, #264]	; (8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1c0>)
 8005538:	fbb4 f3fe 	udiv	r3, r4, lr
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005544:	4b3b      	ldr	r3, [pc, #236]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800563c <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8005550:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005554:	ee06 3a90 	vmov	s13, r3
 8005558:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800555c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005564:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800556c:	e01a      	b.n	80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800556e:	4932      	ldr	r1, [pc, #200]	; (8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x1b8>)
 8005570:	fbb1 f3fe 	udiv	r3, r1, lr
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557c:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800563c <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8005588:	ee27 7a26 	vmul.f32	s14, s14, s13
 800558c:	ee06 3a90 	vmov	s13, r3
 8005590:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005594:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80055a0:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 80055a4:	4a23      	ldr	r2, [pc, #140]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 80055a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80055a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80055ac:	3301      	adds	r3, #1
 80055ae:	ee07 3a10 	vmov	s14, r3
 80055b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80055be:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 80055c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80055c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80055c8:	3301      	adds	r3, #1
 80055ca:	ee07 3a10 	vmov	s14, r3
 80055ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055d6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80055da:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 80055de:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80055e0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80055e4:	3301      	adds	r3, #1
 80055e6:	ee07 3a10 	vmov	s14, r3
 80055ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055f2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80055f6:	edc0 6a02 	vstr	s13, [r0, #8]
 80055fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80055fc:	4a11      	ldr	r2, [pc, #68]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1c4>)
 80055fe:	fbb2 f3fe 	udiv	r3, r2, lr
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005612:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800563c <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8005616:	ee27 7a26 	vmul.f32	s14, s14, s13
 800561a:	ee06 3a90 	vmov	s13, r3
 800561e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005622:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800562a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800562e:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 8005632:	e7b7      	b.n	80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005634:	58024400 	.word	0x58024400
 8005638:	003d0900 	.word	0x003d0900
 800563c:	39000000 	.word	0x39000000
 8005640:	03d09000 	.word	0x03d09000
 8005644:	007a1200 	.word	0x007a1200

08005648 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8005648:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800564a:	4c6c      	ldr	r4, [pc, #432]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 800564c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800564e:	f007 0703 	and.w	r7, r7, #3
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005652:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005654:	f3c1 5e05 	ubfx	lr, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005658:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800565e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8005660:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 8005664:	fb06 f603 	mul.w	r6, r6, r3
 8005668:	ee07 6a90 	vmov	s15, r6
 800566c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  switch (pllsource)
 8005670:	2f01      	cmp	r7, #1
 8005672:	d060      	beq.n	8005736 <HAL_RCCEx_GetPLL3ClockFreq+0xee>
 8005674:	b1f7      	cbz	r7, 80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005676:	2f02      	cmp	r7, #2
 8005678:	f000 80a4 	beq.w	80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x17c>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800567c:	4b60      	ldr	r3, [pc, #384]	; (8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x1b8>)
 800567e:	fbb3 f3fe 	udiv	r3, r3, lr
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	4b5c      	ldr	r3, [pc, #368]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005692:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 8005696:	ee27 7a26 	vmul.f32	s14, s14, s13
 800569a:	ee06 3a90 	vmov	s13, r3
 800569e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80056a2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80056a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056aa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80056ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 80056b2:	e05b      	b.n	800576c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b4:	4b51      	ldr	r3, [pc, #324]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f013 0f20 	tst.w	r3, #32
 80056bc:	d01f      	beq.n	80056fe <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056be:	4a4f      	ldr	r2, [pc, #316]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80056c0:	6813      	ldr	r3, [r2, #0]
 80056c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80056c6:	4d50      	ldr	r5, [pc, #320]	; (8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x1c0>)
 80056c8:	40dd      	lsrs	r5, r3
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80056ca:	fbb5 f3fe 	udiv	r3, r5, lr
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056dc:	eddf 6a49 	vldr	s13, [pc, #292]	; 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 80056e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80056e4:	ee06 3a90 	vmov	s13, r3
 80056e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80056ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 80056f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80056f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056fc:	e036      	b.n	800576c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80056fe:	4c42      	ldr	r4, [pc, #264]	; (8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x1c0>)
 8005700:	fbb4 f3fe 	udiv	r3, r4, lr
 8005704:	ee07 3a90 	vmov	s15, r3
 8005708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570c:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005714:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 8005718:	ee27 7a26 	vmul.f32	s14, s14, s13
 800571c:	ee06 3a90 	vmov	s13, r3
 8005720:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005724:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005734:	e01a      	b.n	800576c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005736:	4932      	ldr	r1, [pc, #200]	; (8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x1b8>)
 8005738:	fbb1 f3fe 	udiv	r3, r1, lr
 800573c:	ee07 3a90 	vmov	s15, r3
 8005740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005744:	4b2d      	ldr	r3, [pc, #180]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 8005750:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005754:	ee06 3a90 	vmov	s13, r3
 8005758:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800575c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005764:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005768:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 800576e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005770:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005774:	3301      	adds	r3, #1
 8005776:	ee07 3a10 	vmov	s14, r3
 800577a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800577e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005782:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005786:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 800578a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800578c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005790:	3301      	adds	r3, #1
 8005792:	ee07 3a10 	vmov	s14, r3
 8005796:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800579a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800579e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80057a2:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 80057a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80057a8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80057ac:	3301      	adds	r3, #1
 80057ae:	ee07 3a10 	vmov	s14, r3
 80057b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80057b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80057be:	edc0 6a02 	vstr	s13, [r0, #8]
 80057c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80057c4:	4a11      	ldr	r2, [pc, #68]	; (800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1c4>)
 80057c6:	fbb2 f3fe 	udiv	r3, r2, lr
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057da:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 80057de:	ee27 7a26 	vmul.f32	s14, s14, s13
 80057e2:	ee06 3a90 	vmov	s13, r3
 80057e6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80057ea:	ee36 7a87 	vadd.f32	s14, s13, s14
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80057f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 80057fa:	e7b7      	b.n	800576c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80057fc:	58024400 	.word	0x58024400
 8005800:	003d0900 	.word	0x003d0900
 8005804:	39000000 	.word	0x39000000
 8005808:	03d09000 	.word	0x03d09000
 800580c:	007a1200 	.word	0x007a1200

08005810 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8005810:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8005812:	f7fe fdb9 	bl	8004388 <HAL_RCC_GetSysClockFreq>
 8005816:	4b08      	ldr	r3, [pc, #32]	; (8005838 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800581e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005822:	fa92 f2a2 	rbit	r2, r2
 8005826:	fab2 f282 	clz	r2, r2
 800582a:	40d3      	lsrs	r3, r2
 800582c:	4a03      	ldr	r2, [pc, #12]	; (800583c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800582e:	5cd3      	ldrb	r3, [r2, r3]
 8005830:	40d8      	lsrs	r0, r3
 8005832:	4b03      	ldr	r3, [pc, #12]	; (8005840 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005834:	6018      	str	r0, [r3, #0]
}
 8005836:	bd08      	pop	{r3, pc}
 8005838:	58024400 	.word	0x58024400
 800583c:	0800841c 	.word	0x0800841c
 8005840:	20000090 	.word	0x20000090

08005844 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 8005844:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005846:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;
 8005848:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 800584a:	3008      	adds	r0, #8
 800584c:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800584e:	fb03 0000 	mla	r0, r3, r0, r0
 8005852:	4770      	bx	lr

08005854 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005854:	2800      	cmp	r0, #0
 8005856:	f000 8099 	beq.w	800598c <HAL_SPI_Init+0x138>
{
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800585e:	2300      	movs	r3, #0
 8005860:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005862:	6805      	ldr	r5, [r0, #0]
 8005864:	4b4c      	ldr	r3, [pc, #304]	; (8005998 <HAL_SPI_Init+0x144>)
 8005866:	4e4d      	ldr	r6, [pc, #308]	; (800599c <HAL_SPI_Init+0x148>)
 8005868:	429d      	cmp	r5, r3
 800586a:	bf18      	it	ne
 800586c:	42b5      	cmpne	r5, r6
 800586e:	bf14      	ite	ne
 8005870:	2601      	movne	r6, #1
 8005872:	2600      	moveq	r6, #0
 8005874:	d007      	beq.n	8005886 <HAL_SPI_Init+0x32>
 8005876:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800587a:	429d      	cmp	r5, r3
 800587c:	d003      	beq.n	8005886 <HAL_SPI_Init+0x32>
 800587e:	68c3      	ldr	r3, [r0, #12]
 8005880:	2b0f      	cmp	r3, #15
 8005882:	f200 8085 	bhi.w	8005990 <HAL_SPI_Init+0x13c>
  packet_length = SPI_GetPacketSize(hspi);
 8005886:	4620      	mov	r0, r4
 8005888:	f7ff ffdc 	bl	8005844 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 800588c:	b126      	cbz	r6, 8005898 <HAL_SPI_Init+0x44>
 800588e:	4b44      	ldr	r3, [pc, #272]	; (80059a0 <HAL_SPI_Init+0x14c>)
 8005890:	429d      	cmp	r5, r3
 8005892:	d001      	beq.n	8005898 <HAL_SPI_Init+0x44>
 8005894:	2808      	cmp	r0, #8
 8005896:	d87d      	bhi.n	8005994 <HAL_SPI_Init+0x140>
 8005898:	4b40      	ldr	r3, [pc, #256]	; (800599c <HAL_SPI_Init+0x148>)
 800589a:	4a3f      	ldr	r2, [pc, #252]	; (8005998 <HAL_SPI_Init+0x144>)
 800589c:	429d      	cmp	r5, r3
 800589e:	bf18      	it	ne
 80058a0:	4295      	cmpne	r5, r2
 80058a2:	d05c      	beq.n	800595e <HAL_SPI_Init+0x10a>
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 80058a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a8:	429d      	cmp	r5, r3
 80058aa:	d058      	beq.n	800595e <HAL_SPI_Init+0x10a>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ac:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d058      	beq.n	8005966 <HAL_SPI_Init+0x112>
  hspi->State = HAL_SPI_STATE_BUSY;
 80058b4:	2302      	movs	r3, #2
 80058b6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	6813      	ldr	r3, [r2, #0]
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80058c4:	69a3      	ldr	r3, [r4, #24]
 80058c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ca:	d052      	beq.n	8005972 <HAL_SPI_Init+0x11e>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80058cc:	6822      	ldr	r2, [r4, #0]
 80058ce:	69e3      	ldr	r3, [r4, #28]
 80058d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80058d2:	430b      	orrs	r3, r1
 80058d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80058d6:	430b      	orrs	r3, r1
 80058d8:	68e1      	ldr	r1, [r4, #12]
 80058da:	430b      	orrs	r3, r1
 80058dc:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80058e8:	430b      	orrs	r3, r1
 80058ea:	69a1      	ldr	r1, [r4, #24]
 80058ec:	430b      	orrs	r3, r1
 80058ee:	6921      	ldr	r1, [r4, #16]
 80058f0:	430b      	orrs	r3, r1
 80058f2:	6961      	ldr	r1, [r4, #20]
 80058f4:	430b      	orrs	r3, r1
 80058f6:	6a21      	ldr	r1, [r4, #32]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6861      	ldr	r1, [r4, #4]
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005900:	430b      	orrs	r3, r1
 8005902:	68a1      	ldr	r1, [r4, #8]
 8005904:	430b      	orrs	r3, r1
 8005906:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005908:	430b      	orrs	r3, r1
 800590a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800590c:	430b      	orrs	r3, r1
 800590e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005910:	6863      	ldr	r3, [r4, #4]
 8005912:	b96b      	cbnz	r3, 8005930 <HAL_SPI_Init+0xdc>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	6893      	ldr	r3, [r2, #8]
 8005918:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800591c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005920:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	6893      	ldr	r3, [r2, #8]
 8005926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800592a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800592e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800593a:	6863      	ldr	r3, [r4, #4]
 800593c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005940:	d006      	beq.n	8005950 <HAL_SPI_Init+0xfc>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	68d3      	ldr	r3, [r2, #12]
 8005946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800594a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800594c:	430b      	orrs	r3, r1
 800594e:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005950:	2000      	movs	r0, #0
 8005952:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005956:	2301      	movs	r3, #1
 8005958:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800595c:	bd70      	pop	{r4, r5, r6, pc}
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800595e:	2810      	cmp	r0, #16
 8005960:	d9a4      	bls.n	80058ac <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 8005962:	2001      	movs	r0, #1
}
 8005964:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005966:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800596a:	4620      	mov	r0, r4
 800596c:	f7fc f928 	bl	8001bc0 <HAL_SPI_MspInit>
 8005970:	e7a0      	b.n	80058b4 <HAL_SPI_Init+0x60>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005972:	6863      	ldr	r3, [r4, #4]
 8005974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005978:	d1a8      	bne.n	80058cc <HAL_SPI_Init+0x78>
 800597a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1a5      	bne.n	80058cc <HAL_SPI_Init+0x78>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e79f      	b.n	80058cc <HAL_SPI_Init+0x78>
    return HAL_ERROR;
 800598c:	2001      	movs	r0, #1
 800598e:	4770      	bx	lr
    return HAL_ERROR;
 8005990:	2001      	movs	r0, #1
 8005992:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005994:	2001      	movs	r0, #1
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	40013000 	.word	0x40013000
 800599c:	40003800 	.word	0x40003800
 80059a0:	40003c00 	.word	0x40003c00

080059a4 <HAL_TIM_Base_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059a6:	6802      	ldr	r2, [r0, #0]
 80059a8:	68d3      	ldr	r3, [r2, #12]
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	60d3      	str	r3, [r2, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059b0:	6802      	ldr	r2, [r0, #0]
 80059b2:	8813      	ldrh	r3, [r2, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	8013      	strh	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80059bc:	2000      	movs	r0, #0
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIM_IRQHandler>:
{
 80059c8:	b510      	push	{r4, lr}
 80059ca:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059cc:	6803      	ldr	r3, [r0, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	f012 0f02 	tst.w	r2, #2
 80059d4:	d011      	beq.n	80059fa <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	f012 0f02 	tst.w	r2, #2
 80059dc:	d00d      	beq.n	80059fa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059de:	f06f 0202 	mvn.w	r2, #2
 80059e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e4:	2301      	movs	r3, #1
 80059e6:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80059e8:	6803      	ldr	r3, [r0, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f013 0f03 	tst.w	r3, #3
 80059f0:	d079      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80059f2:	f7ff ffe6 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	2300      	movs	r3, #0
 80059f8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	f012 0f04 	tst.w	r2, #4
 8005a02:	d012      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	f012 0f04 	tst.w	r2, #4
 8005a0a:	d00e      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a0c:	f06f 0204 	mvn.w	r2, #4
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a12:	2302      	movs	r3, #2
 8005a14:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a1e:	d068      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a20:	4620      	mov	r0, r4
 8005a22:	f7ff ffce 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	2300      	movs	r3, #0
 8005a28:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	f012 0f08 	tst.w	r2, #8
 8005a32:	d012      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	f012 0f08 	tst.w	r2, #8
 8005a3a:	d00e      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a3c:	f06f 0208 	mvn.w	r2, #8
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a42:	2304      	movs	r3, #4
 8005a44:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f013 0f03 	tst.w	r3, #3
 8005a4e:	d057      	beq.n	8005b00 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a50:	4620      	mov	r0, r4
 8005a52:	f7ff ffb6 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	2300      	movs	r3, #0
 8005a58:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	f012 0f10 	tst.w	r2, #16
 8005a62:	d012      	beq.n	8005a8a <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	f012 0f10 	tst.w	r2, #16
 8005a6a:	d00e      	beq.n	8005a8a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a6c:	f06f 0210 	mvn.w	r2, #16
 8005a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a72:	2308      	movs	r3, #8
 8005a74:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a7e:	d046      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7ff ff9e 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	2300      	movs	r3, #0
 8005a88:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	f012 0f01 	tst.w	r2, #1
 8005a92:	d003      	beq.n	8005a9c <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	f012 0f01 	tst.w	r2, #1
 8005a9a:	d13f      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005aac:	d13d      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005ab6:	d003      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005abe:	d13b      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ad0:	d139      	bne.n	8005b46 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	f012 0f20 	tst.w	r2, #32
 8005ada:	d003      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	f012 0f20 	tst.w	r2, #32
 8005ae2:	d137      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x18c>
 8005ae4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	f7ff ff6b 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aea:	4620      	mov	r0, r4
 8005aec:	f7ff ff6a 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005af0:	e781      	b.n	80059f6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7ff ff64 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7ff ff63 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005afe:	e792      	b.n	8005a26 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7ff ff5d 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8005b06:	4620      	mov	r0, r4
 8005b08:	f7ff ff5c 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005b0c:	e7a3      	b.n	8005a56 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff ff56 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	4620      	mov	r0, r4
 8005b16:	f7ff ff55 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005b1a:	e7b4      	b.n	8005a86 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b1c:	f06f 0201 	mvn.w	r2, #1
 8005b20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b22:	4620      	mov	r0, r4
 8005b24:	f7fb ff08 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
 8005b28:	e7b8      	b.n	8005a9c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 f8b3 	bl	8005c9c <HAL_TIMEx_BreakCallback>
 8005b36:	e7ba      	b.n	8005aae <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f8ac 	bl	8005c9c <HAL_TIMEx_BreakCallback>
 8005b44:	e7bc      	b.n	8005ac0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff ff3a 	bl	80059c6 <HAL_TIM_TriggerCallback>
 8005b52:	e7be      	b.n	8005ad2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b54:	f06f 0220 	mvn.w	r2, #32
 8005b58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f000 f89d 	bl	8005c9a <HAL_TIMEx_CommutationCallback>
}
 8005b60:	e7c0      	b.n	8005ae4 <HAL_TIM_IRQHandler+0x11c>
	...

08005b64 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b64:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8005b66:	8803      	ldrh	r3, [r0, #0]
 8005b68:	b29b      	uxth	r3, r3
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b6a:	4d38      	ldr	r5, [pc, #224]	; (8005c4c <TIM_Base_SetConfig+0xe8>)
 8005b6c:	42a8      	cmp	r0, r5
 8005b6e:	bf14      	ite	ne
 8005b70:	2500      	movne	r5, #0
 8005b72:	2501      	moveq	r5, #1
 8005b74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b78:	bf14      	ite	ne
 8005b7a:	462a      	movne	r2, r5
 8005b7c:	f045 0201 	orreq.w	r2, r5, #1
 8005b80:	b9aa      	cbnz	r2, 8005bae <TIM_Base_SetConfig+0x4a>
 8005b82:	4c33      	ldr	r4, [pc, #204]	; (8005c50 <TIM_Base_SetConfig+0xec>)
 8005b84:	42a0      	cmp	r0, r4
 8005b86:	bf14      	ite	ne
 8005b88:	2400      	movne	r4, #0
 8005b8a:	2401      	moveq	r4, #1
 8005b8c:	4e31      	ldr	r6, [pc, #196]	; (8005c54 <TIM_Base_SetConfig+0xf0>)
 8005b8e:	42b0      	cmp	r0, r6
 8005b90:	d00d      	beq.n	8005bae <TIM_Base_SetConfig+0x4a>
 8005b92:	b964      	cbnz	r4, 8005bae <TIM_Base_SetConfig+0x4a>
 8005b94:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005b98:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8005b9c:	42a0      	cmp	r0, r4
 8005b9e:	bf14      	ite	ne
 8005ba0:	2400      	movne	r4, #0
 8005ba2:	2401      	moveq	r4, #1
 8005ba4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005ba8:	42b0      	cmp	r0, r6
 8005baa:	d000      	beq.n	8005bae <TIM_Base_SetConfig+0x4a>
 8005bac:	b11c      	cbz	r4, 8005bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005bb2:	684c      	ldr	r4, [r1, #4]
 8005bb4:	4323      	orrs	r3, r4
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bb6:	bb12      	cbnz	r2, 8005bfe <TIM_Base_SetConfig+0x9a>
 8005bb8:	4a25      	ldr	r2, [pc, #148]	; (8005c50 <TIM_Base_SetConfig+0xec>)
 8005bba:	4290      	cmp	r0, r2
 8005bbc:	bf14      	ite	ne
 8005bbe:	2200      	movne	r2, #0
 8005bc0:	2201      	moveq	r2, #1
 8005bc2:	4c24      	ldr	r4, [pc, #144]	; (8005c54 <TIM_Base_SetConfig+0xf0>)
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d01a      	beq.n	8005bfe <TIM_Base_SetConfig+0x9a>
 8005bc8:	b9ca      	cbnz	r2, 8005bfe <TIM_Base_SetConfig+0x9a>
 8005bca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005bce:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005bd2:	4290      	cmp	r0, r2
 8005bd4:	bf14      	ite	ne
 8005bd6:	2200      	movne	r2, #0
 8005bd8:	2201      	moveq	r2, #1
 8005bda:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005bde:	42a0      	cmp	r0, r4
 8005be0:	d00d      	beq.n	8005bfe <TIM_Base_SetConfig+0x9a>
 8005be2:	b962      	cbnz	r2, 8005bfe <TIM_Base_SetConfig+0x9a>
 8005be4:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <TIM_Base_SetConfig+0xf4>)
 8005be6:	4290      	cmp	r0, r2
 8005be8:	bf14      	ite	ne
 8005bea:	2200      	movne	r2, #0
 8005bec:	2201      	moveq	r2, #1
 8005bee:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8005bf2:	42a0      	cmp	r0, r4
 8005bf4:	d003      	beq.n	8005bfe <TIM_Base_SetConfig+0x9a>
 8005bf6:	b912      	cbnz	r2, 8005bfe <TIM_Base_SetConfig+0x9a>
 8005bf8:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <TIM_Base_SetConfig+0xf8>)
 8005bfa:	4290      	cmp	r0, r2
 8005bfc:	d103      	bne.n	8005c06 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c02:	68cc      	ldr	r4, [r1, #12]
 8005c04:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c0a:	694a      	ldr	r2, [r1, #20]
 8005c0c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c12:	688a      	ldr	r2, [r1, #8]
 8005c14:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005c16:	880a      	ldrh	r2, [r1, #0]
 8005c18:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <TIM_Base_SetConfig+0xfc>)
 8005c1c:	4298      	cmp	r0, r3
 8005c1e:	bf14      	ite	ne
 8005c20:	462b      	movne	r3, r5
 8005c22:	f045 0301 	orreq.w	r3, r5, #1
 8005c26:	b95b      	cbnz	r3, 8005c40 <TIM_Base_SetConfig+0xdc>
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <TIM_Base_SetConfig+0xf4>)
 8005c2a:	4298      	cmp	r0, r3
 8005c2c:	bf14      	ite	ne
 8005c2e:	2300      	movne	r3, #0
 8005c30:	2301      	moveq	r3, #1
 8005c32:	4a0c      	ldr	r2, [pc, #48]	; (8005c64 <TIM_Base_SetConfig+0x100>)
 8005c34:	4290      	cmp	r0, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0xdc>
 8005c38:	b913      	cbnz	r3, 8005c40 <TIM_Base_SetConfig+0xdc>
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <TIM_Base_SetConfig+0xf8>)
 8005c3c:	4298      	cmp	r0, r3
 8005c3e:	d101      	bne.n	8005c44 <TIM_Base_SetConfig+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c40:	8a0b      	ldrh	r3, [r1, #16]
 8005c42:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005c44:	2301      	movs	r3, #1
 8005c46:	6143      	str	r3, [r0, #20]
}
 8005c48:	bc70      	pop	{r4, r5, r6}
 8005c4a:	4770      	bx	lr
 8005c4c:	40010000 	.word	0x40010000
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800
 8005c60:	40010400 	.word	0x40010400
 8005c64:	40014000 	.word	0x40014000

08005c68 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8005c68:	b1a8      	cbz	r0, 8005c96 <HAL_TIM_Base_Init+0x2e>
{ 
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c72:	b15b      	cbz	r3, 8005c8c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005c7a:	1d21      	adds	r1, r4, #4
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	f7ff ff71 	bl	8005b64 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005c88:	2000      	movs	r0, #0
 8005c8a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005c8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005c90:	f7ff fe88 	bl	80059a4 <HAL_TIM_Base_MspInit>
 8005c94:	e7ee      	b.n	8005c74 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005c96:	2001      	movs	r0, #1
 8005c98:	4770      	bx	lr

08005c9a <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	4770      	bx	lr

08005c9e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c9e:	6802      	ldr	r2, [r0, #0]
 8005ca0:	6813      	ldr	r3, [r2, #0]
 8005ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca6:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca8:	6802      	ldr	r2, [r0, #0]
 8005caa:	6893      	ldr	r3, [r2, #8]
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	2320      	movs	r3, #32
 8005cb4:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
 8005cb8:	4770      	bx	lr

08005cba <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cba:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b21      	cmp	r3, #33	; 0x21
 8005cc2:	d001      	beq.n	8005cc8 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2002      	movs	r0, #2
  }
}
 8005cc6:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8005cc8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	b9a3      	cbnz	r3, 8005cfa <UART_Transmit_IT+0x40>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8005cd0:	6803      	ldr	r3, [r0, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005cd8:	d00a      	beq.n	8005cf0 <UART_Transmit_IT+0x36>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005ce0:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ce2:	6802      	ldr	r2, [r0, #0]
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cea:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8005cec:	2000      	movs	r0, #0
 8005cee:	4770      	bx	lr
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e7f3      	b.n	8005ce2 <UART_Transmit_IT+0x28>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfa:	6883      	ldr	r3, [r0, #8]
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d00e      	beq.n	8005d20 <UART_Transmit_IT+0x66>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8005d02:	6802      	ldr	r2, [r0, #0]
 8005d04:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005d06:	1c59      	adds	r1, r3, #1
 8005d08:	65c1      	str	r1, [r0, #92]	; 0x5c
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005d0e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
      return HAL_OK;
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d20:	6903      	ldr	r3, [r0, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1ed      	bne.n	8005d02 <UART_Transmit_IT+0x48>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8005d26:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005d28:	6802      	ldr	r2, [r0, #0]
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005d32:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005d34:	3302      	adds	r3, #2
 8005d36:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005d38:	e7e9      	b.n	8005d0e <UART_Transmit_IT+0x54>

08005d3a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8005d3a:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8005d44:	2002      	movs	r0, #2
 8005d46:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8005d48:	2a00      	cmp	r2, #0
 8005d4a:	bf18      	it	ne
 8005d4c:	2900      	cmpne	r1, #0
 8005d4e:	d054      	beq.n	8005dfa <HAL_UART_Receive_IT+0xc0>
    __HAL_LOCK(huart);
 8005d50:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d052      	beq.n	8005dfe <HAL_UART_Receive_IT+0xc4>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    huart->pRxBuffPtr = pData;
 8005d5e:	6641      	str	r1, [r0, #100]	; 0x64
    huart->RxXferSize = Size;
 8005d60:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    huart->RxXferCount = Size;
 8005d64:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    UART_MASK_COMPUTATION(huart);
 8005d68:	6883      	ldr	r3, [r0, #8]
 8005d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6e:	d006      	beq.n	8005d7e <HAL_UART_Receive_IT+0x44>
 8005d70:	b9a3      	cbnz	r3, 8005d9c <HAL_UART_Receive_IT+0x62>
 8005d72:	6903      	ldr	r3, [r0, #16]
 8005d74:	b973      	cbnz	r3, 8005d94 <HAL_UART_Receive_IT+0x5a>
 8005d76:	23ff      	movs	r3, #255	; 0xff
 8005d78:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005d7c:	e011      	b.n	8005da2 <HAL_UART_Receive_IT+0x68>
 8005d7e:	6903      	ldr	r3, [r0, #16]
 8005d80:	b923      	cbnz	r3, 8005d8c <HAL_UART_Receive_IT+0x52>
 8005d82:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005d86:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005d8a:	e00a      	b.n	8005da2 <HAL_UART_Receive_IT+0x68>
 8005d8c:	23ff      	movs	r3, #255	; 0xff
 8005d8e:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005d92:	e006      	b.n	8005da2 <HAL_UART_Receive_IT+0x68>
 8005d94:	237f      	movs	r3, #127	; 0x7f
 8005d96:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005d9a:	e002      	b.n	8005da2 <HAL_UART_Receive_IT+0x68>
 8005d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005da0:	d016      	beq.n	8005dd0 <HAL_UART_Receive_IT+0x96>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005da6:	2222      	movs	r2, #34	; 0x22
 8005da8:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
    __HAL_UNLOCK(huart);
 8005dac:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db0:	6802      	ldr	r2, [r0, #0]
 8005db2:	6893      	ldr	r3, [r2, #8]
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6093      	str	r3, [r2, #8]
    if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8005dba:	6803      	ldr	r3, [r0, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005dc2:	d10f      	bne.n	8005de4 <HAL_UART_Receive_IT+0xaa>
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005dca:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8005dcc:	2000      	movs	r0, #0
 8005dce:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8005dd0:	6903      	ldr	r3, [r0, #16]
 8005dd2:	b91b      	cbnz	r3, 8005ddc <HAL_UART_Receive_IT+0xa2>
 8005dd4:	237f      	movs	r3, #127	; 0x7f
 8005dd6:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005dda:	e7e2      	b.n	8005da2 <HAL_UART_Receive_IT+0x68>
 8005ddc:	233f      	movs	r3, #63	; 0x3f
 8005dde:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005de2:	e7de      	b.n	8005da2 <HAL_UART_Receive_IT+0x68>
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dea:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dec:	6802      	ldr	r2, [r0, #0]
 8005dee:	6893      	ldr	r3, [r2, #8]
 8005df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8005df6:	2000      	movs	r0, #0
 8005df8:	4770      	bx	lr
      return HAL_ERROR;
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	4770      	bx	lr
    __HAL_LOCK(huart);
 8005dfe:	2002      	movs	r0, #2
}
 8005e00:	4770      	bx	lr

08005e02 <HAL_UART_TxCpltCallback>:
{
 8005e02:	4770      	bx	lr

08005e04 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e04:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e06:	6801      	ldr	r1, [r0, #0]
 8005e08:	680b      	ldr	r3, [r1, #0]
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0e:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e10:	2320      	movs	r3, #32
 8005e12:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79

  HAL_UART_TxCpltCallback(huart);
 8005e16:	f7ff fff4 	bl	8005e02 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	bd08      	pop	{r3, pc}

08005e1e <UART_Receive_IT>:
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8005e1e:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e22:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b22      	cmp	r3, #34	; 0x22
 8005e2a:	d007      	beq.n	8005e3c <UART_Receive_IT+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e2c:	6802      	ldr	r2, [r0, #0]
 8005e2e:	8b13      	ldrh	r3, [r2, #24]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f043 0308 	orr.w	r3, r3, #8
 8005e36:	8313      	strh	r3, [r2, #24]

    return HAL_BUSY;
 8005e38:	2002      	movs	r0, #2
 8005e3a:	4770      	bx	lr
{
 8005e3c:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e3e:	6803      	ldr	r3, [r0, #0]
 8005e40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e42:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	6881      	ldr	r1, [r0, #8]
 8005e46:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005e4a:	d00f      	beq.n	8005e6c <UART_Receive_IT+0x4e>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e4c:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005e4e:	1c4c      	adds	r4, r1, #1
 8005e50:	6644      	str	r4, [r0, #100]	; 0x64
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	401a      	ands	r2, r3
 8005e56:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8005e58:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 8005e66:	b15b      	cbz	r3, 8005e80 <UART_Receive_IT+0x62>
    return HAL_OK;
 8005e68:	2000      	movs	r0, #0
  }
}
 8005e6a:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e6c:	6901      	ldr	r1, [r0, #16]
 8005e6e:	2900      	cmp	r1, #0
 8005e70:	d1ec      	bne.n	8005e4c <UART_Receive_IT+0x2e>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8005e72:	6e41      	ldr	r1, [r0, #100]	; 0x64
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e74:	401a      	ands	r2, r3
 8005e76:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8005e78:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	6643      	str	r3, [r0, #100]	; 0x64
 8005e7e:	e7eb      	b.n	8005e58 <UART_Receive_IT+0x3a>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e80:	6802      	ldr	r2, [r0, #0]
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e88:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8a:	6802      	ldr	r2, [r0, #0]
 8005e8c:	6893      	ldr	r3, [r2, #8]
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005e94:	2320      	movs	r3, #32
 8005e96:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
      HAL_UART_RxCpltCallback(huart);
 8005e9a:	f7fc fa61 	bl	8002360 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	bd10      	pop	{r4, pc}
	...

08005ea4 <HAL_UART_IRQHandler>:
{
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ea8:	6802      	ldr	r2, [r0, #0]
 8005eaa:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eac:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eae:	6891      	ldr	r1, [r2, #8]
  if (errorflags == RESET)
 8005eb0:	f013 050f 	ands.w	r5, r3, #15
 8005eb4:	d108      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x24>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8005eb6:	f013 0f20 	tst.w	r3, #32
 8005eba:	d005      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x24>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ebc:	f010 0f20 	tst.w	r0, #32
 8005ec0:	d16c      	bne.n	8005f9c <HAL_UART_IRQHandler+0xf8>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8005ec2:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 8005ec6:	d169      	bne.n	8005f9c <HAL_UART_IRQHandler+0xf8>
  if(   (errorflags != RESET)
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	d079      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x11c>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8005ecc:	4d56      	ldr	r5, [pc, #344]	; (8006028 <HAL_UART_IRQHandler+0x184>)
 8005ece:	400d      	ands	r5, r1
 8005ed0:	d102      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x34>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ed2:	f410 7f90 	tst.w	r0, #288	; 0x120
 8005ed6:	d073      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x11c>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ed8:	f013 0f01 	tst.w	r3, #1
 8005edc:	d007      	beq.n	8005eee <HAL_UART_IRQHandler+0x4a>
 8005ede:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005ee2:	d004      	beq.n	8005eee <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8005ee4:	2601      	movs	r6, #1
 8005ee6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ee8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005eea:	4332      	orrs	r2, r6
 8005eec:	67e2      	str	r2, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eee:	f013 0f02 	tst.w	r3, #2
 8005ef2:	d009      	beq.n	8005f08 <HAL_UART_IRQHandler+0x64>
 8005ef4:	f011 0f01 	tst.w	r1, #1
 8005ef8:	d006      	beq.n	8005f08 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	2602      	movs	r6, #2
 8005efe:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f00:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005f02:	f042 0204 	orr.w	r2, r2, #4
 8005f06:	67e2      	str	r2, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f08:	f013 0f04 	tst.w	r3, #4
 8005f0c:	d009      	beq.n	8005f22 <HAL_UART_IRQHandler+0x7e>
 8005f0e:	f011 0f01 	tst.w	r1, #1
 8005f12:	d006      	beq.n	8005f22 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005f14:	6822      	ldr	r2, [r4, #0]
 8005f16:	2604      	movs	r6, #4
 8005f18:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f1a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005f1c:	f042 0202 	orr.w	r2, r2, #2
 8005f20:	67e2      	str	r2, [r4, #124]	; 0x7c
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8005f22:	f013 0f08 	tst.w	r3, #8
 8005f26:	d009      	beq.n	8005f3c <HAL_UART_IRQHandler+0x98>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8005f28:	f010 0f20 	tst.w	r0, #32
 8005f2c:	d100      	bne.n	8005f30 <HAL_UART_IRQHandler+0x8c>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8005f2e:	b12d      	cbz	r5, 8005f3c <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	2508      	movs	r5, #8
 8005f34:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f36:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005f38:	432a      	orrs	r2, r5
 8005f3a:	67e2      	str	r2, [r4, #124]	; 0x7c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f3c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005f3e:	2a00      	cmp	r2, #0
 8005f40:	d05d      	beq.n	8005ffe <HAL_UART_IRQHandler+0x15a>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8005f42:	f013 0f20 	tst.w	r3, #32
 8005f46:	d008      	beq.n	8005f5a <HAL_UART_IRQHandler+0xb6>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f48:	f010 0f20 	tst.w	r0, #32
 8005f4c:	d102      	bne.n	8005f54 <HAL_UART_IRQHandler+0xb0>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8005f4e:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 8005f52:	d002      	beq.n	8005f5a <HAL_UART_IRQHandler+0xb6>
        UART_Receive_IT(huart);
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff ff62 	bl	8005e1e <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005f5a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005f5c:	f013 0f08 	tst.w	r3, #8
 8005f60:	d104      	bne.n	8005f6c <HAL_UART_IRQHandler+0xc8>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005f66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f6a:	d023      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f7ff fe96 	bl	8005c9e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f7a:	d017      	beq.n	8005fac <HAL_UART_IRQHandler+0x108>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f82:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8005f84:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005f86:	b16b      	cbz	r3, 8005fa4 <HAL_UART_IRQHandler+0x100>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f88:	4a28      	ldr	r2, [pc, #160]	; (800602c <HAL_UART_IRQHandler+0x188>)
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f8c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005f8e:	f7fd fc3b 	bl	8003808 <HAL_DMA_Abort_IT>
 8005f92:	b3a0      	cbz	r0, 8005ffe <HAL_UART_IRQHandler+0x15a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f94:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005f96:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f98:	4798      	blx	r3
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
      UART_Receive_IT(huart);
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff ff3e 	bl	8005e1e <UART_Receive_IT>
      return;
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
            HAL_UART_ErrorCallback(huart);
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7fc f9d9 	bl	800235c <HAL_UART_ErrorCallback>
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
          HAL_UART_ErrorCallback(huart);
 8005fac:	4620      	mov	r0, r4
 8005fae:	f7fc f9d5 	bl	800235c <HAL_UART_ErrorCallback>
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7fc f9d1 	bl	800235c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	67e3      	str	r3, [r4, #124]	; 0x7c
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005fc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005fc4:	d002      	beq.n	8005fcc <HAL_UART_IRQHandler+0x128>
 8005fc6:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8005fca:	d119      	bne.n	8006000 <HAL_UART_IRQHandler+0x15c>
  if(((isrflags & USART_ISR_TXE) != RESET)
 8005fcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fd0:	d005      	beq.n	8005fde <HAL_UART_IRQHandler+0x13a>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 8005fd2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005fd6:	d11f      	bne.n	8006018 <HAL_UART_IRQHandler+0x174>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8005fd8:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8005fdc:	d11c      	bne.n	8006018 <HAL_UART_IRQHandler+0x174>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005fe2:	d002      	beq.n	8005fea <HAL_UART_IRQHandler+0x146>
 8005fe4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fe8:	d11a      	bne.n	8006020 <HAL_UART_IRQHandler+0x17c>
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8005fea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005fee:	d006      	beq.n	8005ffe <HAL_UART_IRQHandler+0x15a>
 8005ff0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ff4:	d003      	beq.n	8005ffe <HAL_UART_IRQHandler+0x15a>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8006000:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006004:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8006006:	2320      	movs	r3, #32
 8006008:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 800600c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    HAL_UARTEx_WakeupCallback(huart);
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fe04 	bl	8006c1e <HAL_UARTEx_WakeupCallback>
    return;
 8006016:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8006018:	4620      	mov	r0, r4
 800601a:	f7ff fe4e 	bl	8005cba <UART_Transmit_IT>
    return;
 800601e:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 8006020:	4620      	mov	r0, r4
 8006022:	f7ff feef 	bl	8005e04 <UART_EndTransmit_IT>
    return;
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	10000001 	.word	0x10000001
 800602c:	08006031 	.word	0x08006031

08006030 <UART_DMAAbortOnError>:
{
 8006030:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006032:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  huart->TxXferCount = 0U;
 800603a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  HAL_UART_ErrorCallback(huart);
 800603e:	f7fc f98d 	bl	800235c <HAL_UART_ErrorCallback>
 8006042:	bd08      	pop	{r3, pc}

08006044 <UART_SetConfig>:
{
 8006044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006048:	b087      	sub	sp, #28
 800604a:	4604      	mov	r4, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 800604c:	6801      	ldr	r1, [r0, #0]
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 800604e:	6a82      	ldr	r2, [r0, #40]	; 0x28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006050:	6883      	ldr	r3, [r0, #8]
 8006052:	6900      	ldr	r0, [r0, #16]
 8006054:	4303      	orrs	r3, r0
 8006056:	6960      	ldr	r0, [r4, #20]
 8006058:	4303      	orrs	r3, r0
 800605a:	69e0      	ldr	r0, [r4, #28]
 800605c:	4303      	orrs	r3, r0
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 800605e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006060:	6808      	ldr	r0, [r1, #0]
 8006062:	4a8f      	ldr	r2, [pc, #572]	; (80062a0 <UART_SetConfig+0x25c>)
 8006064:	4002      	ands	r2, r0
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	6853      	ldr	r3, [r2, #4]
 800606e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006072:	68e1      	ldr	r1, [r4, #12]
 8006074:	430b      	orrs	r3, r1
 8006076:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006078:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	4989      	ldr	r1, [pc, #548]	; (80062a4 <UART_SetConfig+0x260>)
 800607e:	428a      	cmp	r2, r1
 8006080:	d001      	beq.n	8006086 <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 8006082:	6a21      	ldr	r1, [r4, #32]
 8006084:	430b      	orrs	r3, r1
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8006086:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006088:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800608c:	d07f      	beq.n	800618e <UART_SetConfig+0x14a>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800608e:	6890      	ldr	r0, [r2, #8]
 8006090:	4985      	ldr	r1, [pc, #532]	; (80062a8 <UART_SetConfig+0x264>)
 8006092:	4001      	ands	r1, r0
 8006094:	430b      	orrs	r3, r1
 8006096:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800609c:	f023 030f 	bic.w	r3, r3, #15
 80060a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80060a2:	430b      	orrs	r3, r1
 80060a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a6:	6825      	ldr	r5, [r4, #0]
 80060a8:	4b80      	ldr	r3, [pc, #512]	; (80062ac <UART_SetConfig+0x268>)
 80060aa:	429d      	cmp	r5, r3
 80060ac:	d074      	beq.n	8006198 <UART_SetConfig+0x154>
 80060ae:	4b80      	ldr	r3, [pc, #512]	; (80062b0 <UART_SetConfig+0x26c>)
 80060b0:	429d      	cmp	r5, r3
 80060b2:	f000 80ae 	beq.w	8006212 <UART_SetConfig+0x1ce>
 80060b6:	4b7f      	ldr	r3, [pc, #508]	; (80062b4 <UART_SetConfig+0x270>)
 80060b8:	429d      	cmp	r5, r3
 80060ba:	f000 80c4 	beq.w	8006246 <UART_SetConfig+0x202>
 80060be:	4b7e      	ldr	r3, [pc, #504]	; (80062b8 <UART_SetConfig+0x274>)
 80060c0:	429d      	cmp	r5, r3
 80060c2:	f000 80d7 	beq.w	8006274 <UART_SetConfig+0x230>
 80060c6:	4b7d      	ldr	r3, [pc, #500]	; (80062bc <UART_SetConfig+0x278>)
 80060c8:	429d      	cmp	r5, r3
 80060ca:	f000 8103 	beq.w	80062d4 <UART_SetConfig+0x290>
 80060ce:	4b7c      	ldr	r3, [pc, #496]	; (80062c0 <UART_SetConfig+0x27c>)
 80060d0:	429d      	cmp	r5, r3
 80060d2:	f000 8116 	beq.w	8006302 <UART_SetConfig+0x2be>
 80060d6:	4b7b      	ldr	r3, [pc, #492]	; (80062c4 <UART_SetConfig+0x280>)
 80060d8:	429d      	cmp	r5, r3
 80060da:	f000 813b 	beq.w	8006354 <UART_SetConfig+0x310>
 80060de:	4b7a      	ldr	r3, [pc, #488]	; (80062c8 <UART_SetConfig+0x284>)
 80060e0:	429d      	cmp	r5, r3
 80060e2:	f000 814e 	beq.w	8006382 <UART_SetConfig+0x33e>
 80060e6:	4b6f      	ldr	r3, [pc, #444]	; (80062a4 <UART_SetConfig+0x260>)
 80060e8:	429d      	cmp	r5, r3
 80060ea:	f000 8161 	beq.w	80063b0 <UART_SetConfig+0x36c>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80060ee:	2680      	movs	r6, #128	; 0x80
  if(UART_INSTANCE_LOWPOWER(huart))
 80060f0:	4b6c      	ldr	r3, [pc, #432]	; (80062a4 <UART_SetConfig+0x260>)
 80060f2:	429d      	cmp	r5, r3
 80060f4:	f000 8186 	beq.w	8006404 <UART_SetConfig+0x3c0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f8:	69e3      	ldr	r3, [r4, #28]
 80060fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fe:	f000 82af 	beq.w	8006660 <UART_SetConfig+0x61c>
    switch (clocksource)
 8006102:	2e40      	cmp	r6, #64	; 0x40
 8006104:	f200 8417 	bhi.w	8006936 <UART_SetConfig+0x8f2>
 8006108:	e8df f016 	tbh	[pc, r6, lsl #1]
 800610c:	038b037a 	.word	0x038b037a
 8006110:	04150415 	.word	0x04150415
 8006114:	0415039c 	.word	0x0415039c
 8006118:	04150415 	.word	0x04150415
 800611c:	041503c4 	.word	0x041503c4
 8006120:	04150415 	.word	0x04150415
 8006124:	04150415 	.word	0x04150415
 8006128:	04150415 	.word	0x04150415
 800612c:	041503ee 	.word	0x041503ee
 8006130:	04150415 	.word	0x04150415
 8006134:	04150415 	.word	0x04150415
 8006138:	04150415 	.word	0x04150415
 800613c:	04150415 	.word	0x04150415
 8006140:	04150415 	.word	0x04150415
 8006144:	04150415 	.word	0x04150415
 8006148:	04150415 	.word	0x04150415
 800614c:	041503fe 	.word	0x041503fe
 8006150:	04150415 	.word	0x04150415
 8006154:	04150415 	.word	0x04150415
 8006158:	04150415 	.word	0x04150415
 800615c:	04150415 	.word	0x04150415
 8006160:	04150415 	.word	0x04150415
 8006164:	04150415 	.word	0x04150415
 8006168:	04150415 	.word	0x04150415
 800616c:	04150415 	.word	0x04150415
 8006170:	04150415 	.word	0x04150415
 8006174:	04150415 	.word	0x04150415
 8006178:	04150415 	.word	0x04150415
 800617c:	04150415 	.word	0x04150415
 8006180:	04150415 	.word	0x04150415
 8006184:	04150415 	.word	0x04150415
 8006188:	04150415 	.word	0x04150415
 800618c:	03b0      	.short	0x03b0
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 800618e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006190:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006192:	4301      	orrs	r1, r0
 8006194:	430b      	orrs	r3, r1
 8006196:	e77a      	b.n	800608e <UART_SetConfig+0x4a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006198:	4b4c      	ldr	r3, [pc, #304]	; (80062cc <UART_SetConfig+0x288>)
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061a0:	2b28      	cmp	r3, #40	; 0x28
 80061a2:	d82a      	bhi.n	80061fa <UART_SetConfig+0x1b6>
 80061a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80061a8:	0029011c 	.word	0x0029011c
 80061ac:	00290029 	.word	0x00290029
 80061b0:	00290029 	.word	0x00290029
 80061b4:	00290029 	.word	0x00290029
 80061b8:	0029002b 	.word	0x0029002b
 80061bc:	00290029 	.word	0x00290029
 80061c0:	00290029 	.word	0x00290029
 80061c4:	00290029 	.word	0x00290029
 80061c8:	0029002d 	.word	0x0029002d
 80061cc:	00290029 	.word	0x00290029
 80061d0:	00290029 	.word	0x00290029
 80061d4:	00290029 	.word	0x00290029
 80061d8:	0029002f 	.word	0x0029002f
 80061dc:	00290029 	.word	0x00290029
 80061e0:	00290029 	.word	0x00290029
 80061e4:	00290029 	.word	0x00290029
 80061e8:	00290031 	.word	0x00290031
 80061ec:	00290029 	.word	0x00290029
 80061f0:	00290029 	.word	0x00290029
 80061f4:	00290029 	.word	0x00290029
 80061f8:	0033      	.short	0x0033
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80061fa:	2680      	movs	r6, #128	; 0x80
 80061fc:	e778      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fe:	2604      	movs	r6, #4
 8006200:	e776      	b.n	80060f0 <UART_SetConfig+0xac>
 8006202:	2640      	movs	r6, #64	; 0x40
 8006204:	e774      	b.n	80060f0 <UART_SetConfig+0xac>
 8006206:	2608      	movs	r6, #8
 8006208:	e772      	b.n	80060f0 <UART_SetConfig+0xac>
 800620a:	2610      	movs	r6, #16
 800620c:	e770      	b.n	80060f0 <UART_SetConfig+0xac>
 800620e:	2620      	movs	r6, #32
 8006210:	e76e      	b.n	80060f0 <UART_SetConfig+0xac>
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <UART_SetConfig+0x288>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	2b05      	cmp	r3, #5
 800621c:	d807      	bhi.n	800622e <UART_SetConfig+0x1ea>
 800621e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006222:	00e1      	.short	0x00e1
 8006224:	000a0008 	.word	0x000a0008
 8006228:	000e000c 	.word	0x000e000c
 800622c:	0010      	.short	0x0010
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800622e:	2680      	movs	r6, #128	; 0x80
 8006230:	e75e      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006232:	2604      	movs	r6, #4
 8006234:	e75c      	b.n	80060f0 <UART_SetConfig+0xac>
 8006236:	2640      	movs	r6, #64	; 0x40
 8006238:	e75a      	b.n	80060f0 <UART_SetConfig+0xac>
 800623a:	2608      	movs	r6, #8
 800623c:	e758      	b.n	80060f0 <UART_SetConfig+0xac>
 800623e:	2610      	movs	r6, #16
 8006240:	e756      	b.n	80060f0 <UART_SetConfig+0xac>
 8006242:	2620      	movs	r6, #32
 8006244:	e754      	b.n	80060f0 <UART_SetConfig+0xac>
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <UART_SetConfig+0x288>)
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	2b05      	cmp	r3, #5
 8006250:	d804      	bhi.n	800625c <UART_SetConfig+0x218>
 8006252:	e8df f003 	tbb	[pc, r3]
 8006256:	05c9      	.short	0x05c9
 8006258:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800625c:	2680      	movs	r6, #128	; 0x80
 800625e:	e747      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006260:	2604      	movs	r6, #4
 8006262:	e745      	b.n	80060f0 <UART_SetConfig+0xac>
 8006264:	2640      	movs	r6, #64	; 0x40
 8006266:	e743      	b.n	80060f0 <UART_SetConfig+0xac>
 8006268:	2608      	movs	r6, #8
 800626a:	e741      	b.n	80060f0 <UART_SetConfig+0xac>
 800626c:	2610      	movs	r6, #16
 800626e:	e73f      	b.n	80060f0 <UART_SetConfig+0xac>
 8006270:	2620      	movs	r6, #32
 8006272:	e73d      	b.n	80060f0 <UART_SetConfig+0xac>
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <UART_SetConfig+0x288>)
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	2b05      	cmp	r3, #5
 800627e:	d804      	bhi.n	800628a <UART_SetConfig+0x246>
 8006280:	e8df f003 	tbb	[pc, r3]
 8006284:	090705b4 	.word	0x090705b4
 8006288:	260b      	.short	0x260b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800628a:	2680      	movs	r6, #128	; 0x80
 800628c:	e730      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800628e:	2604      	movs	r6, #4
 8006290:	e72e      	b.n	80060f0 <UART_SetConfig+0xac>
 8006292:	2640      	movs	r6, #64	; 0x40
 8006294:	e72c      	b.n	80060f0 <UART_SetConfig+0xac>
 8006296:	2608      	movs	r6, #8
 8006298:	e72a      	b.n	80060f0 <UART_SetConfig+0xac>
 800629a:	2610      	movs	r6, #16
 800629c:	e728      	b.n	80060f0 <UART_SetConfig+0xac>
 800629e:	bf00      	nop
 80062a0:	cfff69f3 	.word	0xcfff69f3
 80062a4:	58000c00 	.word	0x58000c00
 80062a8:	11fff4ff 	.word	0x11fff4ff
 80062ac:	40011000 	.word	0x40011000
 80062b0:	40004400 	.word	0x40004400
 80062b4:	40004800 	.word	0x40004800
 80062b8:	40004c00 	.word	0x40004c00
 80062bc:	40005000 	.word	0x40005000
 80062c0:	40011400 	.word	0x40011400
 80062c4:	40007800 	.word	0x40007800
 80062c8:	40007c00 	.word	0x40007c00
 80062cc:	58024400 	.word	0x58024400
 80062d0:	2620      	movs	r6, #32
 80062d2:	e70d      	b.n	80060f0 <UART_SetConfig+0xac>
 80062d4:	4b85      	ldr	r3, [pc, #532]	; (80064ec <UART_SetConfig+0x4a8>)
 80062d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	2b05      	cmp	r3, #5
 80062de:	d804      	bhi.n	80062ea <UART_SetConfig+0x2a6>
 80062e0:	e8df f003 	tbb	[pc, r3]
 80062e4:	09070586 	.word	0x09070586
 80062e8:	0d0b      	.short	0x0d0b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80062ea:	2680      	movs	r6, #128	; 0x80
 80062ec:	e700      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ee:	2604      	movs	r6, #4
 80062f0:	e6fe      	b.n	80060f0 <UART_SetConfig+0xac>
 80062f2:	2640      	movs	r6, #64	; 0x40
 80062f4:	e6fc      	b.n	80060f0 <UART_SetConfig+0xac>
 80062f6:	2608      	movs	r6, #8
 80062f8:	e6fa      	b.n	80060f0 <UART_SetConfig+0xac>
 80062fa:	2610      	movs	r6, #16
 80062fc:	e6f8      	b.n	80060f0 <UART_SetConfig+0xac>
 80062fe:	2620      	movs	r6, #32
 8006300:	e6f6      	b.n	80060f0 <UART_SetConfig+0xac>
 8006302:	4b7a      	ldr	r3, [pc, #488]	; (80064ec <UART_SetConfig+0x4a8>)
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800630a:	2b28      	cmp	r3, #40	; 0x28
 800630c:	d816      	bhi.n	800633c <UART_SetConfig+0x2f8>
 800630e:	e8df f003 	tbb	[pc, r3]
 8006312:	1571      	.short	0x1571
 8006314:	15151515 	.word	0x15151515
 8006318:	15171515 	.word	0x15171515
 800631c:	15151515 	.word	0x15151515
 8006320:	15191515 	.word	0x15191515
 8006324:	15151515 	.word	0x15151515
 8006328:	151b1515 	.word	0x151b1515
 800632c:	15151515 	.word	0x15151515
 8006330:	151d1515 	.word	0x151d1515
 8006334:	15151515 	.word	0x15151515
 8006338:	1515      	.short	0x1515
 800633a:	1f          	.byte	0x1f
 800633b:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800633c:	2680      	movs	r6, #128	; 0x80
 800633e:	e6d7      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006340:	2604      	movs	r6, #4
 8006342:	e6d5      	b.n	80060f0 <UART_SetConfig+0xac>
 8006344:	2640      	movs	r6, #64	; 0x40
 8006346:	e6d3      	b.n	80060f0 <UART_SetConfig+0xac>
 8006348:	2608      	movs	r6, #8
 800634a:	e6d1      	b.n	80060f0 <UART_SetConfig+0xac>
 800634c:	2610      	movs	r6, #16
 800634e:	e6cf      	b.n	80060f0 <UART_SetConfig+0xac>
 8006350:	2620      	movs	r6, #32
 8006352:	e6cd      	b.n	80060f0 <UART_SetConfig+0xac>
 8006354:	4b65      	ldr	r3, [pc, #404]	; (80064ec <UART_SetConfig+0x4a8>)
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	2b05      	cmp	r3, #5
 800635e:	d804      	bhi.n	800636a <UART_SetConfig+0x326>
 8006360:	e8df f003 	tbb	[pc, r3]
 8006364:	0907054a 	.word	0x0907054a
 8006368:	0d0b      	.short	0x0d0b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800636a:	2680      	movs	r6, #128	; 0x80
 800636c:	e6c0      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800636e:	2604      	movs	r6, #4
 8006370:	e6be      	b.n	80060f0 <UART_SetConfig+0xac>
 8006372:	2640      	movs	r6, #64	; 0x40
 8006374:	e6bc      	b.n	80060f0 <UART_SetConfig+0xac>
 8006376:	2608      	movs	r6, #8
 8006378:	e6ba      	b.n	80060f0 <UART_SetConfig+0xac>
 800637a:	2610      	movs	r6, #16
 800637c:	e6b8      	b.n	80060f0 <UART_SetConfig+0xac>
 800637e:	2620      	movs	r6, #32
 8006380:	e6b6      	b.n	80060f0 <UART_SetConfig+0xac>
 8006382:	4b5a      	ldr	r3, [pc, #360]	; (80064ec <UART_SetConfig+0x4a8>)
 8006384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b05      	cmp	r3, #5
 800638c:	d804      	bhi.n	8006398 <UART_SetConfig+0x354>
 800638e:	e8df f003 	tbb	[pc, r3]
 8006392:	0535      	.short	0x0535
 8006394:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006398:	2680      	movs	r6, #128	; 0x80
 800639a:	e6a9      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800639c:	2604      	movs	r6, #4
 800639e:	e6a7      	b.n	80060f0 <UART_SetConfig+0xac>
 80063a0:	2640      	movs	r6, #64	; 0x40
 80063a2:	e6a5      	b.n	80060f0 <UART_SetConfig+0xac>
 80063a4:	2608      	movs	r6, #8
 80063a6:	e6a3      	b.n	80060f0 <UART_SetConfig+0xac>
 80063a8:	2610      	movs	r6, #16
 80063aa:	e6a1      	b.n	80060f0 <UART_SetConfig+0xac>
 80063ac:	2620      	movs	r6, #32
 80063ae:	e69f      	b.n	80060f0 <UART_SetConfig+0xac>
 80063b0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	2b05      	cmp	r3, #5
 80063bc:	d804      	bhi.n	80063c8 <UART_SetConfig+0x384>
 80063be:	e8df f003 	tbb	[pc, r3]
 80063c2:	051f      	.short	0x051f
 80063c4:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80063c8:	2680      	movs	r6, #128	; 0x80
 80063ca:	e691      	b.n	80060f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063cc:	2604      	movs	r6, #4
 80063ce:	e68f      	b.n	80060f0 <UART_SetConfig+0xac>
 80063d0:	2640      	movs	r6, #64	; 0x40
 80063d2:	e68d      	b.n	80060f0 <UART_SetConfig+0xac>
 80063d4:	2608      	movs	r6, #8
 80063d6:	e68b      	b.n	80060f0 <UART_SetConfig+0xac>
 80063d8:	2610      	movs	r6, #16
 80063da:	e689      	b.n	80060f0 <UART_SetConfig+0xac>
 80063dc:	2620      	movs	r6, #32
 80063de:	e687      	b.n	80060f0 <UART_SetConfig+0xac>
 80063e0:	2601      	movs	r6, #1
 80063e2:	e685      	b.n	80060f0 <UART_SetConfig+0xac>
 80063e4:	2600      	movs	r6, #0
 80063e6:	e683      	b.n	80060f0 <UART_SetConfig+0xac>
 80063e8:	2600      	movs	r6, #0
 80063ea:	e681      	b.n	80060f0 <UART_SetConfig+0xac>
 80063ec:	2600      	movs	r6, #0
 80063ee:	e67f      	b.n	80060f0 <UART_SetConfig+0xac>
 80063f0:	2600      	movs	r6, #0
 80063f2:	e67d      	b.n	80060f0 <UART_SetConfig+0xac>
 80063f4:	2601      	movs	r6, #1
 80063f6:	e67b      	b.n	80060f0 <UART_SetConfig+0xac>
 80063f8:	2600      	movs	r6, #0
 80063fa:	e679      	b.n	80060f0 <UART_SetConfig+0xac>
 80063fc:	2600      	movs	r6, #0
 80063fe:	e677      	b.n	80060f0 <UART_SetConfig+0xac>
 8006400:	2602      	movs	r6, #2
 8006402:	e675      	b.n	80060f0 <UART_SetConfig+0xac>
    switch (clocksource)
 8006404:	2e08      	cmp	r6, #8
 8006406:	d03a      	beq.n	800647e <UART_SetConfig+0x43a>
 8006408:	d908      	bls.n	800641c <UART_SetConfig+0x3d8>
 800640a:	2e20      	cmp	r6, #32
 800640c:	d044      	beq.n	8006498 <UART_SetConfig+0x454>
 800640e:	2e40      	cmp	r6, #64	; 0x40
 8006410:	d02f      	beq.n	8006472 <UART_SetConfig+0x42e>
 8006412:	2e10      	cmp	r6, #16
 8006414:	d00c      	beq.n	8006430 <UART_SetConfig+0x3ec>
        ret = HAL_ERROR;
 8006416:	2501      	movs	r5, #1
    tmpreg = 0U;
 8006418:	2000      	movs	r0, #0
      break;
 800641a:	e00b      	b.n	8006434 <UART_SetConfig+0x3f0>
    switch (clocksource)
 800641c:	2e02      	cmp	r6, #2
 800641e:	d024      	beq.n	800646a <UART_SetConfig+0x426>
 8006420:	2e04      	cmp	r6, #4
 8006422:	d1f8      	bne.n	8006416 <UART_SetConfig+0x3d2>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006424:	a803      	add	r0, sp, #12
 8006426:	f7ff f82b 	bl	8005480 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 800642a:	9804      	ldr	r0, [sp, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 800642c:	2500      	movs	r5, #0
      break;
 800642e:	e001      	b.n	8006434 <UART_SetConfig+0x3f0>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006430:	2500      	movs	r5, #0
      tmpreg =(uint32_t) CSI_VALUE;
 8006432:	482f      	ldr	r0, [pc, #188]	; (80064f0 <UART_SetConfig+0x4ac>)
    if (tmpreg != 0U)
 8006434:	2800      	cmp	r0, #0
 8006436:	f000 8150 	beq.w	80066da <UART_SetConfig+0x696>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800643a:	6867      	ldr	r7, [r4, #4]
 800643c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8006440:	4298      	cmp	r0, r3
 8006442:	f0c0 8272 	bcc.w	800692a <UART_SetConfig+0x8e6>
 8006446:	ebb0 3f07 	cmp.w	r0, r7, lsl #12
 800644a:	f200 8270 	bhi.w	800692e <UART_SetConfig+0x8ea>
        switch (clocksource)
 800644e:	2e08      	cmp	r6, #8
 8006450:	f000 8096 	beq.w	8006580 <UART_SetConfig+0x53c>
 8006454:	d927      	bls.n	80064a6 <UART_SetConfig+0x462>
 8006456:	2e20      	cmp	r6, #32
 8006458:	f000 80ee 	beq.w	8006638 <UART_SetConfig+0x5f4>
 800645c:	2e40      	cmp	r6, #64	; 0x40
 800645e:	d071      	beq.n	8006544 <UART_SetConfig+0x500>
 8006460:	2e10      	cmp	r6, #16
 8006462:	f000 80ce 	beq.w	8006602 <UART_SetConfig+0x5be>
          ret = HAL_ERROR;
 8006466:	2501      	movs	r5, #1
 8006468:	e063      	b.n	8006532 <UART_SetConfig+0x4ee>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 800646a:	f7fe fff3 	bl	8005454 <HAL_RCCEx_GetD3PCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 800646e:	2500      	movs	r5, #0
      break;
 8006470:	e7e0      	b.n	8006434 <UART_SetConfig+0x3f0>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006472:	4668      	mov	r0, sp
 8006474:	f7ff f8e8 	bl	8005648 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8006478:	9801      	ldr	r0, [sp, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800647a:	2500      	movs	r5, #0
      break;
 800647c:	e7da      	b.n	8006434 <UART_SetConfig+0x3f0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800647e:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <UART_SetConfig+0x4a8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f013 0f20 	tst.w	r3, #32
 8006486:	d00b      	beq.n	80064a0 <UART_SetConfig+0x45c>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006488:	4b18      	ldr	r3, [pc, #96]	; (80064ec <UART_SetConfig+0x4a8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006490:	4818      	ldr	r0, [pc, #96]	; (80064f4 <UART_SetConfig+0x4b0>)
 8006492:	40d8      	lsrs	r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006494:	2500      	movs	r5, #0
 8006496:	e7cd      	b.n	8006434 <UART_SetConfig+0x3f0>
 8006498:	2500      	movs	r5, #0
      tmpreg = (uint32_t) LSE_VALUE;
 800649a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800649e:	e7c9      	b.n	8006434 <UART_SetConfig+0x3f0>
  HAL_StatusTypeDef ret               = HAL_OK;
 80064a0:	2500      	movs	r5, #0
        tmpreg = (uint32_t) HSI_VALUE;
 80064a2:	4814      	ldr	r0, [pc, #80]	; (80064f4 <UART_SetConfig+0x4b0>)
 80064a4:	e7c6      	b.n	8006434 <UART_SetConfig+0x3f0>
        switch (clocksource)
 80064a6:	2e02      	cmp	r6, #2
 80064a8:	d028      	beq.n	80064fc <UART_SetConfig+0x4b8>
 80064aa:	2e04      	cmp	r6, #4
 80064ac:	d1db      	bne.n	8006466 <UART_SetConfig+0x422>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ae:	a803      	add	r0, sp, #12
 80064b0:	f7fe ffe6 	bl	8005480 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80064b4:	f04f 0800 	mov.w	r8, #0
 80064b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80064ba:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <UART_SetConfig+0x4b4>)
 80064bc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80064c0:	2300      	movs	r3, #0
 80064c2:	9804      	ldr	r0, [sp, #16]
 80064c4:	4641      	mov	r1, r8
 80064c6:	f7f9 ff0b 	bl	80002e0 <__aeabi_uldivmod>
 80064ca:	020f      	lsls	r7, r1, #8
 80064cc:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80064d0:	0206      	lsls	r6, r0, #8
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	0850      	lsrs	r0, r2, #1
 80064d6:	4643      	mov	r3, r8
 80064d8:	eb16 0800 	adds.w	r8, r6, r0
 80064dc:	f147 0900 	adc.w	r9, r7, #0
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7f9 fefc 	bl	80002e0 <__aeabi_uldivmod>
          break;
 80064e8:	e023      	b.n	8006532 <UART_SetConfig+0x4ee>
 80064ea:	bf00      	nop
 80064ec:	58024400 	.word	0x58024400
 80064f0:	003d0900 	.word	0x003d0900
 80064f4:	03d09000 	.word	0x03d09000
 80064f8:	08008434 	.word	0x08008434
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80064fc:	f7fe ffaa 	bl	8005454 <HAL_RCCEx_GetD3PCLK1Freq>
 8006500:	f04f 0800 	mov.w	r8, #0
 8006504:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006506:	4b9f      	ldr	r3, [pc, #636]	; (8006784 <UART_SetConfig+0x740>)
 8006508:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800650c:	2300      	movs	r3, #0
 800650e:	4641      	mov	r1, r8
 8006510:	f7f9 fee6 	bl	80002e0 <__aeabi_uldivmod>
 8006514:	020f      	lsls	r7, r1, #8
 8006516:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800651a:	0206      	lsls	r6, r0, #8
 800651c:	6862      	ldr	r2, [r4, #4]
 800651e:	0850      	lsrs	r0, r2, #1
 8006520:	4643      	mov	r3, r8
 8006522:	eb16 0800 	adds.w	r8, r6, r0
 8006526:	f147 0900 	adc.w	r9, r7, #0
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	f7f9 fed7 	bl	80002e0 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8006532:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006536:	4b94      	ldr	r3, [pc, #592]	; (8006788 <UART_SetConfig+0x744>)
 8006538:	429a      	cmp	r2, r3
 800653a:	f200 81fa 	bhi.w	8006932 <UART_SetConfig+0x8ee>
           huart->Instance->BRR = tmpreg;
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	60d8      	str	r0, [r3, #12]
 8006542:	e0ca      	b.n	80066da <UART_SetConfig+0x696>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006544:	4668      	mov	r0, sp
 8006546:	f7ff f87f 	bl	8005648 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800654a:	f04f 0800 	mov.w	r8, #0
 800654e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006550:	4b8c      	ldr	r3, [pc, #560]	; (8006784 <UART_SetConfig+0x740>)
 8006552:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006556:	2300      	movs	r3, #0
 8006558:	9801      	ldr	r0, [sp, #4]
 800655a:	4641      	mov	r1, r8
 800655c:	f7f9 fec0 	bl	80002e0 <__aeabi_uldivmod>
 8006560:	020f      	lsls	r7, r1, #8
 8006562:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006566:	0206      	lsls	r6, r0, #8
 8006568:	6862      	ldr	r2, [r4, #4]
 800656a:	0850      	lsrs	r0, r2, #1
 800656c:	4643      	mov	r3, r8
 800656e:	eb16 0800 	adds.w	r8, r6, r0
 8006572:	f147 0900 	adc.w	r9, r7, #0
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7f9 feb1 	bl	80002e0 <__aeabi_uldivmod>
          break;
 800657e:	e7d8      	b.n	8006532 <UART_SetConfig+0x4ee>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006580:	4b82      	ldr	r3, [pc, #520]	; (800678c <UART_SetConfig+0x748>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f013 0f20 	tst.w	r3, #32
 8006588:	d020      	beq.n	80065cc <UART_SetConfig+0x588>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800658a:	4b80      	ldr	r3, [pc, #512]	; (800678c <UART_SetConfig+0x748>)
 800658c:	6819      	ldr	r1, [r3, #0]
 800658e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8006592:	2600      	movs	r6, #0
 8006594:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006596:	4b7b      	ldr	r3, [pc, #492]	; (8006784 <UART_SetConfig+0x740>)
 8006598:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800659c:	2300      	movs	r3, #0
 800659e:	487c      	ldr	r0, [pc, #496]	; (8006790 <UART_SetConfig+0x74c>)
 80065a0:	40c8      	lsrs	r0, r1
 80065a2:	4631      	mov	r1, r6
 80065a4:	f7f9 fe9c 	bl	80002e0 <__aeabi_uldivmod>
 80065a8:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80065ac:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80065b0:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80065b4:	0878      	lsrs	r0, r7, #1
 80065b6:	463a      	mov	r2, r7
 80065b8:	4633      	mov	r3, r6
 80065ba:	eb18 0600 	adds.w	r6, r8, r0
 80065be:	f149 0700 	adc.w	r7, r9, #0
 80065c2:	4630      	mov	r0, r6
 80065c4:	4639      	mov	r1, r7
 80065c6:	f7f9 fe8b 	bl	80002e0 <__aeabi_uldivmod>
 80065ca:	e7b2      	b.n	8006532 <UART_SetConfig+0x4ee>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80065cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065ce:	4b6d      	ldr	r3, [pc, #436]	; (8006784 <UART_SetConfig+0x740>)
 80065d0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80065d4:	2300      	movs	r3, #0
 80065d6:	486e      	ldr	r0, [pc, #440]	; (8006790 <UART_SetConfig+0x74c>)
 80065d8:	2100      	movs	r1, #0
 80065da:	f7f9 fe81 	bl	80002e0 <__aeabi_uldivmod>
 80065de:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80065e2:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80065e6:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80065ea:	0878      	lsrs	r0, r7, #1
 80065ec:	463a      	mov	r2, r7
 80065ee:	2300      	movs	r3, #0
 80065f0:	eb18 0600 	adds.w	r6, r8, r0
 80065f4:	f149 0700 	adc.w	r7, r9, #0
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7f9 fe70 	bl	80002e0 <__aeabi_uldivmod>
 8006600:	e797      	b.n	8006532 <UART_SetConfig+0x4ee>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006602:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006604:	4b5f      	ldr	r3, [pc, #380]	; (8006784 <UART_SetConfig+0x740>)
 8006606:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800660a:	2300      	movs	r3, #0
 800660c:	4861      	ldr	r0, [pc, #388]	; (8006794 <UART_SetConfig+0x750>)
 800660e:	2100      	movs	r1, #0
 8006610:	f7f9 fe66 	bl	80002e0 <__aeabi_uldivmod>
 8006614:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8006618:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800661c:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8006620:	0878      	lsrs	r0, r7, #1
 8006622:	463a      	mov	r2, r7
 8006624:	2300      	movs	r3, #0
 8006626:	eb18 0600 	adds.w	r6, r8, r0
 800662a:	f149 0700 	adc.w	r7, r9, #0
 800662e:	4630      	mov	r0, r6
 8006630:	4639      	mov	r1, r7
 8006632:	f7f9 fe55 	bl	80002e0 <__aeabi_uldivmod>
          break;
 8006636:	e77c      	b.n	8006532 <UART_SetConfig+0x4ee>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006638:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800663a:	4b52      	ldr	r3, [pc, #328]	; (8006784 <UART_SetConfig+0x740>)
 800663c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006640:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006644:	fbb2 f2f3 	udiv	r2, r2, r3
 8006648:	b292      	uxth	r2, r2
 800664a:	2100      	movs	r1, #0
 800664c:	0210      	lsls	r0, r2, #8
 800664e:	087e      	lsrs	r6, r7, #1
 8006650:	463a      	mov	r2, r7
 8006652:	2300      	movs	r3, #0
 8006654:	1980      	adds	r0, r0, r6
 8006656:	f141 0100 	adc.w	r1, r1, #0
 800665a:	f7f9 fe41 	bl	80002e0 <__aeabi_uldivmod>
          break;
 800665e:	e768      	b.n	8006532 <UART_SetConfig+0x4ee>
    switch (clocksource)
 8006660:	2e40      	cmp	r6, #64	; 0x40
 8006662:	f200 80ca 	bhi.w	80067fa <UART_SetConfig+0x7b6>
 8006666:	e8df f006 	tbb	[pc, r6]
 800666a:	3c21      	.short	0x3c21
 800666c:	c84dc8c8 	.word	0xc84dc8c8
 8006670:	c873c8c8 	.word	0xc873c8c8
 8006674:	c8c8c8c8 	.word	0xc8c8c8c8
 8006678:	c8a7c8c8 	.word	0xc8a7c8c8
 800667c:	c8c8c8c8 	.word	0xc8c8c8c8
 8006680:	c8c8c8c8 	.word	0xc8c8c8c8
 8006684:	c8c8c8c8 	.word	0xc8c8c8c8
 8006688:	c8b7c8c8 	.word	0xc8b7c8c8
 800668c:	c8c8c8c8 	.word	0xc8c8c8c8
 8006690:	c8c8c8c8 	.word	0xc8c8c8c8
 8006694:	c8c8c8c8 	.word	0xc8c8c8c8
 8006698:	c8c8c8c8 	.word	0xc8c8c8c8
 800669c:	c8c8c8c8 	.word	0xc8c8c8c8
 80066a0:	c8c8c8c8 	.word	0xc8c8c8c8
 80066a4:	c8c8c8c8 	.word	0xc8c8c8c8
 80066a8:	c8c8      	.short	0xc8c8
 80066aa:	60          	.byte	0x60
 80066ab:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80066ac:	f7fe f864 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 80066b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066b2:	4b34      	ldr	r3, [pc, #208]	; (8006784 <UART_SetConfig+0x740>)
 80066b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80066b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80066bc:	6862      	ldr	r2, [r4, #4]
 80066be:	0853      	lsrs	r3, r2, #1
 80066c0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80066c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ca:	2500      	movs	r5, #0
    brrtemp = usartdiv & 0xFFF0U;
 80066cc:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066d0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80066d4:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	60d3      	str	r3, [r2, #12]
}
 80066da:	4628      	mov	r0, r5
 80066dc:	b007      	add	sp, #28
 80066de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80066e2:	f7fe f85f 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 80066e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066e8:	4b26      	ldr	r3, [pc, #152]	; (8006784 <UART_SetConfig+0x740>)
 80066ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80066ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	0853      	lsrs	r3, r2, #1
 80066f6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80066fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80066fe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006700:	2500      	movs	r5, #0
      break;
 8006702:	e7e3      	b.n	80066cc <UART_SetConfig+0x688>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006704:	a803      	add	r0, sp, #12
 8006706:	f7fe febb 	bl	8005480 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800670a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <UART_SetConfig+0x740>)
 800670e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006712:	9b04      	ldr	r3, [sp, #16]
 8006714:	fbb3 f2f2 	udiv	r2, r3, r2
 8006718:	6861      	ldr	r1, [r4, #4]
 800671a:	084b      	lsrs	r3, r1, #1
 800671c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006720:	fbb3 f3f1 	udiv	r3, r3, r1
 8006724:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006726:	2500      	movs	r5, #0
      break;
 8006728:	e7d0      	b.n	80066cc <UART_SetConfig+0x688>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800672a:	4668      	mov	r0, sp
 800672c:	f7fe ff8c 	bl	8005648 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006730:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <UART_SetConfig+0x740>)
 8006734:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006738:	9b01      	ldr	r3, [sp, #4]
 800673a:	fbb3 f2f2 	udiv	r2, r3, r2
 800673e:	6861      	ldr	r1, [r4, #4]
 8006740:	084b      	lsrs	r3, r1, #1
 8006742:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006746:	fbb3 f3f1 	udiv	r3, r3, r1
 800674a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800674c:	2500      	movs	r5, #0
      break;
 800674e:	e7bd      	b.n	80066cc <UART_SetConfig+0x688>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006750:	4b0e      	ldr	r3, [pc, #56]	; (800678c <UART_SetConfig+0x748>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f013 0f20 	tst.w	r3, #32
 8006758:	d01e      	beq.n	8006798 <UART_SetConfig+0x754>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800675a:	4b0c      	ldr	r3, [pc, #48]	; (800678c <UART_SetConfig+0x748>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006762:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <UART_SetConfig+0x74c>)
 8006764:	40d3      	lsrs	r3, r2
 8006766:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006768:	4a06      	ldr	r2, [pc, #24]	; (8006784 <UART_SetConfig+0x740>)
 800676a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800676e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006772:	6861      	ldr	r1, [r4, #4]
 8006774:	084b      	lsrs	r3, r1, #1
 8006776:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800677a:	fbb3 f3f1 	udiv	r3, r3, r1
 800677e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006780:	2500      	movs	r5, #0
 8006782:	e7a3      	b.n	80066cc <UART_SetConfig+0x688>
 8006784:	08008434 	.word	0x08008434
 8006788:	000ffcff 	.word	0x000ffcff
 800678c:	58024400 	.word	0x58024400
 8006790:	03d09000 	.word	0x03d09000
 8006794:	003d0900 	.word	0x003d0900
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006798:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800679a:	4b68      	ldr	r3, [pc, #416]	; (800693c <UART_SetConfig+0x8f8>)
 800679c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80067a0:	4b67      	ldr	r3, [pc, #412]	; (8006940 <UART_SetConfig+0x8fc>)
 80067a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067a6:	6861      	ldr	r1, [r4, #4]
 80067a8:	084b      	lsrs	r3, r1, #1
 80067aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80067ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80067b2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80067b4:	2500      	movs	r5, #0
 80067b6:	e789      	b.n	80066cc <UART_SetConfig+0x688>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80067b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067ba:	4b60      	ldr	r3, [pc, #384]	; (800693c <UART_SetConfig+0x8f8>)
 80067bc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80067c0:	4b60      	ldr	r3, [pc, #384]	; (8006944 <UART_SetConfig+0x900>)
 80067c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067c6:	6861      	ldr	r1, [r4, #4]
 80067c8:	084b      	lsrs	r3, r1, #1
 80067ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80067ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80067d4:	2500      	movs	r5, #0
      break;
 80067d6:	e779      	b.n	80066cc <UART_SetConfig+0x688>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80067d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067da:	4b58      	ldr	r3, [pc, #352]	; (800693c <UART_SetConfig+0x8f8>)
 80067dc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80067e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80067e8:	6861      	ldr	r1, [r4, #4]
 80067ea:	084b      	lsrs	r3, r1, #1
 80067ec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80067f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f6:	2500      	movs	r5, #0
      break;
 80067f8:	e768      	b.n	80066cc <UART_SetConfig+0x688>
        ret = HAL_ERROR;
 80067fa:	2501      	movs	r5, #1
  uint16_t usartdiv                   = 0x0000U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e765      	b.n	80066cc <UART_SetConfig+0x688>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006800:	f7fd ffba 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8006804:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006806:	4b4d      	ldr	r3, [pc, #308]	; (800693c <UART_SetConfig+0x8f8>)
 8006808:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800680c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006810:	6860      	ldr	r0, [r4, #4]
 8006812:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8006816:	fbb3 f3f0 	udiv	r3, r3, r0
 800681a:	b29b      	uxth	r3, r3
 800681c:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800681e:	2500      	movs	r5, #0
      break;
 8006820:	e75b      	b.n	80066da <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006822:	f7fd ffbf 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 8006826:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006828:	4b44      	ldr	r3, [pc, #272]	; (800693c <UART_SetConfig+0x8f8>)
 800682a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800682e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006832:	6860      	ldr	r0, [r4, #4]
 8006834:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8006838:	fbb3 f3f0 	udiv	r3, r3, r0
 800683c:	b29b      	uxth	r3, r3
 800683e:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006840:	2500      	movs	r5, #0
      break;
 8006842:	e74a      	b.n	80066da <UART_SetConfig+0x696>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006844:	a803      	add	r0, sp, #12
 8006846:	f7fe fe1b 	bl	8005480 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800684a:	6821      	ldr	r1, [r4, #0]
 800684c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800684e:	4b3b      	ldr	r3, [pc, #236]	; (800693c <UART_SetConfig+0x8f8>)
 8006850:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	fbb3 f3f2 	udiv	r3, r3, r2
 800685a:	6862      	ldr	r2, [r4, #4]
 800685c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006860:	fbb3 f3f2 	udiv	r3, r3, r2
 8006864:	b29b      	uxth	r3, r3
 8006866:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006868:	2500      	movs	r5, #0
      break;
 800686a:	e736      	b.n	80066da <UART_SetConfig+0x696>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800686c:	4668      	mov	r0, sp
 800686e:	f7fe feeb 	bl	8005648 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006872:	6821      	ldr	r1, [r4, #0]
 8006874:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006876:	4b31      	ldr	r3, [pc, #196]	; (800693c <UART_SetConfig+0x8f8>)
 8006878:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800687c:	9b01      	ldr	r3, [sp, #4]
 800687e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006882:	6862      	ldr	r2, [r4, #4]
 8006884:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006888:	fbb3 f3f2 	udiv	r3, r3, r2
 800688c:	b29b      	uxth	r3, r3
 800688e:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006890:	2500      	movs	r5, #0
      break;
 8006892:	e722      	b.n	80066da <UART_SetConfig+0x696>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006894:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <UART_SetConfig+0x904>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f013 0f20 	tst.w	r3, #32
 800689c:	d014      	beq.n	80068c8 <UART_SetConfig+0x884>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800689e:	4b2a      	ldr	r3, [pc, #168]	; (8006948 <UART_SetConfig+0x904>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80068a6:	4b26      	ldr	r3, [pc, #152]	; (8006940 <UART_SetConfig+0x8fc>)
 80068a8:	40d3      	lsrs	r3, r2
 80068aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80068ac:	4a23      	ldr	r2, [pc, #140]	; (800693c <UART_SetConfig+0x8f8>)
 80068ae:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80068b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068b6:	6862      	ldr	r2, [r4, #4]
 80068b8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80068bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068c4:	2500      	movs	r5, #0
 80068c6:	e708      	b.n	80066da <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80068c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068ca:	4b1c      	ldr	r3, [pc, #112]	; (800693c <UART_SetConfig+0x8f8>)
 80068cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068d0:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <UART_SetConfig+0x8fc>)
 80068d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80068dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068e4:	2500      	movs	r5, #0
 80068e6:	e6f8      	b.n	80066da <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80068e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068ea:	4b14      	ldr	r3, [pc, #80]	; (800693c <UART_SetConfig+0x8f8>)
 80068ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068f0:	4b14      	ldr	r3, [pc, #80]	; (8006944 <UART_SetConfig+0x900>)
 80068f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80068fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006900:	b29b      	uxth	r3, r3
 8006902:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006904:	2500      	movs	r5, #0
      break;
 8006906:	e6e8      	b.n	80066da <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006908:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800690a:	4b0c      	ldr	r3, [pc, #48]	; (800693c <UART_SetConfig+0x8f8>)
 800690c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006914:	fbb3 f3f2 	udiv	r3, r3, r2
 8006918:	6862      	ldr	r2, [r4, #4]
 800691a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800691e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006926:	2500      	movs	r5, #0
      break;
 8006928:	e6d7      	b.n	80066da <UART_SetConfig+0x696>
        ret = HAL_ERROR;
 800692a:	2501      	movs	r5, #1
 800692c:	e6d5      	b.n	80066da <UART_SetConfig+0x696>
 800692e:	2501      	movs	r5, #1
 8006930:	e6d3      	b.n	80066da <UART_SetConfig+0x696>
          ret = HAL_ERROR;
 8006932:	2501      	movs	r5, #1
 8006934:	e6d1      	b.n	80066da <UART_SetConfig+0x696>
        ret = HAL_ERROR;
 8006936:	2501      	movs	r5, #1
 8006938:	e6cf      	b.n	80066da <UART_SetConfig+0x696>
 800693a:	bf00      	nop
 800693c:	08008434 	.word	0x08008434
 8006940:	03d09000 	.word	0x03d09000
 8006944:	003d0900 	.word	0x003d0900
 8006948:	58024400 	.word	0x58024400

0800694c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800694c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800694e:	f013 0f01 	tst.w	r3, #1
 8006952:	d006      	beq.n	8006962 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006954:	6802      	ldr	r2, [r0, #0]
 8006956:	6853      	ldr	r3, [r2, #4]
 8006958:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800695c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800695e:	430b      	orrs	r3, r1
 8006960:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006962:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006964:	f013 0f02 	tst.w	r3, #2
 8006968:	d006      	beq.n	8006978 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800696a:	6802      	ldr	r2, [r0, #0]
 800696c:	6853      	ldr	r3, [r2, #4]
 800696e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006972:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006974:	430b      	orrs	r3, r1
 8006976:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006978:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800697a:	f013 0f04 	tst.w	r3, #4
 800697e:	d006      	beq.n	800698e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006980:	6802      	ldr	r2, [r0, #0]
 8006982:	6853      	ldr	r3, [r2, #4]
 8006984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006988:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800698a:	430b      	orrs	r3, r1
 800698c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800698e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006990:	f013 0f08 	tst.w	r3, #8
 8006994:	d006      	beq.n	80069a4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006996:	6802      	ldr	r2, [r0, #0]
 8006998:	6853      	ldr	r3, [r2, #4]
 800699a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800699e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069a6:	f013 0f10 	tst.w	r3, #16
 80069aa:	d006      	beq.n	80069ba <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069ac:	6802      	ldr	r2, [r0, #0]
 80069ae:	6893      	ldr	r3, [r2, #8]
 80069b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069b4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80069b6:	430b      	orrs	r3, r1
 80069b8:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069bc:	f013 0f20 	tst.w	r3, #32
 80069c0:	d006      	beq.n	80069d0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069c2:	6802      	ldr	r2, [r0, #0]
 80069c4:	6893      	ldr	r3, [r2, #8]
 80069c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069ca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069d8:	6802      	ldr	r2, [r0, #0]
 80069da:	6853      	ldr	r3, [r2, #4]
 80069dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069e0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80069e2:	430b      	orrs	r3, r1
 80069e4:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80069e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ec:	d00b      	beq.n	8006a06 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069f4:	d006      	beq.n	8006a04 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069f6:	6802      	ldr	r2, [r0, #0]
 80069f8:	6853      	ldr	r3, [r2, #4]
 80069fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80069fe:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6053      	str	r3, [r2, #4]
 8006a04:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a06:	6802      	ldr	r2, [r0, #0]
 8006a08:	6853      	ldr	r3, [r2, #4]
 8006a0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a0e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8006a10:	430b      	orrs	r3, r1
 8006a12:	6053      	str	r3, [r2, #4]
 8006a14:	e7eb      	b.n	80069ee <UART_AdvFeatureConfig+0xa2>

08006a16 <UART_WaitOnFlagUntilTimeout>:
{
 8006a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	460f      	mov	r7, r1
 8006a1e:	4616      	mov	r6, r2
 8006a20:	4698      	mov	r8, r3
 8006a22:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	ea37 0303 	bics.w	r3, r7, r3
 8006a2c:	bf0c      	ite	eq
 8006a2e:	2301      	moveq	r3, #1
 8006a30:	2300      	movne	r3, #0
 8006a32:	42b3      	cmp	r3, r6
 8006a34:	d11e      	bne.n	8006a74 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8006a36:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8006a3a:	d0f3      	beq.n	8006a24 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006a3c:	b12c      	cbz	r4, 8006a4a <UART_WaitOnFlagUntilTimeout+0x34>
 8006a3e:	f7fb ff97 	bl	8002970 <HAL_GetTick>
 8006a42:	eba0 0008 	sub.w	r0, r0, r8
 8006a46:	4284      	cmp	r4, r0
 8006a48:	d2ec      	bcs.n	8006a24 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a4a:	682a      	ldr	r2, [r5, #0]
 8006a4c:	6813      	ldr	r3, [r2, #0]
 8006a4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a52:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a54:	682a      	ldr	r2, [r5, #0]
 8006a56:	6893      	ldr	r3, [r2, #8]
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006a5e:	2320      	movs	r3, #32
 8006a60:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8006a64:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        return HAL_TIMEOUT;
 8006a6e:	2003      	movs	r0, #3
 8006a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8006a74:	2000      	movs	r0, #0
}
 8006a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a7a <HAL_UART_Transmit>:
{
 8006a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8006a82:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d004      	beq.n	8006a96 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	b002      	add	sp, #8
 8006a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a96:	4604      	mov	r4, r0
 8006a98:	460d      	mov	r5, r1
 8006a9a:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	bf18      	it	ne
 8006aa0:	2900      	cmpne	r1, #0
 8006aa2:	d04c      	beq.n	8006b3e <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8006aa4:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_UART_Transmit+0x36>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e7ee      	b.n	8006a8e <HAL_UART_Transmit+0x14>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aba:	2321      	movs	r3, #33	; 0x21
 8006abc:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    tickstart = HAL_GetTick();
 8006ac0:	f7fb ff56 	bl	8002970 <HAL_GetTick>
 8006ac4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8006ac6:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
    huart->TxXferCount = Size;
 8006aca:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 8006ace:	e003      	b.n	8006ad8 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	782a      	ldrb	r2, [r5, #0]
 8006ad4:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ad6:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8006ad8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	b1e3      	cbz	r3, 8006b1a <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8006ae0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aee:	9600      	str	r6, [sp, #0]
 8006af0:	463b      	mov	r3, r7
 8006af2:	2200      	movs	r2, #0
 8006af4:	2180      	movs	r1, #128	; 0x80
 8006af6:	4620      	mov	r0, r4
 8006af8:	f7ff ff8d 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 8006afc:	bb08      	cbnz	r0, 8006b42 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afe:	68a3      	ldr	r3, [r4, #8]
 8006b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b04:	d1e4      	bne.n	8006ad0 <HAL_UART_Transmit+0x56>
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e1      	bne.n	8006ad0 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006b0c:	6822      	ldr	r2, [r4, #0]
 8006b0e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b16:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8006b18:	e7de      	b.n	8006ad8 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b1a:	9600      	str	r6, [sp, #0]
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2140      	movs	r1, #64	; 0x40
 8006b22:	4620      	mov	r0, r4
 8006b24:	f7ff ff77 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	b108      	cbz	r0, 8006b30 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e7ae      	b.n	8006a8e <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8006b30:	2220      	movs	r2, #32
 8006b32:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
    __HAL_UNLOCK(huart);
 8006b36:	2200      	movs	r2, #0
 8006b38:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
    return HAL_OK;
 8006b3c:	e7a7      	b.n	8006a8e <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e7a5      	b.n	8006a8e <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e7a3      	b.n	8006a8e <HAL_UART_Transmit+0x14>

08006b46 <UART_CheckIdleState>:
{
 8006b46:	b530      	push	{r4, r5, lr}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006b50:	f7fb ff0e 	bl	8002970 <HAL_GetTick>
 8006b54:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f013 0f08 	tst.w	r3, #8
 8006b5e:	d10e      	bne.n	8006b7e <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f013 0f04 	tst.w	r3, #4
 8006b68:	d117      	bne.n	8006b9a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8006b6a:	2320      	movs	r3, #32
 8006b6c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  huart->RxState = HAL_UART_STATE_READY;
 8006b70:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  __HAL_UNLOCK(huart);
 8006b74:	2000      	movs	r0, #0
 8006b76:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8006b7a:	b003      	add	sp, #12
 8006b7c:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4603      	mov	r3, r0
 8006b86:	2200      	movs	r2, #0
 8006b88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7ff ff42 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d0e4      	beq.n	8006b60 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8006b96:	2003      	movs	r0, #3
 8006b98:	e7ef      	b.n	8006b7a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7ff ff34 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d0db      	beq.n	8006b6a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8006bb2:	2003      	movs	r0, #3
 8006bb4:	e7e1      	b.n	8006b7a <UART_CheckIdleState+0x34>

08006bb6 <HAL_UART_Init>:
  if(huart == NULL)
 8006bb6:	b378      	cbz	r0, 8006c18 <HAL_UART_Init+0x62>
{
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8006bbc:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8006bc0:	b30b      	cbz	r3, 8006c06 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006bc2:	2324      	movs	r3, #36	; 0x24
 8006bc4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 8006bc8:	6822      	ldr	r2, [r4, #0]
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff fa36 	bl	8006044 <UART_SetConfig>
 8006bd8:	2801      	cmp	r0, #1
 8006bda:	d01f      	beq.n	8006c1c <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bde:	b9bb      	cbnz	r3, 8006c10 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	6853      	ldr	r3, [r2, #4]
 8006be4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006be8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bea:	6822      	ldr	r2, [r4, #0]
 8006bec:	6893      	ldr	r3, [r2, #8]
 8006bee:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006bf2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006bf4:	6822      	ldr	r2, [r4, #0]
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	f043 0301 	orr.w	r3, r3, #1
 8006bfc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff ffa1 	bl	8006b46 <UART_CheckIdleState>
 8006c04:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006c06:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8006c0a:	f7fb f9fd 	bl	8002008 <HAL_UART_MspInit>
 8006c0e:	e7d8      	b.n	8006bc2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006c10:	4620      	mov	r0, r4
 8006c12:	f7ff fe9b 	bl	800694c <UART_AdvFeatureConfig>
 8006c16:	e7e3      	b.n	8006be0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006c18:	2001      	movs	r0, #1
 8006c1a:	4770      	bx	lr
}
 8006c1c:	bd10      	pop	{r4, pc}

08006c1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c1e:	4770      	bx	lr

08006c20 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8006c20:	2884      	cmp	r0, #132	; 0x84
 8006c22:	d001      	beq.n	8006c28 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8006c24:	3003      	adds	r0, #3
 8006c26:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c28:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8006c2a:	4770      	bx	lr

08006c2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c2c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006c2e:	f000 fef1 	bl	8007a14 <vTaskStartScheduler>
  
  return osOK;
}
 8006c32:	2000      	movs	r0, #0
 8006c34:	bd08      	pop	{r3, pc}

08006c36 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c3c:	6844      	ldr	r4, [r0, #4]
 8006c3e:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c40:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c42:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006c46:	f7ff ffeb 	bl	8006c20 <makeFreeRtosPriority>
 8006c4a:	ab03      	add	r3, sp, #12
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	9000      	str	r0, [sp, #0]
 8006c50:	463b      	mov	r3, r7
 8006c52:	b2b2      	uxth	r2, r6
 8006c54:	4629      	mov	r1, r5
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 feaa 	bl	80079b0 <xTaskCreate>
 8006c5c:	2801      	cmp	r0, #1
 8006c5e:	d102      	bne.n	8006c66 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c60:	9803      	ldr	r0, [sp, #12]
}
 8006c62:	b005      	add	sp, #20
 8006c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8006c66:	2000      	movs	r0, #0
 8006c68:	e7fb      	b.n	8006c62 <osThreadCreate+0x2c>

08006c6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006c6a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	b900      	cbnz	r0, 8006c72 <osDelay+0x8>
 8006c70:	2301      	movs	r3, #1
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f82a 	bl	8007ccc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c78:	2000      	movs	r0, #0
 8006c7a:	bd08      	pop	{r3, pc}

08006c7c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006c7c:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006c7e:	2200      	movs	r2, #0
 8006c80:	6841      	ldr	r1, [r0, #4]
 8006c82:	6800      	ldr	r0, [r0, #0]
 8006c84:	f000 fbdc 	bl	8007440 <xQueueGenericCreate>
#endif
}
 8006c88:	bd08      	pop	{r3, pc}

08006c8a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006c8a:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006c8c:	f001 f99e 	bl	8007fcc <xTaskGetSchedulerState>
 8006c90:	2801      	cmp	r0, #1
 8006c92:	d001      	beq.n	8006c98 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8006c94:	f000 fa3e 	bl	8007114 <xPortSysTickHandler>
 8006c98:	bd08      	pop	{r3, pc}
	...

08006c9c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c9c:	4a12      	ldr	r2, [pc, #72]	; (8006ce8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c9e:	f012 0f07 	tst.w	r2, #7
 8006ca2:	d01e      	beq.n	8006ce2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ca4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006caa:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8006cae:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cb0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cb2:	480e      	ldr	r0, [pc, #56]	; (8006cec <prvHeapInit+0x50>)
 8006cb4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cba:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006cbc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cbe:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006cc2:	480b      	ldr	r0, [pc, #44]	; (8006cf0 <prvHeapInit+0x54>)
 8006cc4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006cc6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cc8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cca:	1a99      	subs	r1, r3, r2
 8006ccc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cce:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cd0:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <prvHeapInit+0x58>)
 8006cd2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cd4:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <prvHeapInit+0x5c>)
 8006cd6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cdc:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <prvHeapInit+0x60>)
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ce2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ce6:	e7e4      	b.n	8006cb2 <prvHeapInit+0x16>
 8006ce8:	2000012c 	.word	0x2000012c
 8006cec:	20003d38 	.word	0x20003d38
 8006cf0:	20000128 	.word	0x20000128
 8006cf4:	20003d34 	.word	0x20003d34
 8006cf8:	20003d30 	.word	0x20003d30
 8006cfc:	20003d2c 	.word	0x20003d2c

08006d00 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d00:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d02:	4b13      	ldr	r3, [pc, #76]	; (8006d50 <prvInsertBlockIntoFreeList+0x50>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4282      	cmp	r2, r0
 8006d08:	d31b      	bcc.n	8006d42 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d0a:	6859      	ldr	r1, [r3, #4]
 8006d0c:	185c      	adds	r4, r3, r1
 8006d0e:	42a0      	cmp	r0, r4
 8006d10:	d103      	bne.n	8006d1a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d12:	6840      	ldr	r0, [r0, #4]
 8006d14:	4401      	add	r1, r0
 8006d16:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d18:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d1a:	6841      	ldr	r1, [r0, #4]
 8006d1c:	1844      	adds	r4, r0, r1
 8006d1e:	42a2      	cmp	r2, r4
 8006d20:	d113      	bne.n	8006d4a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d22:	4c0c      	ldr	r4, [pc, #48]	; (8006d54 <prvInsertBlockIntoFreeList+0x54>)
 8006d24:	6824      	ldr	r4, [r4, #0]
 8006d26:	42a2      	cmp	r2, r4
 8006d28:	d00d      	beq.n	8006d46 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d2a:	6852      	ldr	r2, [r2, #4]
 8006d2c:	4411      	add	r1, r2
 8006d2e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	6812      	ldr	r2, [r2, #0]
 8006d34:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d36:	4298      	cmp	r0, r3
 8006d38:	d000      	beq.n	8006d3c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d3a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d40:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d42:	4613      	mov	r3, r2
 8006d44:	e7de      	b.n	8006d04 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d46:	6004      	str	r4, [r0, #0]
 8006d48:	e7f5      	b.n	8006d36 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d4a:	6002      	str	r2, [r0, #0]
 8006d4c:	e7f3      	b.n	8006d36 <prvInsertBlockIntoFreeList+0x36>
 8006d4e:	bf00      	nop
 8006d50:	20003d38 	.word	0x20003d38
 8006d54:	20000128 	.word	0x20000128

08006d58 <pvPortMalloc>:
{
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006d5c:	f000 fe9c 	bl	8007a98 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006d60:	4b3d      	ldr	r3, [pc, #244]	; (8006e58 <pvPortMalloc+0x100>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	b1cb      	cbz	r3, 8006d9a <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d66:	4b3d      	ldr	r3, [pc, #244]	; (8006e5c <pvPortMalloc+0x104>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	421c      	tst	r4, r3
 8006d6c:	d169      	bne.n	8006e42 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 8006d6e:	b1bc      	cbz	r4, 8006da0 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8006d70:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d72:	f014 0f07 	tst.w	r4, #7
 8006d76:	d013      	beq.n	8006da0 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d78:	f024 0407 	bic.w	r4, r4, #7
 8006d7c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d7e:	f004 0307 	and.w	r3, r4, #7
 8006d82:	b16b      	cbz	r3, 8006da0 <pvPortMalloc+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	b672      	cpsid	i
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	b662      	cpsie	i
 8006d98:	e7fe      	b.n	8006d98 <pvPortMalloc+0x40>
			prvHeapInit();
 8006d9a:	f7ff ff7f 	bl	8006c9c <prvHeapInit>
 8006d9e:	e7e2      	b.n	8006d66 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006da0:	2c00      	cmp	r4, #0
 8006da2:	d050      	beq.n	8006e46 <pvPortMalloc+0xee>
 8006da4:	4b2e      	ldr	r3, [pc, #184]	; (8006e60 <pvPortMalloc+0x108>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429c      	cmp	r4, r3
 8006daa:	d84e      	bhi.n	8006e4a <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 8006dac:	4b2d      	ldr	r3, [pc, #180]	; (8006e64 <pvPortMalloc+0x10c>)
 8006dae:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006db0:	e001      	b.n	8006db6 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 8006db2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006db4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006db6:	686a      	ldr	r2, [r5, #4]
 8006db8:	4294      	cmp	r4, r2
 8006dba:	d902      	bls.n	8006dc2 <pvPortMalloc+0x6a>
 8006dbc:	682a      	ldr	r2, [r5, #0]
 8006dbe:	2a00      	cmp	r2, #0
 8006dc0:	d1f7      	bne.n	8006db2 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 8006dc2:	4a25      	ldr	r2, [pc, #148]	; (8006e58 <pvPortMalloc+0x100>)
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	4295      	cmp	r5, r2
 8006dc8:	d041      	beq.n	8006e4e <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dca:	681e      	ldr	r6, [r3, #0]
 8006dcc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dce:	682a      	ldr	r2, [r5, #0]
 8006dd0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dd2:	686b      	ldr	r3, [r5, #4]
 8006dd4:	1b1b      	subs	r3, r3, r4
 8006dd6:	2b10      	cmp	r3, #16
 8006dd8:	d912      	bls.n	8006e00 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dda:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ddc:	f010 0f07 	tst.w	r0, #7
 8006de0:	d00a      	beq.n	8006df8 <pvPortMalloc+0xa0>
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	b672      	cpsid	i
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	b662      	cpsie	i
 8006df6:	e7fe      	b.n	8006df6 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006df8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dfa:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dfc:	f7ff ff80 	bl	8006d00 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e00:	686a      	ldr	r2, [r5, #4]
 8006e02:	4917      	ldr	r1, [pc, #92]	; (8006e60 <pvPortMalloc+0x108>)
 8006e04:	680b      	ldr	r3, [r1, #0]
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e0a:	4917      	ldr	r1, [pc, #92]	; (8006e68 <pvPortMalloc+0x110>)
 8006e0c:	6809      	ldr	r1, [r1, #0]
 8006e0e:	428b      	cmp	r3, r1
 8006e10:	d201      	bcs.n	8006e16 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e12:	4915      	ldr	r1, [pc, #84]	; (8006e68 <pvPortMalloc+0x110>)
 8006e14:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e16:	4b11      	ldr	r3, [pc, #68]	; (8006e5c <pvPortMalloc+0x104>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006e22:	f000 fed3 	bl	8007bcc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e26:	f016 0f07 	tst.w	r6, #7
 8006e2a:	d012      	beq.n	8006e52 <pvPortMalloc+0xfa>
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	b672      	cpsid	i
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	b662      	cpsie	i
 8006e40:	e7fe      	b.n	8006e40 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8006e42:	2600      	movs	r6, #0
 8006e44:	e7ed      	b.n	8006e22 <pvPortMalloc+0xca>
 8006e46:	2600      	movs	r6, #0
 8006e48:	e7eb      	b.n	8006e22 <pvPortMalloc+0xca>
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	e7e9      	b.n	8006e22 <pvPortMalloc+0xca>
 8006e4e:	2600      	movs	r6, #0
 8006e50:	e7e7      	b.n	8006e22 <pvPortMalloc+0xca>
}
 8006e52:	4630      	mov	r0, r6
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
 8006e56:	bf00      	nop
 8006e58:	20000128 	.word	0x20000128
 8006e5c:	20003d2c 	.word	0x20003d2c
 8006e60:	20003d30 	.word	0x20003d30
 8006e64:	20003d38 	.word	0x20003d38
 8006e68:	20003d34 	.word	0x20003d34

08006e6c <vPortFree>:
	if( pv != NULL )
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d034      	beq.n	8006eda <vPortFree+0x6e>
{
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006e74:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e78:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006e7c:	4917      	ldr	r1, [pc, #92]	; (8006edc <vPortFree+0x70>)
 8006e7e:	6809      	ldr	r1, [r1, #0]
 8006e80:	420a      	tst	r2, r1
 8006e82:	d10a      	bne.n	8006e9a <vPortFree+0x2e>
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	b672      	cpsid	i
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	b662      	cpsie	i
 8006e98:	e7fe      	b.n	8006e98 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e9a:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8006e9e:	b150      	cbz	r0, 8006eb6 <vPortFree+0x4a>
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	b672      	cpsid	i
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	b662      	cpsie	i
 8006eb4:	e7fe      	b.n	8006eb4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eb6:	ea22 0201 	bic.w	r2, r2, r1
 8006eba:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8006ebe:	f000 fdeb 	bl	8007a98 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ec2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006ec6:	4a06      	ldr	r2, [pc, #24]	; (8006ee0 <vPortFree+0x74>)
 8006ec8:	6813      	ldr	r3, [r2, #0]
 8006eca:	440b      	add	r3, r1
 8006ecc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f7ff ff16 	bl	8006d00 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006ed4:	f000 fe7a 	bl	8007bcc <xTaskResumeAll>
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	4770      	bx	lr
 8006edc:	20003d2c 	.word	0x20003d2c
 8006ee0:	20003d30 	.word	0x20003d30

08006ee4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee4:	f100 0308 	add.w	r3, r0, #8
 8006ee8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	6003      	str	r3, [r0, #0]
 8006ef8:	4770      	bx	lr

08006efa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	6103      	str	r3, [r0, #16]
 8006efe:	4770      	bx	lr

08006f00 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f00:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f02:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f0e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006f10:	6803      	ldr	r3, [r0, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	4770      	bx	lr

08006f18 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f18:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f1a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f1c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006f20:	d002      	beq.n	8006f28 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f22:	f100 0208 	add.w	r2, r0, #8
 8006f26:	e002      	b.n	8006f2e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f28:	6902      	ldr	r2, [r0, #16]
 8006f2a:	e004      	b.n	8006f36 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6853      	ldr	r3, [r2, #4]
 8006f30:	681c      	ldr	r4, [r3, #0]
 8006f32:	42a5      	cmp	r5, r4
 8006f34:	d2fa      	bcs.n	8006f2c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f36:	6853      	ldr	r3, [r2, #4]
 8006f38:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f3a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f3c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f3e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f40:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006f42:	6803      	ldr	r3, [r0, #0]
 8006f44:	3301      	adds	r3, #1
 8006f46:	6003      	str	r3, [r0, #0]
}
 8006f48:	bc30      	pop	{r4, r5}
 8006f4a:	4770      	bx	lr

08006f4c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006f4c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f4e:	6842      	ldr	r2, [r0, #4]
 8006f50:	6881      	ldr	r1, [r0, #8]
 8006f52:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f54:	6882      	ldr	r2, [r0, #8]
 8006f56:	6841      	ldr	r1, [r0, #4]
 8006f58:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	4290      	cmp	r0, r2
 8006f5e:	d005      	beq.n	8006f6c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006f60:	2200      	movs	r2, #0
 8006f62:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	3801      	subs	r0, #1
 8006f68:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8006f6a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f6c:	6882      	ldr	r2, [r0, #8]
 8006f6e:	605a      	str	r2, [r3, #4]
 8006f70:	e7f6      	b.n	8006f60 <uxListRemove+0x14>
	...

08006f74 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <prvTaskExitError+0x38>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f7c:	d00a      	beq.n	8006f94 <prvTaskExitError+0x20>
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	b672      	cpsid	i
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	b662      	cpsie	i
 8006f92:	e7fe      	b.n	8006f92 <prvTaskExitError+0x1e>
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	b672      	cpsid	i
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	b662      	cpsie	i
 8006fa8:	e7fe      	b.n	8006fa8 <prvTaskExitError+0x34>
 8006faa:	bf00      	nop
 8006fac:	2000009c 	.word	0x2000009c

08006fb0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006fb0:	4806      	ldr	r0, [pc, #24]	; (8006fcc <prvPortStartFirstTask+0x1c>)
 8006fb2:	6800      	ldr	r0, [r0, #0]
 8006fb4:	6800      	ldr	r0, [r0, #0]
 8006fb6:	f380 8808 	msr	MSP, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
 8006fca:	0000      	.short	0x0000
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fe0 <vPortEnableVFP+0x10>
 8006fd4:	6801      	ldr	r1, [r0, #0]
 8006fd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fda:	6001      	str	r1, [r0, #0]
 8006fdc:	4770      	bx	lr
 8006fde:	0000      	.short	0x0000
 8006fe0:	e000ed88 	.word	0xe000ed88

08006fe4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fe8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fec:	f021 0101 	bic.w	r1, r1, #1
 8006ff0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <pxPortInitialiseStack+0x28>)
 8006ff6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ffa:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006ffe:	f06f 0302 	mvn.w	r3, #2
 8007002:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007006:	3844      	subs	r0, #68	; 0x44
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	08006f75 	.word	0x08006f75

08007010 <SVC_Handler>:
	__asm volatile (
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <pxCurrentTCBConst2>)
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	6808      	ldr	r0, [r1, #0]
 8007016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701a:	f380 8809 	msr	PSP, r0
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8811 	msr	BASEPRI, r0
 800702a:	4770      	bx	lr
 800702c:	f3af 8000 	nop.w

08007030 <pxCurrentTCBConst2>:
 8007030:	20003d48 	.word	0x20003d48

08007034 <vPortEnterCritical>:
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	b672      	cpsid	i
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	b662      	cpsie	i
	uxCriticalNesting++;
 8007048:	4a0b      	ldr	r2, [pc, #44]	; (8007078 <vPortEnterCritical+0x44>)
 800704a:	6813      	ldr	r3, [r2, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007050:	2b01      	cmp	r3, #1
 8007052:	d10f      	bne.n	8007074 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007054:	4b09      	ldr	r3, [pc, #36]	; (800707c <vPortEnterCritical+0x48>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f013 0fff 	tst.w	r3, #255	; 0xff
 800705c:	d00a      	beq.n	8007074 <vPortEnterCritical+0x40>
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	b672      	cpsid	i
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	b662      	cpsie	i
 8007072:	e7fe      	b.n	8007072 <vPortEnterCritical+0x3e>
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	2000009c 	.word	0x2000009c
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <vPortExitCritical+0x2c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	b953      	cbnz	r3, 800709c <vPortExitCritical+0x1c>
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	b672      	cpsid	i
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	b662      	cpsie	i
 800709a:	e7fe      	b.n	800709a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800709c:	3b01      	subs	r3, #1
 800709e:	4a03      	ldr	r2, [pc, #12]	; (80070ac <vPortExitCritical+0x2c>)
 80070a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070a2:	b90b      	cbnz	r3, 80070a8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	2000009c 	.word	0x2000009c

080070b0 <PendSV_Handler>:
	__asm volatile
 80070b0:	f3ef 8009 	mrs	r0, PSP
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	4b15      	ldr	r3, [pc, #84]	; (8007110 <pxCurrentTCBConst>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	f01e 0f10 	tst.w	lr, #16
 80070c0:	bf08      	it	eq
 80070c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ca:	6010      	str	r0, [r2, #0]
 80070cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80070d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070d4:	b672      	cpsid	i
 80070d6:	f380 8811 	msr	BASEPRI, r0
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	b662      	cpsie	i
 80070e4:	f000 fe5e 	bl	8007da4 <vTaskSwitchContext>
 80070e8:	f04f 0000 	mov.w	r0, #0
 80070ec:	f380 8811 	msr	BASEPRI, r0
 80070f0:	bc08      	pop	{r3}
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	6808      	ldr	r0, [r1, #0]
 80070f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	f01e 0f10 	tst.w	lr, #16
 80070fe:	bf08      	it	eq
 8007100:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007104:	f380 8809 	msr	PSP, r0
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop

08007110 <pxCurrentTCBConst>:
 8007110:	20003d48 	.word	0x20003d48

08007114 <xPortSysTickHandler>:
{
 8007114:	b508      	push	{r3, lr}
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	b672      	cpsid	i
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800712a:	f000 fcbd 	bl	8007aa8 <xTaskIncrementTick>
 800712e:	b118      	cbz	r0, 8007138 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <xPortSysTickHandler+0x2c>)
 8007136:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007138:	2300      	movs	r3, #0
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	bd08      	pop	{r3, pc}
 8007140:	e000ed04 	.word	0xe000ed04

08007144 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007144:	4b06      	ldr	r3, [pc, #24]	; (8007160 <vPortSetupTimerInterrupt+0x1c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a06      	ldr	r2, [pc, #24]	; (8007164 <vPortSetupTimerInterrupt+0x20>)
 800714a:	fba2 2303 	umull	r2, r3, r2, r3
 800714e:	099b      	lsrs	r3, r3, #6
 8007150:	3b01      	subs	r3, #1
 8007152:	4a05      	ldr	r2, [pc, #20]	; (8007168 <vPortSetupTimerInterrupt+0x24>)
 8007154:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007156:	2207      	movs	r2, #7
 8007158:	4b04      	ldr	r3, [pc, #16]	; (800716c <vPortSetupTimerInterrupt+0x28>)
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20000090 	.word	0x20000090
 8007164:	10624dd3 	.word	0x10624dd3
 8007168:	e000e014 	.word	0xe000e014
 800716c:	e000e010 	.word	0xe000e010

08007170 <xPortStartScheduler>:
{
 8007170:	b500      	push	{lr}
 8007172:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007174:	4b22      	ldr	r3, [pc, #136]	; (8007200 <xPortStartScheduler+0x90>)
 8007176:	781a      	ldrb	r2, [r3, #0]
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800717c:	22ff      	movs	r2, #255	; 0xff
 800717e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007188:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800718c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007190:	4a1c      	ldr	r2, [pc, #112]	; (8007204 <xPortStartScheduler+0x94>)
 8007192:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007194:	2207      	movs	r2, #7
 8007196:	4b1c      	ldr	r3, [pc, #112]	; (8007208 <xPortStartScheduler+0x98>)
 8007198:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800719a:	e009      	b.n	80071b0 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800719c:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <xPortStartScheduler+0x98>)
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071b8:	d1f0      	bne.n	800719c <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071ba:	4a13      	ldr	r2, [pc, #76]	; (8007208 <xPortStartScheduler+0x98>)
 80071bc:	6813      	ldr	r3, [r2, #0]
 80071be:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071c4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4a0d      	ldr	r2, [pc, #52]	; (8007200 <xPortStartScheduler+0x90>)
 80071cc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071ce:	4b0f      	ldr	r3, [pc, #60]	; (800720c <xPortStartScheduler+0x9c>)
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80071d6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80071de:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80071e0:	f7ff ffb0 	bl	8007144 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80071e4:	2200      	movs	r2, #0
 80071e6:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <xPortStartScheduler+0xa0>)
 80071e8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80071ea:	f7ff fef1 	bl	8006fd0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ee:	4a09      	ldr	r2, [pc, #36]	; (8007214 <xPortStartScheduler+0xa4>)
 80071f0:	6813      	ldr	r3, [r2, #0]
 80071f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071f6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80071f8:	f7ff feda 	bl	8006fb0 <prvPortStartFirstTask>
	prvTaskExitError();
 80071fc:	f7ff feba 	bl	8006f74 <prvTaskExitError>
 8007200:	e000e400 	.word	0xe000e400
 8007204:	20003d40 	.word	0x20003d40
 8007208:	20003d44 	.word	0x20003d44
 800720c:	e000ed20 	.word	0xe000ed20
 8007210:	2000009c 	.word	0x2000009c
 8007214:	e000ef34 	.word	0xe000ef34

08007218 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007218:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800721c:	2b0f      	cmp	r3, #15
 800721e:	d911      	bls.n	8007244 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007220:	4a12      	ldr	r2, [pc, #72]	; (800726c <vPortValidateInterruptPriority+0x54>)
 8007222:	5c9b      	ldrb	r3, [r3, r2]
 8007224:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007226:	4a12      	ldr	r2, [pc, #72]	; (8007270 <vPortValidateInterruptPriority+0x58>)
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	4293      	cmp	r3, r2
 800722c:	d20a      	bcs.n	8007244 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	b672      	cpsid	i
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	b662      	cpsie	i
 8007242:	e7fe      	b.n	8007242 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007244:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <vPortValidateInterruptPriority+0x5c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800724c:	4a0a      	ldr	r2, [pc, #40]	; (8007278 <vPortValidateInterruptPriority+0x60>)
 800724e:	6812      	ldr	r2, [r2, #0]
 8007250:	4293      	cmp	r3, r2
 8007252:	d90a      	bls.n	800726a <vPortValidateInterruptPriority+0x52>
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	b672      	cpsid	i
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	b662      	cpsie	i
 8007268:	e7fe      	b.n	8007268 <vPortValidateInterruptPriority+0x50>
 800726a:	4770      	bx	lr
 800726c:	e000e3f0 	.word	0xe000e3f0
 8007270:	20003d40 	.word	0x20003d40
 8007274:	e000ed0c 	.word	0xe000ed0c
 8007278:	20003d44 	.word	0x20003d44

0800727c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800727c:	b510      	push	{r4, lr}
 800727e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007280:	f7ff fed8 	bl	8007034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007286:	b123      	cbz	r3, 8007292 <prvIsQueueEmpty+0x16>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8007288:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800728a:	f7ff fef9 	bl	8007080 <vPortExitCritical>

	return xReturn;
}
 800728e:	4620      	mov	r0, r4
 8007290:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007292:	2401      	movs	r4, #1
 8007294:	e7f9      	b.n	800728a <prvIsQueueEmpty+0xe>

08007296 <prvCopyDataToQueue>:
{
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	4604      	mov	r4, r0
 800729a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800729c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800729e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80072a0:	b94a      	cbnz	r2, 80072b6 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072a2:	6803      	ldr	r3, [r0, #0]
 80072a4:	bb53      	cbnz	r3, 80072fc <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80072a6:	6840      	ldr	r0, [r0, #4]
 80072a8:	f000 fef2 	bl	8008090 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80072ac:	2300      	movs	r3, #0
 80072ae:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80072b0:	3501      	adds	r5, #1
 80072b2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80072b6:	b96e      	cbnz	r6, 80072d4 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80072b8:	6880      	ldr	r0, [r0, #8]
 80072ba:	f000 ff79 	bl	80081b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80072be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072c0:	68a3      	ldr	r3, [r4, #8]
 80072c2:	4413      	add	r3, r2
 80072c4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072c6:	6862      	ldr	r2, [r4, #4]
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d319      	bcc.n	8007300 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80072d0:	2000      	movs	r0, #0
 80072d2:	e7ed      	b.n	80072b0 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d4:	68c0      	ldr	r0, [r0, #12]
 80072d6:	f000 ff6b 	bl	80081b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80072da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072dc:	425b      	negs	r3, r3
 80072de:	68e2      	ldr	r2, [r4, #12]
 80072e0:	441a      	add	r2, r3
 80072e2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072e4:	6821      	ldr	r1, [r4, #0]
 80072e6:	428a      	cmp	r2, r1
 80072e8:	d202      	bcs.n	80072f0 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80072ea:	6862      	ldr	r2, [r4, #4]
 80072ec:	4413      	add	r3, r2
 80072ee:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80072f0:	2e02      	cmp	r6, #2
 80072f2:	d107      	bne.n	8007304 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072f4:	b145      	cbz	r5, 8007308 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80072f6:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80072f8:	2000      	movs	r0, #0
 80072fa:	e7d9      	b.n	80072b0 <prvCopyDataToQueue+0x1a>
 80072fc:	2000      	movs	r0, #0
 80072fe:	e7d7      	b.n	80072b0 <prvCopyDataToQueue+0x1a>
 8007300:	2000      	movs	r0, #0
 8007302:	e7d5      	b.n	80072b0 <prvCopyDataToQueue+0x1a>
 8007304:	2000      	movs	r0, #0
 8007306:	e7d3      	b.n	80072b0 <prvCopyDataToQueue+0x1a>
 8007308:	2000      	movs	r0, #0
 800730a:	e7d1      	b.n	80072b0 <prvCopyDataToQueue+0x1a>

0800730c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800730c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800730e:	b172      	cbz	r2, 800732e <prvCopyDataFromQueue+0x22>
{
 8007310:	b510      	push	{r4, lr}
 8007312:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007314:	68c4      	ldr	r4, [r0, #12]
 8007316:	4414      	add	r4, r2
 8007318:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800731a:	6840      	ldr	r0, [r0, #4]
 800731c:	4284      	cmp	r4, r0
 800731e:	d301      	bcc.n	8007324 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	60d8      	str	r0, [r3, #12]
 8007324:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007326:	68d9      	ldr	r1, [r3, #12]
 8007328:	f000 ff42 	bl	80081b0 <memcpy>
 800732c:	bd10      	pop	{r4, pc}
 800732e:	4770      	bx	lr

08007330 <prvUnlockQueue>:
{
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007334:	f7ff fe7e 	bl	8007034 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007338:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800733c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800733e:	e001      	b.n	8007344 <prvUnlockQueue+0x14>
			--cTxLock;
 8007340:	3c01      	subs	r4, #1
 8007342:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007344:	2c00      	cmp	r4, #0
 8007346:	dd0a      	ble.n	800735e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007348:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800734a:	b143      	cbz	r3, 800735e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800734c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007350:	f000 fd92 	bl	8007e78 <xTaskRemoveFromEventList>
 8007354:	2800      	cmp	r0, #0
 8007356:	d0f3      	beq.n	8007340 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8007358:	f000 fe32 	bl	8007fc0 <vTaskMissedYield>
 800735c:	e7f0      	b.n	8007340 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800735e:	23ff      	movs	r3, #255	; 0xff
 8007360:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007364:	f7ff fe8c 	bl	8007080 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007368:	f7ff fe64 	bl	8007034 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800736c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007370:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007372:	e001      	b.n	8007378 <prvUnlockQueue+0x48>
				--cRxLock;
 8007374:	3c01      	subs	r4, #1
 8007376:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007378:	2c00      	cmp	r4, #0
 800737a:	dd0a      	ble.n	8007392 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800737c:	692b      	ldr	r3, [r5, #16]
 800737e:	b143      	cbz	r3, 8007392 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007380:	f105 0010 	add.w	r0, r5, #16
 8007384:	f000 fd78 	bl	8007e78 <xTaskRemoveFromEventList>
 8007388:	2800      	cmp	r0, #0
 800738a:	d0f3      	beq.n	8007374 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800738c:	f000 fe18 	bl	8007fc0 <vTaskMissedYield>
 8007390:	e7f0      	b.n	8007374 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8007392:	23ff      	movs	r3, #255	; 0xff
 8007394:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007398:	f7ff fe72 	bl	8007080 <vPortExitCritical>
 800739c:	bd38      	pop	{r3, r4, r5, pc}
	...

080073a0 <xQueueGenericReset>:
{
 80073a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80073a2:	b330      	cbz	r0, 80073f2 <xQueueGenericReset+0x52>
 80073a4:	4604      	mov	r4, r0
 80073a6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80073a8:	f7ff fe44 	bl	8007034 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80073ac:	6821      	ldr	r1, [r4, #0]
 80073ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80073b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073b2:	fb03 1002 	mla	r0, r3, r2, r1
 80073b6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073b8:	2000      	movs	r0, #0
 80073ba:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073bc:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80073be:	3a01      	subs	r2, #1
 80073c0:	fb02 1303 	mla	r3, r2, r3, r1
 80073c4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073c6:	23ff      	movs	r3, #255	; 0xff
 80073c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80073d0:	b9d5      	cbnz	r5, 8007408 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	b303      	cbz	r3, 8007418 <xQueueGenericReset+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d6:	f104 0010 	add.w	r0, r4, #16
 80073da:	f000 fd4d 	bl	8007e78 <xTaskRemoveFromEventList>
 80073de:	b1d8      	cbz	r0, 8007418 <xQueueGenericReset+0x78>
					queueYIELD_IF_USING_PREEMPTION();
 80073e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e4:	4b0e      	ldr	r3, [pc, #56]	; (8007420 <xQueueGenericReset+0x80>)
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	e012      	b.n	8007418 <xQueueGenericReset+0x78>
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	b672      	cpsid	i
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	b662      	cpsie	i
 8007406:	e7fe      	b.n	8007406 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007408:	f104 0010 	add.w	r0, r4, #16
 800740c:	f7ff fd6a 	bl	8006ee4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007410:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007414:	f7ff fd66 	bl	8006ee4 <vListInitialise>
	taskEXIT_CRITICAL();
 8007418:	f7ff fe32 	bl	8007080 <vPortExitCritical>
}
 800741c:	2001      	movs	r0, #1
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <prvInitialiseNewQueue>:
{
 8007424:	b510      	push	{r4, lr}
 8007426:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007428:	460c      	mov	r4, r1
 800742a:	b139      	cbz	r1, 800743c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800742c:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800742e:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007430:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007432:	2101      	movs	r1, #1
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff ffb3 	bl	80073a0 <xQueueGenericReset>
 800743a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800743c:	601b      	str	r3, [r3, #0]
 800743e:	e7f6      	b.n	800742e <prvInitialiseNewQueue+0xa>

08007440 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007440:	b950      	cbnz	r0, 8007458 <xQueueGenericCreate+0x18>
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	b672      	cpsid	i
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	b662      	cpsie	i
 8007456:	e7fe      	b.n	8007456 <xQueueGenericCreate+0x16>
	{
 8007458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745a:	b083      	sub	sp, #12
 800745c:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800745e:	b111      	cbz	r1, 8007466 <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007460:	fb01 f000 	mul.w	r0, r1, r0
 8007464:	e000      	b.n	8007468 <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 8007466:	2000      	movs	r0, #0
 8007468:	4617      	mov	r7, r2
 800746a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800746c:	3048      	adds	r0, #72	; 0x48
 800746e:	f7ff fc73 	bl	8006d58 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007472:	4606      	mov	r6, r0
 8007474:	b138      	cbz	r0, 8007486 <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007476:	9000      	str	r0, [sp, #0]
 8007478:	463b      	mov	r3, r7
 800747a:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800747e:	4621      	mov	r1, r4
 8007480:	4628      	mov	r0, r5
 8007482:	f7ff ffcf 	bl	8007424 <prvInitialiseNewQueue>
	}
 8007486:	4630      	mov	r0, r6
 8007488:	b003      	add	sp, #12
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800748c <xQueueGenericSendFromISR>:
{
 800748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007490:	b170      	cbz	r0, 80074b0 <xQueueGenericSendFromISR+0x24>
 8007492:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007494:	b1b9      	cbz	r1, 80074c6 <xQueueGenericSendFromISR+0x3a>
 8007496:	2001      	movs	r0, #1
 8007498:	b9d8      	cbnz	r0, 80074d2 <xQueueGenericSendFromISR+0x46>
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	b672      	cpsid	i
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	b662      	cpsie	i
 80074ae:	e7fe      	b.n	80074ae <xQueueGenericSendFromISR+0x22>
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	b672      	cpsid	i
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	b662      	cpsie	i
 80074c4:	e7fe      	b.n	80074c4 <xQueueGenericSendFromISR+0x38>
 80074c6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80074c8:	b908      	cbnz	r0, 80074ce <xQueueGenericSendFromISR+0x42>
 80074ca:	2001      	movs	r0, #1
 80074cc:	e7e4      	b.n	8007498 <xQueueGenericSendFromISR+0xc>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e7e2      	b.n	8007498 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d00b      	beq.n	80074ee <xQueueGenericSendFromISR+0x62>
 80074d6:	b978      	cbnz	r0, 80074f8 <xQueueGenericSendFromISR+0x6c>
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	b672      	cpsid	i
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	b662      	cpsie	i
 80074ec:	e7fe      	b.n	80074ec <xQueueGenericSendFromISR+0x60>
 80074ee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80074f0:	2d01      	cmp	r5, #1
 80074f2:	d0f0      	beq.n	80074d6 <xQueueGenericSendFromISR+0x4a>
 80074f4:	2000      	movs	r0, #0
 80074f6:	e7ee      	b.n	80074d6 <xQueueGenericSendFromISR+0x4a>
 80074f8:	461f      	mov	r7, r3
 80074fa:	4690      	mov	r8, r2
 80074fc:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074fe:	f7ff fe8b 	bl	8007218 <vPortValidateInterruptPriority>
	__asm volatile
 8007502:	f3ef 8611 	mrs	r6, BASEPRI
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	b672      	cpsid	i
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800751a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800751c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800751e:	429a      	cmp	r2, r3
 8007520:	d301      	bcc.n	8007526 <xQueueGenericSendFromISR+0x9a>
 8007522:	2f02      	cmp	r7, #2
 8007524:	d121      	bne.n	800756a <xQueueGenericSendFromISR+0xde>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007526:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800752a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800752c:	463a      	mov	r2, r7
 800752e:	4649      	mov	r1, r9
 8007530:	4620      	mov	r0, r4
 8007532:	f7ff feb0 	bl	8007296 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007536:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800753a:	d110      	bne.n	800755e <xQueueGenericSendFromISR+0xd2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800753c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800753e:	b1b3      	cbz	r3, 800756e <xQueueGenericSendFromISR+0xe2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007540:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007544:	f000 fc98 	bl	8007e78 <xTaskRemoveFromEventList>
 8007548:	b198      	cbz	r0, 8007572 <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 800754a:	f1b8 0f00 	cmp.w	r8, #0
 800754e:	d012      	beq.n	8007576 <xQueueGenericSendFromISR+0xea>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007550:	2001      	movs	r0, #1
 8007552:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007556:	f386 8811 	msr	BASEPRI, r6
}
 800755a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800755e:	1c6b      	adds	r3, r5, #1
 8007560:	b25b      	sxtb	r3, r3
 8007562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007566:	2001      	movs	r0, #1
 8007568:	e7f5      	b.n	8007556 <xQueueGenericSendFromISR+0xca>
			xReturn = errQUEUE_FULL;
 800756a:	2000      	movs	r0, #0
 800756c:	e7f3      	b.n	8007556 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 800756e:	2001      	movs	r0, #1
 8007570:	e7f1      	b.n	8007556 <xQueueGenericSendFromISR+0xca>
 8007572:	2001      	movs	r0, #1
 8007574:	e7ef      	b.n	8007556 <xQueueGenericSendFromISR+0xca>
 8007576:	2001      	movs	r0, #1
 8007578:	e7ed      	b.n	8007556 <xQueueGenericSendFromISR+0xca>
	...

0800757c <xQueueGenericReceive>:
{
 800757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007584:	b170      	cbz	r0, 80075a4 <xQueueGenericReceive+0x28>
 8007586:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007588:	b1b9      	cbz	r1, 80075ba <xQueueGenericReceive+0x3e>
 800758a:	2501      	movs	r5, #1
 800758c:	b9dd      	cbnz	r5, 80075c6 <xQueueGenericReceive+0x4a>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	b672      	cpsid	i
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	b662      	cpsie	i
 80075a2:	e7fe      	b.n	80075a2 <xQueueGenericReceive+0x26>
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	b672      	cpsid	i
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	b662      	cpsie	i
 80075b8:	e7fe      	b.n	80075b8 <xQueueGenericReceive+0x3c>
 80075ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80075bc:	b90a      	cbnz	r2, 80075c2 <xQueueGenericReceive+0x46>
 80075be:	2501      	movs	r5, #1
 80075c0:	e7e4      	b.n	800758c <xQueueGenericReceive+0x10>
 80075c2:	2500      	movs	r5, #0
 80075c4:	e7e2      	b.n	800758c <xQueueGenericReceive+0x10>
 80075c6:	461f      	mov	r7, r3
 80075c8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075ca:	f000 fcff 	bl	8007fcc <xTaskGetSchedulerState>
 80075ce:	b910      	cbnz	r0, 80075d6 <xQueueGenericReceive+0x5a>
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	b103      	cbz	r3, 80075d6 <xQueueGenericReceive+0x5a>
 80075d4:	2500      	movs	r5, #0
 80075d6:	b955      	cbnz	r5, 80075ee <xQueueGenericReceive+0x72>
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	b672      	cpsid	i
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	b662      	cpsie	i
 80075ec:	e7fe      	b.n	80075ec <xQueueGenericReceive+0x70>
 80075ee:	2600      	movs	r6, #0
 80075f0:	e05d      	b.n	80076ae <xQueueGenericReceive+0x132>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80075f2:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075f4:	4641      	mov	r1, r8
 80075f6:	4620      	mov	r0, r4
 80075f8:	f7ff fe88 	bl	800730c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80075fc:	b9df      	cbnz	r7, 8007636 <xQueueGenericReceive+0xba>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80075fe:	3d01      	subs	r5, #1
 8007600:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	b913      	cbnz	r3, 800760c <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007606:	f000 fda1 	bl	800814c <pvTaskIncrementMutexHeldCount>
 800760a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	b163      	cbz	r3, 800762a <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007610:	f104 0010 	add.w	r0, r4, #16
 8007614:	f000 fc30 	bl	8007e78 <xTaskRemoveFromEventList>
 8007618:	b138      	cbz	r0, 800762a <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 800761a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761e:	4b45      	ldr	r3, [pc, #276]	; (8007734 <xQueueGenericReceive+0x1b8>)
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800762a:	f7ff fd29 	bl	8007080 <vPortExitCritical>
				return pdPASS;
 800762e:	2001      	movs	r0, #1
}
 8007630:	b004      	add	sp, #16
 8007632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007636:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0f5      	beq.n	800762a <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007642:	f000 fc19 	bl	8007e78 <xTaskRemoveFromEventList>
 8007646:	2800      	cmp	r0, #0
 8007648:	d0ef      	beq.n	800762a <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 800764a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764e:	4b39      	ldr	r3, [pc, #228]	; (8007734 <xQueueGenericReceive+0x1b8>)
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	e7e6      	b.n	800762a <xQueueGenericReceive+0xae>
					taskEXIT_CRITICAL();
 800765c:	f7ff fd10 	bl	8007080 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007660:	2000      	movs	r0, #0
 8007662:	e7e5      	b.n	8007630 <xQueueGenericReceive+0xb4>
					vTaskSetTimeOutState( &xTimeOut );
 8007664:	a802      	add	r0, sp, #8
 8007666:	f000 fc4f 	bl	8007f08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800766a:	2601      	movs	r6, #1
 800766c:	e029      	b.n	80076c2 <xQueueGenericReceive+0x146>
		prvLockQueue( pxQueue );
 800766e:	2300      	movs	r3, #0
 8007670:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007674:	e031      	b.n	80076da <xQueueGenericReceive+0x15e>
 8007676:	2300      	movs	r3, #0
 8007678:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800767c:	e033      	b.n	80076e6 <xQueueGenericReceive+0x16a>
						taskENTER_CRITICAL();
 800767e:	f7ff fcd9 	bl	8007034 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007682:	6860      	ldr	r0, [r4, #4]
 8007684:	f000 fcb2 	bl	8007fec <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8007688:	f7ff fcfa 	bl	8007080 <vPortExitCritical>
 800768c:	e03b      	b.n	8007706 <xQueueGenericReceive+0x18a>
				prvUnlockQueue( pxQueue );
 800768e:	4620      	mov	r0, r4
 8007690:	f7ff fe4e 	bl	8007330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007694:	f000 fa9a 	bl	8007bcc <xTaskResumeAll>
 8007698:	e009      	b.n	80076ae <xQueueGenericReceive+0x132>
			prvUnlockQueue( pxQueue );
 800769a:	4620      	mov	r0, r4
 800769c:	f7ff fe48 	bl	8007330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076a0:	f000 fa94 	bl	8007bcc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076a4:	4620      	mov	r0, r4
 80076a6:	f7ff fde9 	bl	800727c <prvIsQueueEmpty>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d140      	bne.n	8007730 <xQueueGenericReceive+0x1b4>
		taskENTER_CRITICAL();
 80076ae:	f7ff fcc1 	bl	8007034 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	d19c      	bne.n	80075f2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
 80076b8:	9b01      	ldr	r3, [sp, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ce      	beq.n	800765c <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 80076be:	2e00      	cmp	r6, #0
 80076c0:	d0d0      	beq.n	8007664 <xQueueGenericReceive+0xe8>
		taskEXIT_CRITICAL();
 80076c2:	f7ff fcdd 	bl	8007080 <vPortExitCritical>
		vTaskSuspendAll();
 80076c6:	f000 f9e7 	bl	8007a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076ca:	f7ff fcb3 	bl	8007034 <vPortEnterCritical>
 80076ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80076d2:	b25b      	sxtb	r3, r3
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076d8:	d0c9      	beq.n	800766e <xQueueGenericReceive+0xf2>
 80076da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80076de:	b25b      	sxtb	r3, r3
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e4:	d0c7      	beq.n	8007676 <xQueueGenericReceive+0xfa>
 80076e6:	f7ff fccb 	bl	8007080 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ea:	a901      	add	r1, sp, #4
 80076ec:	a802      	add	r0, sp, #8
 80076ee:	f000 fc23 	bl	8007f38 <xTaskCheckForTimeOut>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d1d1      	bne.n	800769a <xQueueGenericReceive+0x11e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7ff fdc0 	bl	800727c <prvIsQueueEmpty>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d0c6      	beq.n	800768e <xQueueGenericReceive+0x112>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0bb      	beq.n	800767e <xQueueGenericReceive+0x102>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007706:	9901      	ldr	r1, [sp, #4]
 8007708:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800770c:	f000 fb9a 	bl	8007e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007710:	4620      	mov	r0, r4
 8007712:	f7ff fe0d 	bl	8007330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007716:	f000 fa59 	bl	8007bcc <xTaskResumeAll>
 800771a:	2800      	cmp	r0, #0
 800771c:	d1c7      	bne.n	80076ae <xQueueGenericReceive+0x132>
					portYIELD_WITHIN_API();
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	4b04      	ldr	r3, [pc, #16]	; (8007734 <xQueueGenericReceive+0x1b8>)
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	e7be      	b.n	80076ae <xQueueGenericReceive+0x132>
				return errQUEUE_EMPTY;
 8007730:	2000      	movs	r0, #0
 8007732:	e77d      	b.n	8007630 <xQueueGenericReceive+0xb4>
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <prvResetNextTaskUnblockTime+0x2c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	b94b      	cbnz	r3, 8007754 <prvResetNextTaskUnblockTime+0x1c>
 8007740:	2301      	movs	r3, #1
 8007742:	b94b      	cbnz	r3, 8007758 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007744:	4b07      	ldr	r3, [pc, #28]	; (8007764 <prvResetNextTaskUnblockTime+0x2c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	4b06      	ldr	r3, [pc, #24]	; (8007768 <prvResetNextTaskUnblockTime+0x30>)
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007754:	2300      	movs	r3, #0
 8007756:	e7f4      	b.n	8007742 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <prvResetNextTaskUnblockTime+0x30>)
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20003d4c 	.word	0x20003d4c
 8007768:	20003e24 	.word	0x20003e24

0800776c <prvDeleteTCB>:
	{
 800776c:	b510      	push	{r4, lr}
 800776e:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8007770:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007772:	f7ff fb7b 	bl	8006e6c <vPortFree>
			vPortFree( pxTCB );
 8007776:	4620      	mov	r0, r4
 8007778:	f7ff fb78 	bl	8006e6c <vPortFree>
 800777c:	bd10      	pop	{r4, pc}

0800777e <prvInitialiseNewTask>:
{
 800777e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007782:	4680      	mov	r8, r0
 8007784:	4699      	mov	r9, r3
 8007786:	9d08      	ldr	r5, [sp, #32]
 8007788:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800778a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800778c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800778e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007792:	4413      	add	r3, r2
 8007794:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007798:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800779c:	2300      	movs	r3, #0
 800779e:	2b0f      	cmp	r3, #15
 80077a0:	d807      	bhi.n	80077b2 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077a2:	5cc8      	ldrb	r0, [r1, r3]
 80077a4:	18e2      	adds	r2, r4, r3
 80077a6:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80077aa:	5cca      	ldrb	r2, [r1, r3]
 80077ac:	b10a      	cbz	r2, 80077b2 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ae:	3301      	adds	r3, #1
 80077b0:	e7f5      	b.n	800779e <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077b2:	2300      	movs	r3, #0
 80077b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077b8:	2d06      	cmp	r5, #6
 80077ba:	d900      	bls.n	80077be <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077bc:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80077be:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80077c0:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077c2:	f04f 0a00 	mov.w	sl, #0
 80077c6:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077ca:	1d20      	adds	r0, r4, #4
 80077cc:	f7ff fb95 	bl	8006efa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077d0:	f104 0018 	add.w	r0, r4, #24
 80077d4:	f7ff fb91 	bl	8006efa <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077d8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077da:	f1c5 0507 	rsb	r5, r5, #7
 80077de:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077e0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80077e2:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077e6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077ea:	464a      	mov	r2, r9
 80077ec:	4641      	mov	r1, r8
 80077ee:	4630      	mov	r0, r6
 80077f0:	f7ff fbf8 	bl	8006fe4 <pxPortInitialiseStack>
 80077f4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80077f6:	b107      	cbz	r7, 80077fa <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077f8:	603c      	str	r4, [r7, #0]
 80077fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007800 <prvInitialiseTaskLists>:
{
 8007800:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007802:	2400      	movs	r4, #0
 8007804:	e007      	b.n	8007816 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007806:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800780a:	0093      	lsls	r3, r2, #2
 800780c:	480e      	ldr	r0, [pc, #56]	; (8007848 <prvInitialiseTaskLists+0x48>)
 800780e:	4418      	add	r0, r3
 8007810:	f7ff fb68 	bl	8006ee4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007814:	3401      	adds	r4, #1
 8007816:	2c06      	cmp	r4, #6
 8007818:	d9f5      	bls.n	8007806 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800781a:	4d0c      	ldr	r5, [pc, #48]	; (800784c <prvInitialiseTaskLists+0x4c>)
 800781c:	4628      	mov	r0, r5
 800781e:	f7ff fb61 	bl	8006ee4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007822:	4c0b      	ldr	r4, [pc, #44]	; (8007850 <prvInitialiseTaskLists+0x50>)
 8007824:	4620      	mov	r0, r4
 8007826:	f7ff fb5d 	bl	8006ee4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800782a:	480a      	ldr	r0, [pc, #40]	; (8007854 <prvInitialiseTaskLists+0x54>)
 800782c:	f7ff fb5a 	bl	8006ee4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007830:	4809      	ldr	r0, [pc, #36]	; (8007858 <prvInitialiseTaskLists+0x58>)
 8007832:	f7ff fb57 	bl	8006ee4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007836:	4809      	ldr	r0, [pc, #36]	; (800785c <prvInitialiseTaskLists+0x5c>)
 8007838:	f7ff fb54 	bl	8006ee4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800783c:	4b08      	ldr	r3, [pc, #32]	; (8007860 <prvInitialiseTaskLists+0x60>)
 800783e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007840:	4b08      	ldr	r3, [pc, #32]	; (8007864 <prvInitialiseTaskLists+0x64>)
 8007842:	601c      	str	r4, [r3, #0]
 8007844:	bd38      	pop	{r3, r4, r5, pc}
 8007846:	bf00      	nop
 8007848:	20003d54 	.word	0x20003d54
 800784c:	20003df8 	.word	0x20003df8
 8007850:	20003e0c 	.word	0x20003e0c
 8007854:	20003e2c 	.word	0x20003e2c
 8007858:	20003e58 	.word	0x20003e58
 800785c:	20003e44 	.word	0x20003e44
 8007860:	20003d4c 	.word	0x20003d4c
 8007864:	20003d50 	.word	0x20003d50

08007868 <prvAddNewTaskToReadyList>:
{
 8007868:	b510      	push	{r4, lr}
 800786a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800786c:	f7ff fbe2 	bl	8007034 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007870:	4a20      	ldr	r2, [pc, #128]	; (80078f4 <prvAddNewTaskToReadyList+0x8c>)
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007878:	4b1f      	ldr	r3, [pc, #124]	; (80078f8 <prvAddNewTaskToReadyList+0x90>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d031      	beq.n	80078e4 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8007880:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <prvAddNewTaskToReadyList+0x94>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b93b      	cbnz	r3, 8007896 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007886:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <prvAddNewTaskToReadyList+0x90>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800788e:	429a      	cmp	r2, r3
 8007890:	d801      	bhi.n	8007896 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8007892:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <prvAddNewTaskToReadyList+0x90>)
 8007894:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8007896:	4a1a      	ldr	r2, [pc, #104]	; (8007900 <prvAddNewTaskToReadyList+0x98>)
 8007898:	6813      	ldr	r3, [r2, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800789e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	4917      	ldr	r1, [pc, #92]	; (8007904 <prvAddNewTaskToReadyList+0x9c>)
 80078a6:	6808      	ldr	r0, [r1, #0]
 80078a8:	4302      	orrs	r2, r0
 80078aa:	600a      	str	r2, [r1, #0]
 80078ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80078b0:	009a      	lsls	r2, r3, #2
 80078b2:	1d21      	adds	r1, r4, #4
 80078b4:	4814      	ldr	r0, [pc, #80]	; (8007908 <prvAddNewTaskToReadyList+0xa0>)
 80078b6:	4410      	add	r0, r2
 80078b8:	f7ff fb22 	bl	8006f00 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80078bc:	f7ff fbe0 	bl	8007080 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <prvAddNewTaskToReadyList+0x94>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	b16b      	cbz	r3, 80078e2 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078c6:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <prvAddNewTaskToReadyList+0x90>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d207      	bcs.n	80078e2 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 80078d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <prvAddNewTaskToReadyList+0xa4>)
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80078e4:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <prvAddNewTaskToReadyList+0x90>)
 80078e6:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078e8:	6813      	ldr	r3, [r2, #0]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d1d3      	bne.n	8007896 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 80078ee:	f7ff ff87 	bl	8007800 <prvInitialiseTaskLists>
 80078f2:	e7d0      	b.n	8007896 <prvAddNewTaskToReadyList+0x2e>
 80078f4:	20003de0 	.word	0x20003de0
 80078f8:	20003d48 	.word	0x20003d48
 80078fc:	20003e40 	.word	0x20003e40
 8007900:	20003df0 	.word	0x20003df0
 8007904:	20003df4 	.word	0x20003df4
 8007908:	20003d54 	.word	0x20003d54
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4604      	mov	r4, r0
 8007914:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007916:	4b1f      	ldr	r3, [pc, #124]	; (8007994 <prvAddCurrentTaskToDelayedList+0x84>)
 8007918:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800791a:	4b1f      	ldr	r3, [pc, #124]	; (8007998 <prvAddCurrentTaskToDelayedList+0x88>)
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	3004      	adds	r0, #4
 8007920:	f7ff fb14 	bl	8006f4c <uxListRemove>
 8007924:	b950      	cbnz	r0, 800793c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007926:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <prvAddCurrentTaskToDelayedList+0x88>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	2301      	movs	r3, #1
 800792e:	fa03 f202 	lsl.w	r2, r3, r2
 8007932:	491a      	ldr	r1, [pc, #104]	; (800799c <prvAddCurrentTaskToDelayedList+0x8c>)
 8007934:	680b      	ldr	r3, [r1, #0]
 8007936:	ea23 0302 	bic.w	r3, r3, r2
 800793a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800793c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007940:	bf14      	ite	ne
 8007942:	2300      	movne	r3, #0
 8007944:	2301      	moveq	r3, #1
 8007946:	2e00      	cmp	r6, #0
 8007948:	bf08      	it	eq
 800794a:	2300      	moveq	r3, #0
 800794c:	b99b      	cbnz	r3, 8007976 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800794e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <prvAddCurrentTaskToDelayedList+0x88>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007956:	42a5      	cmp	r5, r4
 8007958:	d814      	bhi.n	8007984 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800795a:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <prvAddCurrentTaskToDelayedList+0x88>)
 8007960:	6819      	ldr	r1, [r3, #0]
 8007962:	3104      	adds	r1, #4
 8007964:	f7ff fad8 	bl	8006f18 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007968:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	429c      	cmp	r4, r3
 800796e:	d201      	bcs.n	8007974 <prvAddCurrentTaskToDelayedList+0x64>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007970:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007972:	601c      	str	r4, [r3, #0]
 8007974:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007976:	4b08      	ldr	r3, [pc, #32]	; (8007998 <prvAddCurrentTaskToDelayedList+0x88>)
 8007978:	6819      	ldr	r1, [r3, #0]
 800797a:	3104      	adds	r1, #4
 800797c:	480a      	ldr	r0, [pc, #40]	; (80079a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800797e:	f7ff fabf 	bl	8006f00 <vListInsertEnd>
 8007982:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	4b03      	ldr	r3, [pc, #12]	; (8007998 <prvAddCurrentTaskToDelayedList+0x88>)
 800798a:	6819      	ldr	r1, [r3, #0]
 800798c:	3104      	adds	r1, #4
 800798e:	f7ff fac3 	bl	8006f18 <vListInsert>
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	20003e6c 	.word	0x20003e6c
 8007998:	20003d48 	.word	0x20003d48
 800799c:	20003df4 	.word	0x20003df4
 80079a0:	20003d4c 	.word	0x20003d4c
 80079a4:	20003e24 	.word	0x20003e24
 80079a8:	20003e44 	.word	0x20003e44
 80079ac:	20003d50 	.word	0x20003d50

080079b0 <xTaskCreate>:
	{
 80079b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079b4:	b085      	sub	sp, #20
 80079b6:	4606      	mov	r6, r0
 80079b8:	460f      	mov	r7, r1
 80079ba:	4615      	mov	r5, r2
 80079bc:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079be:	0090      	lsls	r0, r2, #2
 80079c0:	f7ff f9ca 	bl	8006d58 <pvPortMalloc>
			if( pxStack != NULL )
 80079c4:	b300      	cbz	r0, 8007a08 <xTaskCreate+0x58>
 80079c6:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80079c8:	2054      	movs	r0, #84	; 0x54
 80079ca:	f7ff f9c5 	bl	8006d58 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80079ce:	4604      	mov	r4, r0
 80079d0:	b1b0      	cbz	r0, 8007a00 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80079d2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80079d6:	b1cc      	cbz	r4, 8007a0c <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079d8:	2300      	movs	r3, #0
 80079da:	9303      	str	r3, [sp, #12]
 80079dc:	9402      	str	r4, [sp, #8]
 80079de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	4643      	mov	r3, r8
 80079e8:	462a      	mov	r2, r5
 80079ea:	4639      	mov	r1, r7
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff fec6 	bl	800777e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff ff38 	bl	8007868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079f8:	2001      	movs	r0, #1
	}
 80079fa:	b005      	add	sp, #20
 80079fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007a00:	4648      	mov	r0, r9
 8007a02:	f7ff fa33 	bl	8006e6c <vPortFree>
 8007a06:	e7e6      	b.n	80079d6 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8007a08:	2400      	movs	r4, #0
 8007a0a:	e7e4      	b.n	80079d6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8007a10:	e7f3      	b.n	80079fa <xTaskCreate+0x4a>
	...

08007a14 <vTaskStartScheduler>:
{
 8007a14:	b500      	push	{lr}
 8007a16:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8007a18:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <vTaskStartScheduler+0x6c>)
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	2280      	movs	r2, #128	; 0x80
 8007a22:	4918      	ldr	r1, [pc, #96]	; (8007a84 <vTaskStartScheduler+0x70>)
 8007a24:	4818      	ldr	r0, [pc, #96]	; (8007a88 <vTaskStartScheduler+0x74>)
 8007a26:	f7ff ffc3 	bl	80079b0 <xTaskCreate>
	if( xReturn == pdPASS )
 8007a2a:	2801      	cmp	r0, #1
 8007a2c:	d005      	beq.n	8007a3a <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a32:	d019      	beq.n	8007a68 <vTaskStartScheduler+0x54>
}
 8007a34:	b003      	add	sp, #12
 8007a36:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	b672      	cpsid	i
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a52:	4b0e      	ldr	r3, [pc, #56]	; (8007a8c <vTaskStartScheduler+0x78>)
 8007a54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a56:	2201      	movs	r2, #1
 8007a58:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <vTaskStartScheduler+0x7c>)
 8007a5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <vTaskStartScheduler+0x80>)
 8007a60:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007a62:	f7ff fb85 	bl	8007170 <xPortStartScheduler>
 8007a66:	e7e5      	b.n	8007a34 <vTaskStartScheduler+0x20>
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	b672      	cpsid	i
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	b662      	cpsie	i
 8007a7c:	e7fe      	b.n	8007a7c <vTaskStartScheduler+0x68>
 8007a7e:	bf00      	nop
 8007a80:	20003e20 	.word	0x20003e20
 8007a84:	0800844c 	.word	0x0800844c
 8007a88:	08007d7d 	.word	0x08007d7d
 8007a8c:	20003e24 	.word	0x20003e24
 8007a90:	20003e40 	.word	0x20003e40
 8007a94:	20003e6c 	.word	0x20003e6c

08007a98 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007a98:	4a02      	ldr	r2, [pc, #8]	; (8007aa4 <vTaskSuspendAll+0xc>)
 8007a9a:	6813      	ldr	r3, [r2, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20003dec 	.word	0x20003dec

08007aa8 <xTaskIncrementTick>:
{
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aaa:	4b3d      	ldr	r3, [pc, #244]	; (8007ba0 <xTaskIncrementTick+0xf8>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d16a      	bne.n	8007b88 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + 1;
 8007ab2:	4b3c      	ldr	r3, [pc, #240]	; (8007ba4 <xTaskIncrementTick+0xfc>)
 8007ab4:	681d      	ldr	r5, [r3, #0]
 8007ab6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007ab8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8007aba:	b9d5      	cbnz	r5, 8007af2 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007abc:	4b3a      	ldr	r3, [pc, #232]	; (8007ba8 <xTaskIncrementTick+0x100>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	b153      	cbz	r3, 8007ada <xTaskIncrementTick+0x32>
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	b672      	cpsid	i
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	b662      	cpsie	i
 8007ad8:	e7fe      	b.n	8007ad8 <xTaskIncrementTick+0x30>
 8007ada:	4a33      	ldr	r2, [pc, #204]	; (8007ba8 <xTaskIncrementTick+0x100>)
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	4b33      	ldr	r3, [pc, #204]	; (8007bac <xTaskIncrementTick+0x104>)
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	6010      	str	r0, [r2, #0]
 8007ae4:	6019      	str	r1, [r3, #0]
 8007ae6:	4a32      	ldr	r2, [pc, #200]	; (8007bb0 <xTaskIncrementTick+0x108>)
 8007ae8:	6813      	ldr	r3, [r2, #0]
 8007aea:	3301      	adds	r3, #1
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	f7ff fe23 	bl	8007738 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007af2:	4b30      	ldr	r3, [pc, #192]	; (8007bb4 <xTaskIncrementTick+0x10c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429d      	cmp	r5, r3
 8007af8:	d23a      	bcs.n	8007b70 <xTaskIncrementTick+0xc8>
BaseType_t xSwitchRequired = pdFALSE;
 8007afa:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007afc:	4b2e      	ldr	r3, [pc, #184]	; (8007bb8 <xTaskIncrementTick+0x110>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b06:	009a      	lsls	r2, r3, #2
 8007b08:	4b2c      	ldr	r3, [pc, #176]	; (8007bbc <xTaskIncrementTick+0x114>)
 8007b0a:	589b      	ldr	r3, [r3, r2]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d940      	bls.n	8007b92 <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 8007b10:	2401      	movs	r4, #1
 8007b12:	e03e      	b.n	8007b92 <xTaskIncrementTick+0xea>
							xSwitchRequired = pdTRUE;
 8007b14:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b16:	4b24      	ldr	r3, [pc, #144]	; (8007ba8 <xTaskIncrementTick+0x100>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	b353      	cbz	r3, 8007b74 <xTaskIncrementTick+0xcc>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	bb53      	cbnz	r3, 8007b78 <xTaskIncrementTick+0xd0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b22:	4b21      	ldr	r3, [pc, #132]	; (8007ba8 <xTaskIncrementTick+0x100>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b2a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007b2c:	429d      	cmp	r5, r3
 8007b2e:	d328      	bcc.n	8007b82 <xTaskIncrementTick+0xda>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b30:	1d37      	adds	r7, r6, #4
 8007b32:	4638      	mov	r0, r7
 8007b34:	f7ff fa0a 	bl	8006f4c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b38:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007b3a:	b11b      	cbz	r3, 8007b44 <xTaskIncrementTick+0x9c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b3c:	f106 0018 	add.w	r0, r6, #24
 8007b40:	f7ff fa04 	bl	8006f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b44:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007b46:	2201      	movs	r2, #1
 8007b48:	409a      	lsls	r2, r3
 8007b4a:	491d      	ldr	r1, [pc, #116]	; (8007bc0 <xTaskIncrementTick+0x118>)
 8007b4c:	6808      	ldr	r0, [r1, #0]
 8007b4e:	4302      	orrs	r2, r0
 8007b50:	600a      	str	r2, [r1, #0]
 8007b52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b56:	009a      	lsls	r2, r3, #2
 8007b58:	4639      	mov	r1, r7
 8007b5a:	4818      	ldr	r0, [pc, #96]	; (8007bbc <xTaskIncrementTick+0x114>)
 8007b5c:	4410      	add	r0, r2
 8007b5e:	f7ff f9cf 	bl	8006f00 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b62:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8007b64:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <xTaskIncrementTick+0x110>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d2d2      	bcs.n	8007b14 <xTaskIncrementTick+0x6c>
 8007b6e:	e7d2      	b.n	8007b16 <xTaskIncrementTick+0x6e>
 8007b70:	2400      	movs	r4, #0
 8007b72:	e7d0      	b.n	8007b16 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b74:	2301      	movs	r3, #1
 8007b76:	e7d3      	b.n	8007b20 <xTaskIncrementTick+0x78>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <xTaskIncrementTick+0x10c>)
 8007b7e:	601a      	str	r2, [r3, #0]
					break;
 8007b80:	e7bc      	b.n	8007afc <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8007b82:	4a0c      	ldr	r2, [pc, #48]	; (8007bb4 <xTaskIncrementTick+0x10c>)
 8007b84:	6013      	str	r3, [r2, #0]
						break;
 8007b86:	e7b9      	b.n	8007afc <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8007b88:	4a0e      	ldr	r2, [pc, #56]	; (8007bc4 <xTaskIncrementTick+0x11c>)
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007b90:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8007b92:	4b0d      	ldr	r3, [pc, #52]	; (8007bc8 <xTaskIncrementTick+0x120>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 8007b98:	2401      	movs	r4, #1
}
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20003dec 	.word	0x20003dec
 8007ba4:	20003e6c 	.word	0x20003e6c
 8007ba8:	20003d4c 	.word	0x20003d4c
 8007bac:	20003d50 	.word	0x20003d50
 8007bb0:	20003e28 	.word	0x20003e28
 8007bb4:	20003e24 	.word	0x20003e24
 8007bb8:	20003d48 	.word	0x20003d48
 8007bbc:	20003d54 	.word	0x20003d54
 8007bc0:	20003df4 	.word	0x20003df4
 8007bc4:	20003de8 	.word	0x20003de8
 8007bc8:	20003e70 	.word	0x20003e70

08007bcc <xTaskResumeAll>:
{
 8007bcc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007bce:	4b36      	ldr	r3, [pc, #216]	; (8007ca8 <xTaskResumeAll+0xdc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	b953      	cbnz	r3, 8007bea <xTaskResumeAll+0x1e>
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	b672      	cpsid	i
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	b662      	cpsie	i
 8007be8:	e7fe      	b.n	8007be8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8007bea:	f7ff fa23 	bl	8007034 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007bee:	4b2e      	ldr	r3, [pc, #184]	; (8007ca8 <xTaskResumeAll+0xdc>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d150      	bne.n	8007c9e <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bfc:	4b2b      	ldr	r3, [pc, #172]	; (8007cac <xTaskResumeAll+0xe0>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	b923      	cbnz	r3, 8007c0c <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8007c02:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007c04:	f7ff fa3c 	bl	8007080 <vPortExitCritical>
}
 8007c08:	4620      	mov	r0, r4
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c0e:	4b28      	ldr	r3, [pc, #160]	; (8007cb0 <xTaskResumeAll+0xe4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	b31b      	cbz	r3, 8007c5c <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007c14:	4b26      	ldr	r3, [pc, #152]	; (8007cb0 <xTaskResumeAll+0xe4>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c1a:	f104 0018 	add.w	r0, r4, #24
 8007c1e:	f7ff f995 	bl	8006f4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c22:	1d25      	adds	r5, r4, #4
 8007c24:	4628      	mov	r0, r5
 8007c26:	f7ff f991 	bl	8006f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	409a      	lsls	r2, r3
 8007c30:	4920      	ldr	r1, [pc, #128]	; (8007cb4 <xTaskResumeAll+0xe8>)
 8007c32:	6808      	ldr	r0, [r1, #0]
 8007c34:	4302      	orrs	r2, r0
 8007c36:	600a      	str	r2, [r1, #0]
 8007c38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c3c:	009a      	lsls	r2, r3, #2
 8007c3e:	4629      	mov	r1, r5
 8007c40:	481d      	ldr	r0, [pc, #116]	; (8007cb8 <xTaskResumeAll+0xec>)
 8007c42:	4410      	add	r0, r2
 8007c44:	f7ff f95c 	bl	8006f00 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007c4a:	4b1c      	ldr	r3, [pc, #112]	; (8007cbc <xTaskResumeAll+0xf0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3dc      	bcc.n	8007c0e <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8007c54:	2201      	movs	r2, #1
 8007c56:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <xTaskResumeAll+0xf4>)
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	e7d8      	b.n	8007c0e <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8007c5c:	b10c      	cbz	r4, 8007c62 <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8007c5e:	f7ff fd6b 	bl	8007738 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c62:	4b18      	ldr	r3, [pc, #96]	; (8007cc4 <xTaskResumeAll+0xf8>)
 8007c64:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c66:	b974      	cbnz	r4, 8007c86 <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8007c68:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <xTaskResumeAll+0xf4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	b1cb      	cbz	r3, 8007ca2 <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c72:	4b15      	ldr	r3, [pc, #84]	; (8007cc8 <xTaskResumeAll+0xfc>)
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007c7e:	2401      	movs	r4, #1
 8007c80:	e7c0      	b.n	8007c04 <xTaskResumeAll+0x38>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c82:	3c01      	subs	r4, #1
 8007c84:	d007      	beq.n	8007c96 <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 8007c86:	f7ff ff0f 	bl	8007aa8 <xTaskIncrementTick>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d0f9      	beq.n	8007c82 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <xTaskResumeAll+0xf4>)
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e7f5      	b.n	8007c82 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8007c96:	2200      	movs	r2, #0
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <xTaskResumeAll+0xf8>)
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	e7e4      	b.n	8007c68 <xTaskResumeAll+0x9c>
BaseType_t xAlreadyYielded = pdFALSE;
 8007c9e:	2400      	movs	r4, #0
 8007ca0:	e7b0      	b.n	8007c04 <xTaskResumeAll+0x38>
 8007ca2:	2400      	movs	r4, #0
 8007ca4:	e7ae      	b.n	8007c04 <xTaskResumeAll+0x38>
 8007ca6:	bf00      	nop
 8007ca8:	20003dec 	.word	0x20003dec
 8007cac:	20003de0 	.word	0x20003de0
 8007cb0:	20003e2c 	.word	0x20003e2c
 8007cb4:	20003df4 	.word	0x20003df4
 8007cb8:	20003d54 	.word	0x20003d54
 8007cbc:	20003d48 	.word	0x20003d48
 8007cc0:	20003e70 	.word	0x20003e70
 8007cc4:	20003de8 	.word	0x20003de8
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vTaskDelay>:
	{
 8007ccc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cce:	b1b8      	cbz	r0, 8007d00 <vTaskDelay+0x34>
 8007cd0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007cd2:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <vTaskDelay+0x4c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	b153      	cbz	r3, 8007cee <vTaskDelay+0x22>
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	b672      	cpsid	i
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	b662      	cpsie	i
 8007cec:	e7fe      	b.n	8007cec <vTaskDelay+0x20>
			vTaskSuspendAll();
 8007cee:	f7ff fed3 	bl	8007a98 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7ff fe0b 	bl	8007910 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007cfa:	f7ff ff67 	bl	8007bcc <xTaskResumeAll>
 8007cfe:	e000      	b.n	8007d02 <vTaskDelay+0x36>
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d00:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8007d02:	b938      	cbnz	r0, 8007d14 <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 8007d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <vTaskDelay+0x50>)
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	bd10      	pop	{r4, pc}
 8007d16:	bf00      	nop
 8007d18:	20003dec 	.word	0x20003dec
 8007d1c:	e000ed04 	.word	0xe000ed04

08007d20 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d20:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <prvCheckTasksWaitingTermination+0x50>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	b313      	cbz	r3, 8007d6c <prvCheckTasksWaitingTermination+0x4c>
{
 8007d26:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8007d28:	f7ff feb6 	bl	8007a98 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007d2c:	4b11      	ldr	r3, [pc, #68]	; (8007d74 <prvCheckTasksWaitingTermination+0x54>)
 8007d2e:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8007d30:	f7ff ff4c 	bl	8007bcc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8007d34:	b924      	cbnz	r4, 8007d40 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d36:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <prvCheckTasksWaitingTermination+0x50>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f4      	bne.n	8007d28 <prvCheckTasksWaitingTermination+0x8>
}
 8007d3e:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8007d40:	f7ff f978 	bl	8007034 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007d44:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <prvCheckTasksWaitingTermination+0x54>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d4a:	1d20      	adds	r0, r4, #4
 8007d4c:	f7ff f8fe 	bl	8006f4c <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007d50:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <prvCheckTasksWaitingTermination+0x58>)
 8007d52:	6813      	ldr	r3, [r2, #0]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8007d58:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <prvCheckTasksWaitingTermination+0x50>)
 8007d5a:	6813      	ldr	r3, [r2, #0]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8007d60:	f7ff f98e 	bl	8007080 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8007d64:	4620      	mov	r0, r4
 8007d66:	f7ff fd01 	bl	800776c <prvDeleteTCB>
 8007d6a:	e7e4      	b.n	8007d36 <prvCheckTasksWaitingTermination+0x16>
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20003de4 	.word	0x20003de4
 8007d74:	20003e58 	.word	0x20003e58
 8007d78:	20003de0 	.word	0x20003de0

08007d7c <prvIdleTask>:
{
 8007d7c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007d7e:	f7ff ffcf 	bl	8007d20 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d82:	4b06      	ldr	r3, [pc, #24]	; (8007d9c <prvIdleTask+0x20>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d9f9      	bls.n	8007d7e <prvIdleTask+0x2>
				taskYIELD();
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <prvIdleTask+0x24>)
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	e7f0      	b.n	8007d7e <prvIdleTask+0x2>
 8007d9c:	20003d54 	.word	0x20003d54
 8007da0:	e000ed04 	.word	0xe000ed04

08007da4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007da4:	4b22      	ldr	r3, [pc, #136]	; (8007e30 <vTaskSwitchContext+0x8c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	b9d3      	cbnz	r3, 8007de0 <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
 8007daa:	2200      	movs	r2, #0
 8007dac:	4b21      	ldr	r3, [pc, #132]	; (8007e34 <vTaskSwitchContext+0x90>)
 8007dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007db0:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <vTaskSwitchContext+0x94>)
 8007db2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8007db4:	fab3 f383 	clz	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	f1c3 031f 	rsb	r3, r3, #31
 8007dbe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007dc2:	008a      	lsls	r2, r1, #2
 8007dc4:	491d      	ldr	r1, [pc, #116]	; (8007e3c <vTaskSwitchContext+0x98>)
 8007dc6:	588a      	ldr	r2, [r1, r2]
 8007dc8:	b972      	cbnz	r2, 8007de8 <vTaskSwitchContext+0x44>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	b672      	cpsid	i
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	b662      	cpsie	i
 8007dde:	e7fe      	b.n	8007dde <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
 8007de0:	2201      	movs	r2, #1
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <vTaskSwitchContext+0x90>)
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	4770      	bx	lr
{
 8007de8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007dea:	4814      	ldr	r0, [pc, #80]	; (8007e3c <vTaskSwitchContext+0x98>)
 8007dec:	009a      	lsls	r2, r3, #2
 8007dee:	18d4      	adds	r4, r2, r3
 8007df0:	00a1      	lsls	r1, r4, #2
 8007df2:	4401      	add	r1, r0
 8007df4:	684c      	ldr	r4, [r1, #4]
 8007df6:	6864      	ldr	r4, [r4, #4]
 8007df8:	604c      	str	r4, [r1, #4]
 8007dfa:	441a      	add	r2, r3
 8007dfc:	0091      	lsls	r1, r2, #2
 8007dfe:	3108      	adds	r1, #8
 8007e00:	4408      	add	r0, r1
 8007e02:	4284      	cmp	r4, r0
 8007e04:	d00b      	beq.n	8007e1e <vTaskSwitchContext+0x7a>
 8007e06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e0a:	009a      	lsls	r2, r3, #2
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <vTaskSwitchContext+0x98>)
 8007e0e:	4413      	add	r3, r2
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <vTaskSwitchContext+0x9c>)
 8007e16:	601a      	str	r2, [r3, #0]
}
 8007e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e1c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e1e:	6860      	ldr	r0, [r4, #4]
 8007e20:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007e24:	0091      	lsls	r1, r2, #2
 8007e26:	4a05      	ldr	r2, [pc, #20]	; (8007e3c <vTaskSwitchContext+0x98>)
 8007e28:	440a      	add	r2, r1
 8007e2a:	6050      	str	r0, [r2, #4]
 8007e2c:	e7eb      	b.n	8007e06 <vTaskSwitchContext+0x62>
 8007e2e:	bf00      	nop
 8007e30:	20003dec 	.word	0x20003dec
 8007e34:	20003e70 	.word	0x20003e70
 8007e38:	20003df4 	.word	0x20003df4
 8007e3c:	20003d54 	.word	0x20003d54
 8007e40:	20003d48 	.word	0x20003d48

08007e44 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007e44:	b950      	cbnz	r0, 8007e5c <vTaskPlaceOnEventList+0x18>
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	b672      	cpsid	i
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	b662      	cpsie	i
 8007e5a:	e7fe      	b.n	8007e5a <vTaskPlaceOnEventList+0x16>
{
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e60:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <vTaskPlaceOnEventList+0x30>)
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	3118      	adds	r1, #24
 8007e66:	f7ff f857 	bl	8006f18 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f7ff fd4f 	bl	8007910 <prvAddCurrentTaskToDelayedList>
 8007e72:	bd10      	pop	{r4, pc}
 8007e74:	20003d48 	.word	0x20003d48

08007e78 <xTaskRemoveFromEventList>:
{
 8007e78:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007e7a:	68c3      	ldr	r3, [r0, #12]
 8007e7c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007e7e:	b324      	cbz	r4, 8007eca <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e80:	f104 0518 	add.w	r5, r4, #24
 8007e84:	4628      	mov	r0, r5
 8007e86:	f7ff f861 	bl	8006f4c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e8a:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <xTaskRemoveFromEventList+0x78>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	bb3b      	cbnz	r3, 8007ee0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e90:	1d25      	adds	r5, r4, #4
 8007e92:	4628      	mov	r0, r5
 8007e94:	f7ff f85a 	bl	8006f4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	4915      	ldr	r1, [pc, #84]	; (8007ef4 <xTaskRemoveFromEventList+0x7c>)
 8007ea0:	6808      	ldr	r0, [r1, #0]
 8007ea2:	4302      	orrs	r2, r0
 8007ea4:	600a      	str	r2, [r1, #0]
 8007ea6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007eaa:	009a      	lsls	r2, r3, #2
 8007eac:	4629      	mov	r1, r5
 8007eae:	4812      	ldr	r0, [pc, #72]	; (8007ef8 <xTaskRemoveFromEventList+0x80>)
 8007eb0:	4410      	add	r0, r2
 8007eb2:	f7ff f825 	bl	8006f00 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007eb8:	4b10      	ldr	r3, [pc, #64]	; (8007efc <xTaskRemoveFromEventList+0x84>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d913      	bls.n	8007eea <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <xTaskRemoveFromEventList+0x88>)
 8007ec6:	6018      	str	r0, [r3, #0]
 8007ec8:	bd38      	pop	{r3, r4, r5, pc}
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	b672      	cpsid	i
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	b662      	cpsie	i
 8007ede:	e7fe      	b.n	8007ede <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4808      	ldr	r0, [pc, #32]	; (8007f04 <xTaskRemoveFromEventList+0x8c>)
 8007ee4:	f7ff f80c 	bl	8006f00 <vListInsertEnd>
 8007ee8:	e7e5      	b.n	8007eb6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8007eea:	2000      	movs	r0, #0
}
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
 8007eee:	bf00      	nop
 8007ef0:	20003dec 	.word	0x20003dec
 8007ef4:	20003df4 	.word	0x20003df4
 8007ef8:	20003d54 	.word	0x20003d54
 8007efc:	20003d48 	.word	0x20003d48
 8007f00:	20003e70 	.word	0x20003e70
 8007f04:	20003e2c 	.word	0x20003e2c

08007f08 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8007f08:	b130      	cbz	r0, 8007f18 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f0a:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <vTaskSetTimeOutState+0x28>)
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f10:	4a08      	ldr	r2, [pc, #32]	; (8007f34 <vTaskSetTimeOutState+0x2c>)
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	6042      	str	r2, [r0, #4]
 8007f16:	4770      	bx	lr
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	b672      	cpsid	i
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	b662      	cpsie	i
 8007f2c:	e7fe      	b.n	8007f2c <vTaskSetTimeOutState+0x24>
 8007f2e:	bf00      	nop
 8007f30:	20003e28 	.word	0x20003e28
 8007f34:	20003e6c 	.word	0x20003e6c

08007f38 <xTaskCheckForTimeOut>:
{
 8007f38:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8007f3a:	b1c0      	cbz	r0, 8007f6e <xTaskCheckForTimeOut+0x36>
 8007f3c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8007f3e:	b309      	cbz	r1, 8007f84 <xTaskCheckForTimeOut+0x4c>
 8007f40:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007f42:	f7ff f877 	bl	8007034 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007f46:	4b1c      	ldr	r3, [pc, #112]	; (8007fb8 <xTaskCheckForTimeOut+0x80>)
 8007f48:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007f4a:	682b      	ldr	r3, [r5, #0]
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f50:	d02e      	beq.n	8007fb0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f52:	6820      	ldr	r0, [r4, #0]
 8007f54:	4a19      	ldr	r2, [pc, #100]	; (8007fbc <xTaskCheckForTimeOut+0x84>)
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	4290      	cmp	r0, r2
 8007f5a:	d002      	beq.n	8007f62 <xTaskCheckForTimeOut+0x2a>
 8007f5c:	6862      	ldr	r2, [r4, #4]
 8007f5e:	4291      	cmp	r1, r2
 8007f60:	d228      	bcs.n	8007fb4 <xTaskCheckForTimeOut+0x7c>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f62:	6862      	ldr	r2, [r4, #4]
 8007f64:	1a88      	subs	r0, r1, r2
 8007f66:	4283      	cmp	r3, r0
 8007f68:	d817      	bhi.n	8007f9a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8007f6a:	2401      	movs	r4, #1
 8007f6c:	e01c      	b.n	8007fa8 <xTaskCheckForTimeOut+0x70>
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	b672      	cpsid	i
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	b662      	cpsie	i
 8007f82:	e7fe      	b.n	8007f82 <xTaskCheckForTimeOut+0x4a>
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	b672      	cpsid	i
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	b662      	cpsie	i
 8007f98:	e7fe      	b.n	8007f98 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007f9a:	1a52      	subs	r2, r2, r1
 8007f9c:	4413      	add	r3, r2
 8007f9e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f7ff ffb1 	bl	8007f08 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8007fa6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007fa8:	f7ff f86a 	bl	8007080 <vPortExitCritical>
}
 8007fac:	4620      	mov	r0, r4
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 8007fb0:	2400      	movs	r4, #0
 8007fb2:	e7f9      	b.n	8007fa8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 8007fb4:	2401      	movs	r4, #1
 8007fb6:	e7f7      	b.n	8007fa8 <xTaskCheckForTimeOut+0x70>
 8007fb8:	20003e6c 	.word	0x20003e6c
 8007fbc:	20003e28 	.word	0x20003e28

08007fc0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	4b01      	ldr	r3, [pc, #4]	; (8007fc8 <vTaskMissedYield+0x8>)
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	4770      	bx	lr
 8007fc8:	20003e70 	.word	0x20003e70

08007fcc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <xTaskGetSchedulerState+0x18>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	b123      	cbz	r3, 8007fdc <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fd2:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <xTaskGetSchedulerState+0x1c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	b91b      	cbnz	r3, 8007fe0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8007fd8:	2002      	movs	r0, #2
 8007fda:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fdc:	2001      	movs	r0, #1
 8007fde:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fe0:	2000      	movs	r0, #0
	}
 8007fe2:	4770      	bx	lr
 8007fe4:	20003e40 	.word	0x20003e40
 8007fe8:	20003dec 	.word	0x20003dec

08007fec <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d047      	beq.n	8008080 <vTaskPriorityInherit+0x94>
	{
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ff4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007ff6:	4923      	ldr	r1, [pc, #140]	; (8008084 <vTaskPriorityInherit+0x98>)
 8007ff8:	6809      	ldr	r1, [r1, #0]
 8007ffa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007ffc:	428b      	cmp	r3, r1
 8007ffe:	d216      	bcs.n	800802e <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008000:	6981      	ldr	r1, [r0, #24]
 8008002:	2900      	cmp	r1, #0
 8008004:	db05      	blt.n	8008012 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008006:	491f      	ldr	r1, [pc, #124]	; (8008084 <vTaskPriorityInherit+0x98>)
 8008008:	6809      	ldr	r1, [r1, #0]
 800800a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800800c:	f1c1 0107 	rsb	r1, r1, #7
 8008010:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008012:	6960      	ldr	r0, [r4, #20]
 8008014:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008018:	0099      	lsls	r1, r3, #2
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <vTaskPriorityInherit+0x9c>)
 800801c:	440b      	add	r3, r1
 800801e:	4298      	cmp	r0, r3
 8008020:	d006      	beq.n	8008030 <vTaskPriorityInherit+0x44>
 8008022:	2300      	movs	r3, #0
 8008024:	b933      	cbnz	r3, 8008034 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008026:	4b17      	ldr	r3, [pc, #92]	; (8008084 <vTaskPriorityInherit+0x98>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800802e:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008030:	2301      	movs	r3, #1
 8008032:	e7f7      	b.n	8008024 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008034:	1d25      	adds	r5, r4, #4
 8008036:	4628      	mov	r0, r5
 8008038:	f7fe ff88 	bl	8006f4c <uxListRemove>
 800803c:	b968      	cbnz	r0, 800805a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800803e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008040:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008044:	008a      	lsls	r2, r1, #2
 8008046:	4910      	ldr	r1, [pc, #64]	; (8008088 <vTaskPriorityInherit+0x9c>)
 8008048:	588a      	ldr	r2, [r1, r2]
 800804a:	b932      	cbnz	r2, 800805a <vTaskPriorityInherit+0x6e>
 800804c:	2201      	movs	r2, #1
 800804e:	409a      	lsls	r2, r3
 8008050:	490e      	ldr	r1, [pc, #56]	; (800808c <vTaskPriorityInherit+0xa0>)
 8008052:	680b      	ldr	r3, [r1, #0]
 8008054:	ea23 0302 	bic.w	r3, r3, r2
 8008058:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800805a:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <vTaskPriorityInherit+0x98>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8008062:	2201      	movs	r2, #1
 8008064:	409a      	lsls	r2, r3
 8008066:	4909      	ldr	r1, [pc, #36]	; (800808c <vTaskPriorityInherit+0xa0>)
 8008068:	6808      	ldr	r0, [r1, #0]
 800806a:	4302      	orrs	r2, r0
 800806c:	600a      	str	r2, [r1, #0]
 800806e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008072:	009a      	lsls	r2, r3, #2
 8008074:	4629      	mov	r1, r5
 8008076:	4804      	ldr	r0, [pc, #16]	; (8008088 <vTaskPriorityInherit+0x9c>)
 8008078:	4410      	add	r0, r2
 800807a:	f7fe ff41 	bl	8006f00 <vListInsertEnd>
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20003d48 	.word	0x20003d48
 8008088:	20003d54 	.word	0x20003d54
 800808c:	20003df4 	.word	0x20003df4

08008090 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008090:	2800      	cmp	r0, #0
 8008092:	d04e      	beq.n	8008132 <xTaskPriorityDisinherit+0xa2>
	{
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008098:	4a29      	ldr	r2, [pc, #164]	; (8008140 <xTaskPriorityDisinherit+0xb0>)
 800809a:	6812      	ldr	r2, [r2, #0]
 800809c:	4290      	cmp	r0, r2
 800809e:	d00a      	beq.n	80080b6 <xTaskPriorityDisinherit+0x26>
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	b672      	cpsid	i
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	b662      	cpsie	i
 80080b4:	e7fe      	b.n	80080b4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80080b6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80080b8:	b952      	cbnz	r2, 80080d0 <xTaskPriorityDisinherit+0x40>
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	b672      	cpsid	i
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	b662      	cpsie	i
 80080ce:	e7fe      	b.n	80080ce <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 80080d0:	3a01      	subs	r2, #1
 80080d2:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80080d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080d8:	4288      	cmp	r0, r1
 80080da:	d02c      	beq.n	8008136 <xTaskPriorityDisinherit+0xa6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080dc:	bb6a      	cbnz	r2, 800813a <xTaskPriorityDisinherit+0xaa>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080de:	1d25      	adds	r5, r4, #4
 80080e0:	4628      	mov	r0, r5
 80080e2:	f7fe ff33 	bl	8006f4c <uxListRemove>
 80080e6:	b970      	cbnz	r0, 8008106 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80080ea:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80080ee:	008b      	lsls	r3, r1, #2
 80080f0:	4914      	ldr	r1, [pc, #80]	; (8008144 <xTaskPriorityDisinherit+0xb4>)
 80080f2:	58cb      	ldr	r3, [r1, r3]
 80080f4:	b93b      	cbnz	r3, 8008106 <xTaskPriorityDisinherit+0x76>
 80080f6:	2301      	movs	r3, #1
 80080f8:	fa03 f202 	lsl.w	r2, r3, r2
 80080fc:	4912      	ldr	r1, [pc, #72]	; (8008148 <xTaskPriorityDisinherit+0xb8>)
 80080fe:	680b      	ldr	r3, [r1, #0]
 8008100:	ea23 0302 	bic.w	r3, r3, r2
 8008104:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008106:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008108:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800810a:	f1c3 0207 	rsb	r2, r3, #7
 800810e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008110:	2401      	movs	r4, #1
 8008112:	fa04 f203 	lsl.w	r2, r4, r3
 8008116:	490c      	ldr	r1, [pc, #48]	; (8008148 <xTaskPriorityDisinherit+0xb8>)
 8008118:	6808      	ldr	r0, [r1, #0]
 800811a:	4302      	orrs	r2, r0
 800811c:	600a      	str	r2, [r1, #0]
 800811e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008122:	009a      	lsls	r2, r3, #2
 8008124:	4629      	mov	r1, r5
 8008126:	4807      	ldr	r0, [pc, #28]	; (8008144 <xTaskPriorityDisinherit+0xb4>)
 8008128:	4410      	add	r0, r2
 800812a:	f7fe fee9 	bl	8006f00 <vListInsertEnd>
					xReturn = pdTRUE;
 800812e:	4620      	mov	r0, r4
 8008130:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008132:	2000      	movs	r0, #0
 8008134:	4770      	bx	lr
 8008136:	2000      	movs	r0, #0
 8008138:	bd38      	pop	{r3, r4, r5, pc}
 800813a:	2000      	movs	r0, #0
	}
 800813c:	bd38      	pop	{r3, r4, r5, pc}
 800813e:	bf00      	nop
 8008140:	20003d48 	.word	0x20003d48
 8008144:	20003d54 	.word	0x20003d54
 8008148:	20003df4 	.word	0x20003df4

0800814c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <pvTaskIncrementMutexHeldCount+0x18>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	b123      	cbz	r3, 800815c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008152:	4b04      	ldr	r3, [pc, #16]	; (8008164 <pvTaskIncrementMutexHeldCount+0x18>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008158:	3301      	adds	r3, #1
 800815a:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 800815c:	4b01      	ldr	r3, [pc, #4]	; (8008164 <pvTaskIncrementMutexHeldCount+0x18>)
 800815e:	6818      	ldr	r0, [r3, #0]
	}
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20003d48 	.word	0x20003d48

08008168 <__libc_init_array>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	4e0d      	ldr	r6, [pc, #52]	; (80081a0 <__libc_init_array+0x38>)
 800816c:	4c0d      	ldr	r4, [pc, #52]	; (80081a4 <__libc_init_array+0x3c>)
 800816e:	1ba4      	subs	r4, r4, r6
 8008170:	10a4      	asrs	r4, r4, #2
 8008172:	2500      	movs	r5, #0
 8008174:	42a5      	cmp	r5, r4
 8008176:	d109      	bne.n	800818c <__libc_init_array+0x24>
 8008178:	4e0b      	ldr	r6, [pc, #44]	; (80081a8 <__libc_init_array+0x40>)
 800817a:	4c0c      	ldr	r4, [pc, #48]	; (80081ac <__libc_init_array+0x44>)
 800817c:	f000 f880 	bl	8008280 <_init>
 8008180:	1ba4      	subs	r4, r4, r6
 8008182:	10a4      	asrs	r4, r4, #2
 8008184:	2500      	movs	r5, #0
 8008186:	42a5      	cmp	r5, r4
 8008188:	d105      	bne.n	8008196 <__libc_init_array+0x2e>
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008190:	4798      	blx	r3
 8008192:	3501      	adds	r5, #1
 8008194:	e7ee      	b.n	8008174 <__libc_init_array+0xc>
 8008196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800819a:	4798      	blx	r3
 800819c:	3501      	adds	r5, #1
 800819e:	e7f2      	b.n	8008186 <__libc_init_array+0x1e>
 80081a0:	08008564 	.word	0x08008564
 80081a4:	08008564 	.word	0x08008564
 80081a8:	08008564 	.word	0x08008564
 80081ac:	08008568 	.word	0x08008568

080081b0 <memcpy>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	1e43      	subs	r3, r0, #1
 80081b4:	440a      	add	r2, r1
 80081b6:	4291      	cmp	r1, r2
 80081b8:	d100      	bne.n	80081bc <memcpy+0xc>
 80081ba:	bd10      	pop	{r4, pc}
 80081bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081c4:	e7f7      	b.n	80081b6 <memcpy+0x6>

080081c6 <abort>:
 80081c6:	b508      	push	{r3, lr}
 80081c8:	2006      	movs	r0, #6
 80081ca:	f000 f82b 	bl	8008224 <raise>
 80081ce:	2001      	movs	r0, #1
 80081d0:	f000 f854 	bl	800827c <_exit>

080081d4 <_raise_r>:
 80081d4:	291f      	cmp	r1, #31
 80081d6:	b538      	push	{r3, r4, r5, lr}
 80081d8:	4604      	mov	r4, r0
 80081da:	460d      	mov	r5, r1
 80081dc:	d904      	bls.n	80081e8 <_raise_r+0x14>
 80081de:	2316      	movs	r3, #22
 80081e0:	6003      	str	r3, [r0, #0]
 80081e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ea:	b112      	cbz	r2, 80081f2 <_raise_r+0x1e>
 80081ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081f0:	b94b      	cbnz	r3, 8008206 <_raise_r+0x32>
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 f830 	bl	8008258 <_getpid_r>
 80081f8:	462a      	mov	r2, r5
 80081fa:	4601      	mov	r1, r0
 80081fc:	4620      	mov	r0, r4
 80081fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008202:	f000 b817 	b.w	8008234 <_kill_r>
 8008206:	2b01      	cmp	r3, #1
 8008208:	d00a      	beq.n	8008220 <_raise_r+0x4c>
 800820a:	1c59      	adds	r1, r3, #1
 800820c:	d103      	bne.n	8008216 <_raise_r+0x42>
 800820e:	2316      	movs	r3, #22
 8008210:	6003      	str	r3, [r0, #0]
 8008212:	2001      	movs	r0, #1
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	2400      	movs	r4, #0
 8008218:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800821c:	4628      	mov	r0, r5
 800821e:	4798      	blx	r3
 8008220:	2000      	movs	r0, #0
 8008222:	bd38      	pop	{r3, r4, r5, pc}

08008224 <raise>:
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <raise+0xc>)
 8008226:	4601      	mov	r1, r0
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	f7ff bfd3 	b.w	80081d4 <_raise_r>
 800822e:	bf00      	nop
 8008230:	200000a0 	.word	0x200000a0

08008234 <_kill_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4c07      	ldr	r4, [pc, #28]	; (8008254 <_kill_r+0x20>)
 8008238:	2300      	movs	r3, #0
 800823a:	4605      	mov	r5, r0
 800823c:	4608      	mov	r0, r1
 800823e:	4611      	mov	r1, r2
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	f000 f813 	bl	800826c <_kill>
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	d102      	bne.n	8008250 <_kill_r+0x1c>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	b103      	cbz	r3, 8008250 <_kill_r+0x1c>
 800824e:	602b      	str	r3, [r5, #0]
 8008250:	bd38      	pop	{r3, r4, r5, pc}
 8008252:	bf00      	nop
 8008254:	200045d4 	.word	0x200045d4

08008258 <_getpid_r>:
 8008258:	f000 b800 	b.w	800825c <_getpid>

0800825c <_getpid>:
 800825c:	4b02      	ldr	r3, [pc, #8]	; (8008268 <_getpid+0xc>)
 800825e:	2258      	movs	r2, #88	; 0x58
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008266:	4770      	bx	lr
 8008268:	200045d4 	.word	0x200045d4

0800826c <_kill>:
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <_kill+0xc>)
 800826e:	2258      	movs	r2, #88	; 0x58
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008276:	4770      	bx	lr
 8008278:	200045d4 	.word	0x200045d4

0800827c <_exit>:
 800827c:	e7fe      	b.n	800827c <_exit>
	...

08008280 <_init>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	bf00      	nop
 8008284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008286:	bc08      	pop	{r3}
 8008288:	469e      	mov	lr, r3
 800828a:	4770      	bx	lr

0800828c <_fini>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr
